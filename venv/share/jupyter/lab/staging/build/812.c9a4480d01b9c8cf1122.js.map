{"version":3,"file":"812.c9a4480d01b9c8cf1122.js?v=c9a4480d01b9c8cf1122","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAE0D;AACH;AACI;AACJ;AACE;AACD;AACF;AACE;AACD;AACE;AACI;AACE;AACL;AACD;AACN;AACM;AACP;AACQ;AACF;AACC;AACN;AACI;AACE;AACP;AACK;AACM;AACF;AACL;AACA;AACK;AACJ;AACL;AACU;AACH;AACH;AACM;AACJ;AACA;AACD;AACL;AACI;AACI;AACE;AACR;AACK;;;AC/CzD;AACA;AACA;AACA;AACA;;AAEmD;;AAE/B;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,sDAAsD,QAAQ,UAAU,OAAO;AAC/E;AACA;AACA;;AAEA;AACA;AACA;AACO;;AAEP;AACA;AACA,qBAAqB,8BAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,uCAA6C;AAChE;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,IAAI,8BAAoB;AACxB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,yCAA+B;AACtD;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,yCAA+B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,UAAU,yCAA+B;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAkC;AAC1D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAA4B;AACpD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAA2C;AACnE;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAA2B;AACnD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAA6B;AACrD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAmC;AAC3D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAgC;AACxD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,IAAoC;AAC5D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAgC;AACxD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,IAAkC;AAC1D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAiC;AACzD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAA+B;AACvD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAiC;AACzD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAgC;AACxD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAkC;AAC1D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,IAAsC;AAC9D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAwC;AAChE;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,IAAmC;AAC3D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAkC;AAC1D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAA4B;AACpD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAkC;AAC1D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAA2B;AACnD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAmC;AAC3D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAiC;AACzD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAgC;AACxD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAkC;AAC1D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAA2B;AACnD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAgC;AACxD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAsC;AAC9D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAoC;AAC5D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAA+B;AACvD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAA+B;AACvD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAoC;AAC5D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAgC;AACxD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAqC;AAC7D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAkC;AAC1D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAA+B;AACvD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAqC;AAC7D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAiC;AACzD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAiC;AACzD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAgC;AACxD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAkC;AAC1D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAgD;AACxE;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,IAAmC;AAC3D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAA2B;AACnD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAA+B;AACvD;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAmC;AAC3D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAqC;AAC7D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,gBAAgB,mBAAO,CAAC,KAAkC;AAC1D;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA,8DAA8D,OAAO,sCAAsC,OAAO;AAClH;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,gBAAgB,2CACJ,kBAAkB,iBAAiB;AAC/C,KAAK;AACL;AACA;AACA,gBAAgB,2CACJ,kBAAkB,iBAAiB;AAC/C,KAAK;AACL;AACA,GAAG;AACH,oCAAoC,iCAAiC;;AAErE,cAAc,sCAAsC;;AAEpD;AACA,4BAA4B,8BAAoB;AAChD,iBAAiB,8BAAoB;;AAErC;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C,gCAAgC,yBAAyB,eAAe,MAAM;;AAE9E;AACA,mCAAmC,iBAAiB;AACpD;;AAEA","sources":["webpack://@jupyterlab/application-top/./build/style.js","webpack://@jupyterlab/application-top/./build/index.out.js"],"sourcesContent":["/* This is a generated file of CSS imports */\n/* It was generated by @jupyterlab/builder in Build.ensureAssets() */\n\nimport '@jupyterlab/application-extension/style/index.js';\nimport '@jupyterlab/apputils-extension/style/index.js';\nimport '@jupyterlab/cell-toolbar-extension/style/index.js';\nimport '@jupyterlab/celltags-extension/style/index.js';\nimport '@jupyterlab/codemirror-extension/style/index.js';\nimport '@jupyterlab/completer-extension/style/index.js';\nimport '@jupyterlab/console-extension/style/index.js';\nimport '@jupyterlab/csvviewer-extension/style/index.js';\nimport '@jupyterlab/debugger-extension/style/index.js';\nimport '@jupyterlab/docmanager-extension/style/index.js';\nimport '@jupyterlab/documentsearch-extension/style/index.js';\nimport '@jupyterlab/extensionmanager-extension/style/index.js';\nimport '@jupyterlab/filebrowser-extension/style/index.js';\nimport '@jupyterlab/fileeditor-extension/style/index.js';\nimport '@jupyterlab/help-extension/style/index.js';\nimport '@jupyterlab/htmlviewer-extension/style/index.js';\nimport '@jupyterlab/hub-extension/style/index.js';\nimport '@jupyterlab/imageviewer-extension/style/index.js';\nimport '@jupyterlab/inspector-extension/style/index.js';\nimport '@jupyterlab/javascript-extension/style/index.js';\nimport '@jupyterlab/json-extension/style/index.js';\nimport '@jupyterlab/launcher-extension/style/index.js';\nimport '@jupyterlab/logconsole-extension/style/index.js';\nimport '@jupyterlab/lsp-extension/style/index.js';\nimport '@jupyterlab/mainmenu-extension/style/index.js';\nimport '@jupyterlab/markdownviewer-extension/style/index.js';\nimport '@jupyterlab/markedparser-extension/style/index.js';\nimport '@jupyterlab/mathjax-extension/style/index.js';\nimport '@jupyterlab/mermaid-extension/style/index.js';\nimport '@jupyterlab/metadataform-extension/style/index.js';\nimport '@jupyterlab/notebook-extension/style/index.js';\nimport '@jupyterlab/pdf-extension/style/index.js';\nimport '@jupyterlab/pluginmanager-extension/style/index.js';\nimport '@jupyterlab/rendermime-extension/style/index.js';\nimport '@jupyterlab/running-extension/style/index.js';\nimport '@jupyterlab/settingeditor-extension/style/index.js';\nimport '@jupyterlab/shortcuts-extension/style/index.js';\nimport '@jupyterlab/statusbar-extension/style/index.js';\nimport '@jupyterlab/terminal-extension/style/index.js';\nimport '@jupyterlab/toc-extension/style/index.js';\nimport '@jupyterlab/tooltip-extension/style/index.js';\nimport '@jupyterlab/translation-extension/style/index.js';\nimport '@jupyterlab/ui-components-extension/style/index.js';\nimport '@jupyterlab/vega5-extension/style/index.js';\nimport '@jupyterlab/workspaces-extension/style/index.js';\n","// This file is auto-generated from the corresponding file in /dev_mode\n/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n\nimport { PageConfig } from '@jupyterlab/coreutils';\n\nimport './style.js';\n\nasync function createModule(scope, module) {\n  try {\n    const factory = await window._JUPYTERLAB[scope].get(module);\n    const instance = factory();\n    instance.__scope__ = scope;\n    return instance;\n  } catch(e) {\n    console.warn(`Failed to create module: package: ${scope}; module: ${module}`);\n    throw e;\n  }\n}\n\n/**\n * The main entry point for the application.\n */\nexport async function main() {\n\n   // Handle a browser test.\n   // Set up error handling prior to loading extensions.\n   var browserTest = PageConfig.getOption('browserTest');\n   if (browserTest.toLowerCase() === 'true') {\n     var el = document.createElement('div');\n     el.id = 'browserTest';\n     document.body.appendChild(el);\n     el.textContent = '[]';\n     el.style.display = 'none';\n     var errors = [];\n     var reported = false;\n     var timeout = 25000;\n\n     var report = function() {\n       if (reported) {\n         return;\n       }\n       reported = true;\n       el.className = 'completed';\n     }\n\n     window.onerror = function(msg, url, line, col, error) {\n       errors.push(String(error));\n       el.textContent = JSON.stringify(errors)\n     };\n     console.error = function(message) {\n       errors.push(String(message));\n       el.textContent = JSON.stringify(errors)\n     };\n  }\n\n  var JupyterLab = require('@jupyterlab/application').JupyterLab;\n  var disabled = [];\n  var deferred = [];\n  var ignorePlugins = [];\n  var register = [];\n\n\n  const federatedExtensionPromises = [];\n  const federatedMimeExtensionPromises = [];\n  const federatedStylePromises = [];\n\n  // Start initializing the federated extensions\n  const extensions = JSON.parse(\n    PageConfig.getOption('federated_extensions')\n  );\n\n  const queuedFederated = [];\n\n  extensions.forEach(data => {\n    if (data.extension) {\n      queuedFederated.push(data.name);\n      federatedExtensionPromises.push(createModule(data.name, data.extension));\n    }\n    if (data.mimeExtension) {\n      queuedFederated.push(data.name);\n      federatedMimeExtensionPromises.push(createModule(data.name, data.mimeExtension));\n    }\n\n    if (data.style && !PageConfig.Extension.isDisabled(data.name)) {\n      federatedStylePromises.push(createModule(data.name, data.style));\n    }\n  });\n\n  const allPlugins = [];\n\n  /**\n   * Iterate over active plugins in an extension.\n   *\n   * #### Notes\n   * This also populates the disabled, deferred, and ignored arrays.\n   */\n  function* activePlugins(extension) {\n    // Handle commonjs or es2015 modules\n    let exports;\n    if (extension.hasOwnProperty('__esModule')) {\n      exports = extension.default;\n    } else {\n      // CommonJS exports.\n      exports = extension;\n    }\n\n    let plugins = Array.isArray(exports) ? exports : [exports];\n    for (let plugin of plugins) {\n      const isDisabled = PageConfig.Extension.isDisabled(plugin.id);\n      allPlugins.push({\n        id: plugin.id,\n        description: plugin.description,\n        requires: plugin.requires ?? [],\n        optional: plugin.optional ?? [],\n        provides: plugin.provides ?? null,\n        autoStart: plugin.autoStart,\n        enabled: !isDisabled,\n        extension: extension.__scope__\n      });\n      if (isDisabled) {\n        disabled.push(plugin.id);\n        continue;\n      }\n      if (PageConfig.Extension.isDeferred(plugin.id)) {\n        deferred.push(plugin.id);\n        ignorePlugins.push(plugin.id);\n      }\n      yield plugin;\n    }\n  }\n\n  // Handle the registered mime extensions.\n  const mimeExtensions = [];\n  if (!queuedFederated.includes('@jupyterlab/javascript-extension')) {\n    try {\n      let ext = require('@jupyterlab/javascript-extension');\n      ext.__scope__ = '@jupyterlab/javascript-extension';\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/json-extension')) {\n    try {\n      let ext = require('@jupyterlab/json-extension');\n      ext.__scope__ = '@jupyterlab/json-extension';\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/mermaid-extension')) {\n    try {\n      let ext = require('@jupyterlab/mermaid-extension/lib/mime.js');\n      ext.__scope__ = '@jupyterlab/mermaid-extension';\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/pdf-extension')) {\n    try {\n      let ext = require('@jupyterlab/pdf-extension');\n      ext.__scope__ = '@jupyterlab/pdf-extension';\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/vega5-extension')) {\n    try {\n      let ext = require('@jupyterlab/vega5-extension');\n      ext.__scope__ = '@jupyterlab/vega5-extension';\n      for (let plugin of activePlugins(ext)) {\n        mimeExtensions.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  // Add the federated mime extensions.\n  const federatedMimeExtensions = await Promise.allSettled(federatedMimeExtensionPromises);\n  federatedMimeExtensions.forEach(p => {\n    if (p.status === \"fulfilled\") {\n      for (let plugin of activePlugins(p.value)) {\n        mimeExtensions.push(plugin);\n      }\n    } else {\n      console.error(p.reason);\n    }\n  });\n\n  // Handled the registered standard extensions.\n  if (!queuedFederated.includes('@jupyterlab/application-extension')) {\n    try {\n      let ext = require('@jupyterlab/application-extension');\n      ext.__scope__ = '@jupyterlab/application-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/apputils-extension')) {\n    try {\n      let ext = require('@jupyterlab/apputils-extension');\n      ext.__scope__ = '@jupyterlab/apputils-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/cell-toolbar-extension')) {\n    try {\n      let ext = require('@jupyterlab/cell-toolbar-extension');\n      ext.__scope__ = '@jupyterlab/cell-toolbar-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/celltags-extension')) {\n    try {\n      let ext = require('@jupyterlab/celltags-extension');\n      ext.__scope__ = '@jupyterlab/celltags-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/codemirror-extension')) {\n    try {\n      let ext = require('@jupyterlab/codemirror-extension');\n      ext.__scope__ = '@jupyterlab/codemirror-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/completer-extension')) {\n    try {\n      let ext = require('@jupyterlab/completer-extension');\n      ext.__scope__ = '@jupyterlab/completer-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/console-extension')) {\n    try {\n      let ext = require('@jupyterlab/console-extension');\n      ext.__scope__ = '@jupyterlab/console-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/csvviewer-extension')) {\n    try {\n      let ext = require('@jupyterlab/csvviewer-extension');\n      ext.__scope__ = '@jupyterlab/csvviewer-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/debugger-extension')) {\n    try {\n      let ext = require('@jupyterlab/debugger-extension');\n      ext.__scope__ = '@jupyterlab/debugger-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/docmanager-extension')) {\n    try {\n      let ext = require('@jupyterlab/docmanager-extension');\n      ext.__scope__ = '@jupyterlab/docmanager-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/documentsearch-extension')) {\n    try {\n      let ext = require('@jupyterlab/documentsearch-extension');\n      ext.__scope__ = '@jupyterlab/documentsearch-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/extensionmanager-extension')) {\n    try {\n      let ext = require('@jupyterlab/extensionmanager-extension');\n      ext.__scope__ = '@jupyterlab/extensionmanager-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/filebrowser-extension')) {\n    try {\n      let ext = require('@jupyterlab/filebrowser-extension');\n      ext.__scope__ = '@jupyterlab/filebrowser-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/fileeditor-extension')) {\n    try {\n      let ext = require('@jupyterlab/fileeditor-extension');\n      ext.__scope__ = '@jupyterlab/fileeditor-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/help-extension')) {\n    try {\n      let ext = require('@jupyterlab/help-extension');\n      ext.__scope__ = '@jupyterlab/help-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/htmlviewer-extension')) {\n    try {\n      let ext = require('@jupyterlab/htmlviewer-extension');\n      ext.__scope__ = '@jupyterlab/htmlviewer-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/hub-extension')) {\n    try {\n      let ext = require('@jupyterlab/hub-extension');\n      ext.__scope__ = '@jupyterlab/hub-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/imageviewer-extension')) {\n    try {\n      let ext = require('@jupyterlab/imageviewer-extension');\n      ext.__scope__ = '@jupyterlab/imageviewer-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/inspector-extension')) {\n    try {\n      let ext = require('@jupyterlab/inspector-extension');\n      ext.__scope__ = '@jupyterlab/inspector-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/launcher-extension')) {\n    try {\n      let ext = require('@jupyterlab/launcher-extension');\n      ext.__scope__ = '@jupyterlab/launcher-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/logconsole-extension')) {\n    try {\n      let ext = require('@jupyterlab/logconsole-extension');\n      ext.__scope__ = '@jupyterlab/logconsole-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/lsp-extension')) {\n    try {\n      let ext = require('@jupyterlab/lsp-extension');\n      ext.__scope__ = '@jupyterlab/lsp-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/mainmenu-extension')) {\n    try {\n      let ext = require('@jupyterlab/mainmenu-extension');\n      ext.__scope__ = '@jupyterlab/mainmenu-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/markdownviewer-extension')) {\n    try {\n      let ext = require('@jupyterlab/markdownviewer-extension');\n      ext.__scope__ = '@jupyterlab/markdownviewer-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/markedparser-extension')) {\n    try {\n      let ext = require('@jupyterlab/markedparser-extension');\n      ext.__scope__ = '@jupyterlab/markedparser-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/mathjax-extension')) {\n    try {\n      let ext = require('@jupyterlab/mathjax-extension');\n      ext.__scope__ = '@jupyterlab/mathjax-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/mermaid-extension')) {\n    try {\n      let ext = require('@jupyterlab/mermaid-extension');\n      ext.__scope__ = '@jupyterlab/mermaid-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/metadataform-extension')) {\n    try {\n      let ext = require('@jupyterlab/metadataform-extension');\n      ext.__scope__ = '@jupyterlab/metadataform-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/notebook-extension')) {\n    try {\n      let ext = require('@jupyterlab/notebook-extension');\n      ext.__scope__ = '@jupyterlab/notebook-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/pluginmanager-extension')) {\n    try {\n      let ext = require('@jupyterlab/pluginmanager-extension');\n      ext.__scope__ = '@jupyterlab/pluginmanager-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/rendermime-extension')) {\n    try {\n      let ext = require('@jupyterlab/rendermime-extension');\n      ext.__scope__ = '@jupyterlab/rendermime-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/running-extension')) {\n    try {\n      let ext = require('@jupyterlab/running-extension');\n      ext.__scope__ = '@jupyterlab/running-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/settingeditor-extension')) {\n    try {\n      let ext = require('@jupyterlab/settingeditor-extension');\n      ext.__scope__ = '@jupyterlab/settingeditor-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/shortcuts-extension')) {\n    try {\n      let ext = require('@jupyterlab/shortcuts-extension');\n      ext.__scope__ = '@jupyterlab/shortcuts-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/statusbar-extension')) {\n    try {\n      let ext = require('@jupyterlab/statusbar-extension');\n      ext.__scope__ = '@jupyterlab/statusbar-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/terminal-extension')) {\n    try {\n      let ext = require('@jupyterlab/terminal-extension');\n      ext.__scope__ = '@jupyterlab/terminal-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/theme-dark-extension')) {\n    try {\n      let ext = require('@jupyterlab/theme-dark-extension');\n      ext.__scope__ = '@jupyterlab/theme-dark-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/theme-dark-high-contrast-extension')) {\n    try {\n      let ext = require('@jupyterlab/theme-dark-high-contrast-extension');\n      ext.__scope__ = '@jupyterlab/theme-dark-high-contrast-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/theme-light-extension')) {\n    try {\n      let ext = require('@jupyterlab/theme-light-extension');\n      ext.__scope__ = '@jupyterlab/theme-light-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/toc-extension')) {\n    try {\n      let ext = require('@jupyterlab/toc-extension');\n      ext.__scope__ = '@jupyterlab/toc-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/tooltip-extension')) {\n    try {\n      let ext = require('@jupyterlab/tooltip-extension');\n      ext.__scope__ = '@jupyterlab/tooltip-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/translation-extension')) {\n    try {\n      let ext = require('@jupyterlab/translation-extension');\n      ext.__scope__ = '@jupyterlab/translation-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/ui-components-extension')) {\n    try {\n      let ext = require('@jupyterlab/ui-components-extension');\n      ext.__scope__ = '@jupyterlab/ui-components-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n  if (!queuedFederated.includes('@jupyterlab/workspaces-extension')) {\n    try {\n      let ext = require('@jupyterlab/workspaces-extension');\n      ext.__scope__ = '@jupyterlab/workspaces-extension';\n      for (let plugin of activePlugins(ext)) {\n        register.push(plugin);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  // Add the federated extensions.\n  const federatedExtensions = await Promise.allSettled(federatedExtensionPromises);\n  federatedExtensions.forEach(p => {\n    if (p.status === \"fulfilled\") {\n      for (let plugin of activePlugins(p.value)) {\n        register.push(plugin);\n      }\n    } else {\n      console.error(p.reason);\n    }\n  });\n\n  // Load all federated component styles and log errors for any that do not\n  (await Promise.allSettled(federatedStylePromises)).filter(({status}) => status === \"rejected\").forEach(({reason}) => {\n    console.error(reason);\n  });\n\n  const lab = new JupyterLab({\n    mimeExtensions,\n    disabled: {\n      matches: disabled,\n      patterns: PageConfig.Extension.disabled\n        .map(function (val) { return val.raw; })\n    },\n    deferred: {\n      matches: deferred,\n      patterns: PageConfig.Extension.deferred\n        .map(function (val) { return val.raw; })\n    },\n    availablePlugins: allPlugins\n  });\n  register.forEach(function(item) { lab.registerPluginModule(item); });\n\n  lab.start({ ignorePlugins, bubblingKeydown: true });\n\n  // Expose global app instance when in dev mode or when toggled explicitly.\n  var exposeAppInBrowser = (PageConfig.getOption('exposeAppInBrowser') || '').toLowerCase() === 'true';\n  var devMode = (PageConfig.getOption('devMode') || '').toLowerCase() === 'true';\n\n  if (exposeAppInBrowser || devMode) {\n    window.jupyterapp = lab;\n  }\n\n  // Handle a browser test.\n  if (browserTest.toLowerCase() === 'true') {\n    lab.restored\n      .then(function() { report(errors); })\n      .catch(function(reason) { report([`RestoreError: ${reason.message}`]); });\n\n    // Handle failures to restore after the timeout has elapsed.\n    window.setTimeout(function() { report(errors); }, timeout);\n  }\n\n}\n"],"names":[],"sourceRoot":""}