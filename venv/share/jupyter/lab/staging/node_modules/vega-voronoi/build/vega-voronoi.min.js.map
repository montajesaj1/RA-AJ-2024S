{"version":3,"file":"vega-voronoi.min.js","sources":["../../../node_modules/robust-predicates/esm/util.js","../../../node_modules/robust-predicates/esm/orient2d.js","../../../node_modules/delaunator/index.js","../../../node_modules/d3-delaunay/src/path.js","../../../node_modules/d3-delaunay/src/polygon.js","../../../node_modules/d3-delaunay/src/delaunay.js","../../../node_modules/d3-delaunay/src/voronoi.js","../src/Voronoi.js"],"sourcesContent":["export const epsilon = 1.1102230246251565e-16;\nexport const splitter = 134217729;\nexport const resulterrbound = (3 + 8 * epsilon) * epsilon;\n\n// fast_expansion_sum_zeroelim routine from oritinal code\nexport function sum(elen, e, flen, f, h) {\n    let Q, Qnew, hh, bvirt;\n    let enow = e[0];\n    let fnow = f[0];\n    let eindex = 0;\n    let findex = 0;\n    if ((fnow > enow) === (fnow > -enow)) {\n        Q = enow;\n        enow = e[++eindex];\n    } else {\n        Q = fnow;\n        fnow = f[++findex];\n    }\n    let hindex = 0;\n    if (eindex < elen && findex < flen) {\n        if ((fnow > enow) === (fnow > -enow)) {\n            Qnew = enow + Q;\n            hh = Q - (Qnew - enow);\n            enow = e[++eindex];\n        } else {\n            Qnew = fnow + Q;\n            hh = Q - (Qnew - fnow);\n            fnow = f[++findex];\n        }\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        while (eindex < elen && findex < flen) {\n            if ((fnow > enow) === (fnow > -enow)) {\n                Qnew = Q + enow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (enow - bvirt);\n                enow = e[++eindex];\n            } else {\n                Qnew = Q + fnow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n                fnow = f[++findex];\n            }\n            Q = Qnew;\n            if (hh !== 0) {\n                h[hindex++] = hh;\n            }\n        }\n    }\n    while (eindex < elen) {\n        Qnew = Q + enow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (enow - bvirt);\n        enow = e[++eindex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    while (findex < flen) {\n        Qnew = Q + fnow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n        fnow = f[++findex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function sum_three(alen, a, blen, b, clen, c, tmp, out) {\n    return sum(sum(alen, a, blen, b, tmp), tmp, clen, c, out);\n}\n\n// scale_expansion_zeroelim routine from oritinal code\nexport function scale(elen, e, b, h) {\n    let Q, sum, hh, product1, product0;\n    let bvirt, c, ahi, alo, bhi, blo;\n\n    c = splitter * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    let enow = e[0];\n    Q = enow * b;\n    c = splitter * enow;\n    ahi = c - (c - enow);\n    alo = enow - ahi;\n    hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);\n    let hindex = 0;\n    if (hh !== 0) {\n        h[hindex++] = hh;\n    }\n    for (let i = 1; i < elen; i++) {\n        enow = e[i];\n        product1 = enow * b;\n        c = splitter * enow;\n        ahi = c - (c - enow);\n        alo = enow - ahi;\n        product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);\n        sum = Q + product0;\n        bvirt = sum - Q;\n        hh = Q - (sum - bvirt) + (product0 - bvirt);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        Q = product1 + sum;\n        hh = sum - (Q - product1);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function negate(elen, e) {\n    for (let i = 0; i < elen; i++) e[i] = -e[i];\n    return elen;\n}\n\nexport function estimate(elen, e) {\n    let Q = e[0];\n    for (let i = 1; i < elen; i++) Q += e[i];\n    return Q;\n}\n\nexport function vec(n) {\n    return new Float64Array(n);\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum} from './util.js';\n\nconst ccwerrboundA = (3 + 16 * epsilon) * epsilon;\nconst ccwerrboundB = (2 + 12 * epsilon) * epsilon;\nconst ccwerrboundC = (9 + 64 * epsilon) * epsilon * epsilon;\n\nconst B = vec(4);\nconst C1 = vec(8);\nconst C2 = vec(12);\nconst D = vec(16);\nconst u = vec(4);\n\nfunction orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {\n    let acxtail, acytail, bcxtail, bcytail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    const acx = ax - cx;\n    const bcx = bx - cx;\n    const acy = ay - cy;\n    const bcy = by - cy;\n\n    s1 = acx * bcy;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcx;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    B[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    B[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    B[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    B[3] = u3;\n\n    let det = estimate(4, B);\n    let errbound = ccwerrboundB * detsum;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - acx;\n    acxtail = ax - (acx + bvirt) + (bvirt - cx);\n    bvirt = bx - bcx;\n    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);\n    bvirt = ay - acy;\n    acytail = ay - (acy + bvirt) + (bvirt - cy);\n    bvirt = by - bcy;\n    bcytail = by - (bcy + bvirt) + (bvirt - cy);\n\n    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {\n        return det;\n    }\n\n    errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);\n    det += (acx * bcytail + bcy * acxtail) - (acy * bcxtail + bcx * acytail);\n    if (det >= errbound || -det >= errbound) return det;\n\n    s1 = acxtail * bcy;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcx;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C1len = sum(4, B, 4, u, C1);\n\n    s1 = acx * bcytail;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcxtail;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C2len = sum(C1len, C1, 4, u, C2);\n\n    s1 = acxtail * bcytail;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcxtail;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const Dlen = sum(C2len, C2, 4, u, D);\n\n    return D[Dlen - 1];\n}\n\nexport function orient2d(ax, ay, bx, by, cx, cy) {\n    const detleft = (ay - cy) * (bx - cx);\n    const detright = (ax - cx) * (by - cy);\n    const det = detleft - detright;\n\n    if (detleft === 0 || detright === 0 || (detleft > 0) !== (detright > 0)) return det;\n\n    const detsum = Math.abs(detleft + detright);\n    if (Math.abs(det) >= ccwerrboundA * detsum) return det;\n\n    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);\n}\n\nexport function orient2dfast(ax, ay, bx, by, cx, cy) {\n    return (ay - cy) * (bx - cx) - (ax - cx) * (by - cy);\n}\n","\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nimport {orient2d} from 'robust-predicates';\n\nexport default class Delaunator {\n\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    }\n\n    update() {\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n        const n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let minDist = Infinity;\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (let i = 0; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (let i = 0; i < n; i++) {\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\n                const id = this._ids[i];\n                if (this._dists[id] > d0) {\n                    hull[j++] = id;\n                    d0 = this._dists[id];\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (let i = 0; i < n; i++) {\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n","const epsilon = 1e-6;\n\nexport default class Path {\n  constructor() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n  }\n  moveTo(x, y) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  }\n  lineTo(x, y) {\n    this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arc(x, y, r) {\n    x = +x, y = +y, r = +r;\n    const x0 = x + r;\n    const y0 = y;\n    if (r < 0) throw new Error(\"negative radius\");\n    if (this._x1 === null) this._ += `M${x0},${y0}`;\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n    if (!r) return;\n    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n  }\n  rect(x, y, w, h) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n  }\n  value() {\n    return this._ || null;\n  }\n}\n","export default class Polygon {\n  constructor() {\n    this._ = [];\n  }\n  moveTo(x, y) {\n    this._.push([x, y]);\n  }\n  closePath() {\n    this._.push(this._[0].slice());\n  }\n  lineTo(x, y) {\n    this._.push([x, y]);\n  }\n  value() {\n    return this._.length ? this._ : null;\n  }\n}\n","import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\n\nconst tau = 2 * Math.PI, pow = Math.pow;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\n// A triangulation is collinear if all its triangles have a non-null area\nfunction collinear(d) {\n  const {triangles, coords} = d;\n  for (let i = 0; i < triangles.length; i += 3) {\n    const a = 2 * triangles[i],\n          b = 2 * triangles[i + 1],\n          c = 2 * triangles[i + 2],\n          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])\n                - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n    if (cross > 1e-10) return false;\n  }\n  return true;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\n\nexport default class Delaunay {\n  static from(points, fx = pointX, fy = pointY, that) {\n    return new Delaunay(\"length\" in points\n        ? flatArray(points, fx, fy, that)\n        : Float64Array.from(flatIterable(points, fx, fy, that)));\n  }\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n    this._init();\n  }\n  update() {\n    this._delaunator.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const d = this._delaunator, points = this.points;\n\n    // check for collinear\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\n        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\n        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\n        r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n    const hullIndex = this._hullIndex.fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    }\n\n    // degenerate case: 1 or 2 (distinct) points\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) {\n        inedges[hull[1]] = 0;\n        this.triangles[1] = hull[1];\n        this.triangles[2] = hull[1];\n      }\n    }\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;\n\n    // degenerate case with several collinear points\n    if (collinear) {\n      const l = collinear.indexOf(i);\n      if (l > 0) yield collinear[l - 1];\n      if (l < collinear.length - 1) yield collinear[l + 1];\n      return;\n    }\n\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0, p0 = -1;\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\n    const e0 = inedges[i];\n    let e = e0;\n    do {\n      let t = triangles[e];\n      const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n        if (e !== t) {\n          if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\n        }\n        break;\n      }\n    } while (e !== e0);\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, halfedges, triangles} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r) {\n    if (r === undefined && (!context || typeof context.moveTo !== \"function\")) r = context, context = null;\n    r = r == undefined ? 2 : +r;\n    const buffer = context == null ? context = new Path : undefined;\n    const {points} = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i], y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {hull, points} = this;\n    const h = hull[0] * 2, n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon;\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, triangles} = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {triangles} = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon;\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}\n","import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\n\nexport default class Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n    this._init();\n  }\n  update() {\n    this.delaunay.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const {delaunay: {points, hull, triangles}, vectors} = this;\n\n    // Compute circumcenters.\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const ex = x3 - x1;\n      const ey = y3 - y1;\n      const ab = (dx * ey - dy * ex) * 2;\n\n      if (Math.abs(ab) < 1e-9) {\n        // degenerate case (collinear diagram)\n        // almost equal points (degenerate triangle)\n        // the circumcenter is at the infinity, in a\n        // direction that is:\n        // 1. orthogonal to the halfedge.\n        let a = 1e9;\n        // 2. points away from the center; since the list of triangles starts\n        // in the center, the first point of the first triangle\n        // will be our reference\n        const r = triangles[0] * 2;\n        a *= Math.sign((points[r] - x1) * ey - (points[r + 1] - y1) * ex);\n        x = (x1 + x3) / 2 - a * ey;\n        y = (y1 + y3) / 2 + a * ex;\n      } else {\n        const d = 1 / ab;\n        const bl = dx * dx + dy * dy;\n        const cl = ex * ex + ey * ey;\n        x = x1 + (ey * bl - dy * cl) * d;\n        y = y1 + (dx * cl - ex * bl) * d;\n      }\n      circumcenters[j] = x;\n      circumcenters[j + 1] = y;\n    }\n\n    // Compute exterior cell rays.\n    let h = hull[hull.length - 1];\n    let p0, p1 = h * 4;\n    let x0, x1 = points[2 * h];\n    let y0, y1 = points[2 * h + 1];\n    vectors.fill(0);\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\n    if (hull.length <= 1) return null;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let h0, h1 = hull[hull.length - 1];\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const points = this._clip(i);\n    if (points === null || !points.length) return;\n    context.moveTo(points[0], points[1]);\n    let n = points.length;\n    while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;\n    for (let i = 2; i < n; i += 2) {\n      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\n        context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {delaunay: {points}} = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) cell.index = i, yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon;\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  *neighbors(i) {\n    const ci = this._clip(i);\n    if (ci) for (const j of this.delaunay.neighbors(i)) {\n      const cj = this._clip(j);\n      // find the common edge\n      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n          if (ci[ai] == cj[aj]\n          && ci[ai + 1] == cj[aj + 1]\n          && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj]\n          && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]\n          ) {\n            yield j;\n            break loop;\n          }\n        }\n      }\n    }\n  }\n  _cell(i) {\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {vectors: V} = this;\n    const v = i * 4;\n    return V[v] || V[v + 1]\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n        : this._clipFinite(i, points);\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n    let c0, c1 = this._regioncode(x1, y1);\n    let e0, e1 = 0;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);\n        else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);\n          else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);\n        else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    while (true) {\n      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x, y, c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points), p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101: e0 = 0b0100; continue; // top-left\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n        case 0b0110: e0 = 0b0010; continue; // top-right\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n      }\n      // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are\n      // undefined, the conditional statement will be executed.\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    if (P.length > 4) {\n      for (let i = 0; i < P.length; i+= 2) {\n        const j = (i + 2) % P.length, k = (i + 4) % P.length;\n        if (P[i] === P[j] && P[j] === P[k]\n        || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])\n          P.splice(j, 2), i -= 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity, c, x, y;\n    if (vy < 0) { // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) { // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) { // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) { // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001\n        : x === this.xmax ? 0b0010 : 0b0000)\n        | (y === this.ymin ? 0b0100\n        : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001\n        : x > this.xmax ? 0b0010 : 0b0000)\n        | (y < this.ymin ? 0b0100\n        : y > this.ymax ? 0b1000 : 0b0000);\n  }\n}\n","import {Transform} from 'vega-dataflow';\nimport {inherits} from 'vega-util';\nimport {Delaunay} from 'd3-delaunay';\n\nexport default function Voronoi(params) {\n  Transform.call(this, null, params);\n}\n\nVoronoi.Definition = {\n  'type': 'Voronoi',\n  'metadata': {'modifies': true},\n  'params': [\n    { 'name': 'x', 'type': 'field', 'required': true },\n    { 'name': 'y', 'type': 'field', 'required': true },\n    { 'name': 'size', 'type': 'number', 'array': true, 'length': 2 },\n    { 'name': 'extent', 'type': 'array', 'array': true, 'length': 2,\n      'default': [[-1e5, -1e5], [1e5, 1e5]],\n      'content': {'type': 'number', 'array': true, 'length': 2} },\n    { 'name': 'as', 'type': 'string', 'default': 'path' }\n  ]\n};\n\nconst defaultExtent = [-1e5, -1e5, 1e5, 1e5];\n\ninherits(Voronoi, Transform, {\n  transform(_, pulse) {\n    const as = _.as || 'path',\n          data = pulse.source;\n\n    // nothing to do if no data\n    if (!data || !data.length) return pulse;\n\n    // configure and construct voronoi diagram\n    let s = _.size;\n    s = s ? [0, 0, s[0], s[1]]\n      : (s = _.extent) ? [s[0][0], s[0][1], s[1][0], s[1][1]]\n      : defaultExtent;\n\n    const voronoi = this.value = Delaunay.from(data, _.x, _.y).voronoi(s);\n\n    // map polygons to paths\n    for (let i=0, n=data.length; i<n; ++i) {\n      const polygon = voronoi.cellPolygon(i);\n      data[i][as] = polygon ? toPathString(polygon) : null;\n    }\n\n    return pulse.reflow(_.modified()).modifies(as);\n  }\n});\n\n// suppress duplicated end point vertices\nfunction toPathString(p) {\n  const x = p[0][0],\n        y = p[0][1];\n\n  let n = p.length - 1;\n  for (; p[n][0] === x && p[n][1] === y; --n);\n\n  return 'M' + p.slice(0, n + 1).join('L') + 'Z';\n}\n"],"names":["splitter","resulterrbound","sum","elen","e","flen","f","h","Q","Qnew","hh","bvirt","enow","fnow","eindex","findex","hindex","vec","n","Float64Array","ccwerrboundA","ccwerrboundB","ccwerrboundC","B","C1","C2","D","u","orient2d","ax","ay","bx","by","cx","cy","detleft","detright","det","detsum","Math","abs","acxtail","acytail","bcxtail","bcytail","c","ahi","alo","bhi","blo","_i","_j","_0","s1","s0","t1","t0","u3","acx","bcx","acy","bcy","i","estimate","errbound","C1len","C2len","Dlen","orient2dadapt","EPSILON","pow","EDGE_STACK","Uint32Array","Delaunator","static","points","getX","arguments","length","undefined","defaultGetX","getY","defaultGetY","coords","p","constructor","Error","this","maxTriangles","max","_triangles","_halfedges","Int32Array","_hashSize","ceil","sqrt","_hullPrev","_hullNext","_hullTri","_hullHash","fill","_ids","_dists","update","hullPrev","hullNext","hullTri","hullHash","minX","Infinity","minY","maxX","maxY","x","y","i0","i1","i2","minDist","d","dist","i0x","i0y","i1x","i1y","minRadius","r","circumradius","i2x","i2y","quicksort","hull","j","d0","id","subarray","triangles","halfedges","center","dx","dy","ex","ey","bl","cl","circumcenter","_cx","_cy","_hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","xp","yp","k","start","key","q","t","_legalize","floor","pseudoAngle","a","ar","b","a0","b0","al","p0","pr","pl","p1","inCircle","hbl","_link","br","px","py","fx","fy","bp","cp","ids","dists","left","right","temp","tempDist","swap","arr","tmp","epsilon","Path","_x0","_y0","_x1","_y1","_","moveTo","closePath","lineTo","arc","x0","y0","rect","w","value","Polygon","push","slice","tau","PI","pointX","pointY","jitter","sin","cos","Delaunay","that","array","call","flatArray","from","flatIterable","_delaunator","inedges","_hullIndex","_init","collinear","sort","bounds","hypot","hullIndex","voronoi","delaunay","xmin","ymin","xmax","ymax","_circumcenters","vectors","circumcenters","t2","t3","x1","y1","x2","y2","x3","y3","ab","sign","render","context","buffer","ti","tj","xi","yi","xj","yj","_renderSegment","h0","h1","v","_project","renderBounds","renderCell","_clip","cellPolygons","cell","cellPolygon","index","polygon","S","c0","_regioncode","c1","_clipSegment","contains","_step","neighbors","ci","cj","loop","ai","li","aj","lj","_cell","e0","V","_clipInfinite","_clipFinite","P","e1","sx0","sy0","sx1","sy1","_edgecode","_edge","vx0","vy0","vxn","vyn","Array","unshift","splice","vx","vy","l","indexOf","find","dc","dt","renderHull","renderPoints","hullPolygon","renderTriangle","trianglePolygons","trianglePolygon","Voronoi","params","Transform","Definition","type","metadata","modifies","name","required","default","content","defaultExtent","toPathString","join","inherits","transform","pulse","as","data","source","s","size","extent","reflow","modified"],"mappings":"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"}