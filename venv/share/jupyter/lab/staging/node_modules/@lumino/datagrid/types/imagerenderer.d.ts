import { AsyncCellRenderer } from './asynccellrenderer';
import { CellRenderer } from './cellrenderer';
import { GraphicsContext } from './graphicscontext';
/**
 * A cell renderer which renders data values as images.
 */
export declare class ImageRenderer extends AsyncCellRenderer {
    /**
     * Construct a new text renderer.
     *
     * @param options - The options for initializing the renderer.
     */
    constructor(options?: ImageRenderer.IOptions);
    /**
     * The CSS color for drawing the placeholder text.
     */
    readonly textColor: CellRenderer.ConfigOption<string>;
    /**
     * The CSS color for the cell background.
     */
    readonly backgroundColor: CellRenderer.ConfigOption<string>;
    /**
     * The placeholder text.
     */
    readonly placeholder: CellRenderer.ConfigOption<string>;
    /**
     * The width of the image.
     */
    readonly width: CellRenderer.ConfigOption<string>;
    /**
     * The height of the image.
     */
    readonly height: CellRenderer.ConfigOption<string>;
    /**
     * Whether the renderer is ready or not for that specific config.
     * If it's not ready, the datagrid will paint the placeholder.
     * If it's ready, the datagrid will paint the image synchronously.
     *
     * @param config - The configuration data for the cell.
     *
     * @returns Whether the renderer is ready for this config or not.
     */
    isReady(config: CellRenderer.CellConfig): boolean;
    /**
     * Load the image asynchronously for a specific config.
     *
     * @param config - The configuration data for the cell.
     */
    load(config: CellRenderer.CellConfig): Promise<void>;
    /**
     * Paint the placeholder for a cell, waiting for the renderer to be ready.
     *
     * @param gc - The graphics context to use for drawing.
     *
     * @param config - The configuration data for the cell.
     */
    paintPlaceholder(gc: GraphicsContext, config: CellRenderer.CellConfig): void;
    /**
     * Paint the content for a cell.
     *
     * @param gc - The graphics context to use for drawing.
     *
     * @param config - The configuration data for the cell.
     */
    paint(gc: GraphicsContext, config: CellRenderer.CellConfig): void;
    /**
     * Draw the background for the cell.
     *
     * @param gc - The graphics context to use for drawing.
     *
     * @param config - The configuration data for the cell.
     */
    drawBackground(gc: GraphicsContext, config: CellRenderer.CellConfig): void;
    /**
     * Draw the placeholder for the cell.
     *
     * @param gc - The graphics context to use for drawing.
     *
     * @param config - The configuration data for the cell.
     */
    drawPlaceholder(gc: GraphicsContext, config: CellRenderer.CellConfig): void;
    /**
     * Draw the image for the cell.
     *
     * @param gc - The graphics context to use for drawing.
     *
     * @param config - The configuration data for the cell.
     */
    drawImage(gc: GraphicsContext, config: CellRenderer.CellConfig): void;
    private static dataCache;
}
/**
 * The namespace for the `ImageRenderer` class statics.
 */
export declare namespace ImageRenderer {
    /**
     * An options object for initializing an image renderer.
     */
    interface IOptions {
        /**
         * The background color for the cells.
         *
         * The default is `''`.
         */
        backgroundColor?: CellRenderer.ConfigOption<string>;
        /**
         * The placeholder text while the cell is loading.
         *
         * The default is `'...'`.
         */
        placeholder?: CellRenderer.ConfigOption<string>;
        /**
         * The color for the drawing the placeholder text.
         *
         * The default is `'#000000'`.
         */
        textColor?: CellRenderer.ConfigOption<string>;
        /**
         * The width of the image. Can be a percentage of the available space (e.g. '50%'), a
         * number of pixels (e.g. '123px') or an empty string.
         * If it's an empty string, it will respect the image size ratio depending on the height value
         * Examples:
         * - if height='100%' and width='', it will take the available height in the cell and compute the width so
         * that the image is not malformed.
         * - if height='' and width='50%', it will take half of the available width in the cell and compute the height so
         * that the image is not malformed.
         * - if height='' and width='', the image will keep its original size.
         *
         * The default is `''`.
         */
        width?: CellRenderer.ConfigOption<string>;
        /**
         * The height of the image. Can be a percentage of the available space (e.g. '50%'), a
         * number of pixels (e.g. '123px') or an empty string.
         * If it's an empty string, it will respect the image size ratio depending on the width value
         * Examples:
         * - if height='100%' and width='', it will take the available height in the cell and compute the width so
         * that the image is not malformed.
         * - if height='' and width='50%', it will take half of the available width in the cell and compute the height so
         * that the image is not malformed.
         * - if height='' and width='', the image will keep its original size.
         *
         * The default is `'100%'`.
         */
        height?: CellRenderer.ConfigOption<string>;
    }
}
