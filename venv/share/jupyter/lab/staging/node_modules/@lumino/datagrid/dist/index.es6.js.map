{"version":3,"file":"index.es6.js","sources":["../src/basickeyhandler.ts","../src/cellrenderer.ts","../src/textrenderer.ts","../src/hyperlinkrenderer.ts","../src/cellgroup.ts","../src/basicmousehandler.ts","../src/selectionmodel.ts","../src/basicselectionmodel.ts","../src/asynccellrenderer.ts","../src/celleditor.ts","../src/celleditorcontroller.ts","../src/datamodel.ts","../src/graphicscontext.ts","../src/renderermap.ts","../src/sectionlist.ts","../src/datagrid.ts","../src/jsonmodel.ts","../src/imagerenderer.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { Platform } from '@lumino/domutils';\n\nimport { getKeyboardLayout } from '@lumino/keyboard';\n\nimport { DataGrid } from './datagrid';\n\nimport { SelectionModel } from './selectionmodel';\n\nimport { CellEditor } from './celleditor';\n\nimport { MutableDataModel } from './datamodel';\n\n/**\n * A basic implementation of a data grid key handler.\n *\n * #### Notes\n * This class may be subclassed and customized as needed.\n */\nexport class BasicKeyHandler implements DataGrid.IKeyHandler {\n  /**\n   * Whether the key handler is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._disposed;\n  }\n\n  /**\n   * Dispose of the resources held by the key handler.\n   */\n  dispose(): void {\n    this._disposed = true;\n  }\n\n  /**\n   * Handle the key down event for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The keydown event of interest.\n   *\n   * #### Notes\n   * This will not be called if the mouse button is pressed.\n   */\n  onKeyDown(grid: DataGrid, event: KeyboardEvent): void {\n    // if grid is editable and cell selection available, start cell editing\n    // on key press (letters, numbers and space only)\n    if (\n      grid.editable &&\n      grid.selectionModel!.cursorRow !== -1 &&\n      grid.selectionModel!.cursorColumn !== -1\n    ) {\n      const input = String.fromCharCode(event.keyCode);\n      if (/[a-zA-Z0-9-_ ]/.test(input)) {\n        const row = grid.selectionModel!.cursorRow;\n        const column = grid.selectionModel!.cursorColumn;\n        const cell: CellEditor.CellConfig = {\n          grid: grid,\n          row: row,\n          column: column\n        };\n        grid.editorController!.edit(cell);\n        if (getKeyboardLayout().keyForKeydownEvent(event) === 'Space') {\n          event.stopPropagation();\n          event.preventDefault();\n        }\n        return;\n      }\n    }\n\n    switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n      case 'ArrowLeft':\n        this.onArrowLeft(grid, event);\n        break;\n      case 'ArrowRight':\n        this.onArrowRight(grid, event);\n        break;\n      case 'ArrowUp':\n        this.onArrowUp(grid, event);\n        break;\n      case 'ArrowDown':\n        this.onArrowDown(grid, event);\n        break;\n      case 'PageUp':\n        this.onPageUp(grid, event);\n        break;\n      case 'PageDown':\n        this.onPageDown(grid, event);\n        break;\n      case 'Escape':\n        this.onEscape(grid, event);\n        break;\n      case 'Delete':\n        this.onDelete(grid, event);\n        break;\n      case 'C':\n        this.onKeyC(grid, event);\n        break;\n      case 'Enter':\n        if (grid.selectionModel) {\n          grid.moveCursor(event.shiftKey ? 'up' : 'down');\n          grid.scrollToCursor();\n        }\n        break;\n      case 'Tab':\n        if (grid.selectionModel) {\n          grid.moveCursor(event.shiftKey ? 'left' : 'right');\n          grid.scrollToCursor();\n          event.stopPropagation();\n          event.preventDefault();\n        }\n        break;\n    }\n  }\n\n  /**\n   * Handle the `'ArrowLeft'` key press for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The keyboard event of interest.\n   */\n  protected onArrowLeft(grid: DataGrid, event: KeyboardEvent): void {\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Fetch the selection model.\n    let model = grid.selectionModel;\n\n    // Fetch the modifier flags.\n    let shift = event.shiftKey;\n    let accel = Platform.accelKey(event);\n\n    // Handle no model with the accel modifier.\n    if (!model && accel) {\n      grid.scrollTo(0, grid.scrollY);\n      return;\n    }\n\n    // Handle no model and no modifier. (ignore shift)\n    if (!model) {\n      grid.scrollByStep('left');\n      return;\n    }\n\n    // Fetch the selection mode.\n    let mode = model.selectionMode;\n\n    // Handle the row selection mode with accel key.\n    if (mode === 'row' && accel) {\n      grid.scrollTo(0, grid.scrollY);\n      return;\n    }\n\n    // Handle the row selection mode with no modifier. (ignore shift)\n    if (mode === 'row') {\n      grid.scrollByStep('left');\n      return;\n    }\n\n    // Fetch the cursor and selection.\n    let r = model.cursorRow;\n    let c = model.cursorColumn;\n    let cs = model.currentSelection();\n\n    // Set up the selection variables.\n    let r1: number;\n    let r2: number;\n    let c1: number;\n    let c2: number;\n    let cr: number;\n    let cc: number;\n    let clear: SelectionModel.ClearMode;\n\n    // Dispatch based on the modifier keys.\n    if (accel && shift) {\n      r1 = cs ? cs.r1 : 0;\n      r2 = cs ? cs.r2 : 0;\n      c1 = cs ? cs.c1 : 0;\n      c2 = 0;\n      cr = r;\n      cc = c;\n      clear = 'current';\n    } else if (shift) {\n      r1 = cs ? cs.r1 : 0;\n      r2 = cs ? cs.r2 : 0;\n      c1 = cs ? cs.c1 : 0;\n      c2 = cs ? cs.c2 - 1 : 0;\n      cr = r;\n      cc = c;\n      clear = 'current';\n    } else if (accel) {\n      r1 = r;\n      r2 = r;\n      c1 = 0;\n      c2 = 0;\n      cr = r1;\n      cc = c1;\n      clear = 'all';\n    } else {\n      r1 = r;\n      r2 = r;\n      c1 = c - 1;\n      c2 = c - 1;\n      cr = r1;\n      cc = c1;\n      clear = 'all';\n    }\n\n    // Create the new selection.\n    model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n\n    // Re-fetch the current selection.\n    cs = model.currentSelection();\n\n    // Bail if there is no selection.\n    if (!cs) {\n      return;\n    }\n\n    // Scroll the grid appropriately.\n    if (shift || mode === 'column') {\n      grid.scrollToColumn(cs.c2);\n    } else {\n      grid.scrollToCursor();\n    }\n  }\n\n  /**\n   * Handle the `'ArrowRight'` key press for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The keyboard event of interest.\n   */\n  protected onArrowRight(grid: DataGrid, event: KeyboardEvent): void {\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Fetch the selection model.\n    let model = grid.selectionModel;\n\n    // Fetch the modifier flags.\n    let shift = event.shiftKey;\n    let accel = Platform.accelKey(event);\n\n    // Handle no model with the accel modifier.\n    if (!model && accel) {\n      grid.scrollTo(grid.maxScrollX, grid.scrollY);\n      return;\n    }\n\n    // Handle no model and no modifier. (ignore shift)\n    if (!model) {\n      grid.scrollByStep('right');\n      return;\n    }\n\n    // Fetch the selection mode.\n    let mode = model.selectionMode;\n\n    // Handle the row selection model with accel key.\n    if (mode === 'row' && accel) {\n      grid.scrollTo(grid.maxScrollX, grid.scrollY);\n      return;\n    }\n\n    // Handle the row selection mode with no modifier. (ignore shift)\n    if (mode === 'row') {\n      grid.scrollByStep('right');\n      return;\n    }\n\n    // Fetch the cursor and selection.\n    let r = model.cursorRow;\n    let c = model.cursorColumn;\n    let cs = model.currentSelection();\n\n    // Set up the selection variables.\n    let r1: number;\n    let r2: number;\n    let c1: number;\n    let c2: number;\n    let cr: number;\n    let cc: number;\n    let clear: SelectionModel.ClearMode;\n\n    // Dispatch based on the modifier keys.\n    if (accel && shift) {\n      r1 = cs ? cs.r1 : 0;\n      r2 = cs ? cs.r2 : 0;\n      c1 = cs ? cs.c1 : 0;\n      c2 = Infinity;\n      cr = r;\n      cc = c;\n      clear = 'current';\n    } else if (shift) {\n      r1 = cs ? cs.r1 : 0;\n      r2 = cs ? cs.r2 : 0;\n      c1 = cs ? cs.c1 : 0;\n      c2 = cs ? cs.c2 + 1 : 0;\n      cr = r;\n      cc = c;\n      clear = 'current';\n    } else if (accel) {\n      r1 = r;\n      r2 = r;\n      c1 = Infinity;\n      c2 = Infinity;\n      cr = r1;\n      cc = c1;\n      clear = 'all';\n    } else {\n      r1 = r;\n      r2 = r;\n      c1 = c + 1;\n      c2 = c + 1;\n      cr = r1;\n      cc = c1;\n      clear = 'all';\n    }\n\n    // Create the new selection.\n    model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n\n    // Re-fetch the current selection.\n    cs = model.currentSelection();\n\n    // Bail if there is no selection.\n    if (!cs) {\n      return;\n    }\n\n    // Scroll the grid appropriately.\n    if (shift || mode === 'column') {\n      grid.scrollToColumn(cs.c2);\n    } else {\n      grid.scrollToCursor();\n    }\n  }\n\n  /**\n   * Handle the `'ArrowUp'` key press for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The keyboard event of interest.\n   */\n  protected onArrowUp(grid: DataGrid, event: KeyboardEvent): void {\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Fetch the selection model.\n    let model = grid.selectionModel;\n\n    // Fetch the modifier flags.\n    let shift = event.shiftKey;\n    let accel = Platform.accelKey(event);\n\n    // Handle no model with the accel modifier.\n    if (!model && accel) {\n      grid.scrollTo(grid.scrollX, 0);\n      return;\n    }\n\n    // Handle no model and no modifier. (ignore shift)\n    if (!model) {\n      grid.scrollByStep('up');\n      return;\n    }\n\n    // Fetch the selection mode.\n    let mode = model.selectionMode;\n\n    // Handle the column selection mode with accel key.\n    if (mode === 'column' && accel) {\n      grid.scrollTo(grid.scrollX, 0);\n      return;\n    }\n\n    // Handle the column selection mode with no modifier. (ignore shift)\n    if (mode === 'column') {\n      grid.scrollByStep('up');\n      return;\n    }\n\n    // Fetch the cursor and selection.\n    let r = model.cursorRow;\n    let c = model.cursorColumn;\n    let cs = model.currentSelection();\n\n    // Set up the selection variables.\n    let r1: number;\n    let r2: number;\n    let c1: number;\n    let c2: number;\n    let cr: number;\n    let cc: number;\n    let clear: SelectionModel.ClearMode;\n\n    // Dispatch based on the modifier keys.\n    if (accel && shift) {\n      r1 = cs ? cs.r1 : 0;\n      r2 = 0;\n      c1 = cs ? cs.c1 : 0;\n      c2 = cs ? cs.c2 : 0;\n      cr = r;\n      cc = c;\n      clear = 'current';\n    } else if (shift) {\n      r1 = cs ? cs.r1 : 0;\n      r2 = cs ? cs.r2 - 1 : 0;\n      c1 = cs ? cs.c1 : 0;\n      c2 = cs ? cs.c2 : 0;\n      cr = r;\n      cc = c;\n      clear = 'current';\n    } else if (accel) {\n      r1 = 0;\n      r2 = 0;\n      c1 = c;\n      c2 = c;\n      cr = r1;\n      cc = c1;\n      clear = 'all';\n    } else {\n      r1 = r - 1;\n      r2 = r - 1;\n      c1 = c;\n      c2 = c;\n      cr = r1;\n      cc = c1;\n      clear = 'all';\n    }\n\n    // Create the new selection.\n    model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n\n    // Re-fetch the current selection.\n    cs = model.currentSelection();\n\n    // Bail if there is no selection.\n    if (!cs) {\n      return;\n    }\n\n    // Scroll the grid appropriately.\n    if (shift || mode === 'row') {\n      grid.scrollToRow(cs.r2);\n    } else {\n      grid.scrollToCursor();\n    }\n  }\n\n  /**\n   * Handle the `'ArrowDown'` key press for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The keyboard event of interest.\n   */\n  protected onArrowDown(grid: DataGrid, event: KeyboardEvent): void {\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Fetch the selection model.\n    let model = grid.selectionModel;\n\n    // Fetch the modifier flags.\n    let shift = event.shiftKey;\n    let accel = Platform.accelKey(event);\n\n    // Handle no model with the accel modifier.\n    if (!model && accel) {\n      grid.scrollTo(grid.scrollX, grid.maxScrollY);\n      return;\n    }\n\n    // Handle no model and no modifier. (ignore shift)\n    if (!model) {\n      grid.scrollByStep('down');\n      return;\n    }\n\n    // Fetch the selection mode.\n    let mode = model.selectionMode;\n\n    // Handle the column selection mode with accel key.\n    if (mode === 'column' && accel) {\n      grid.scrollTo(grid.scrollX, grid.maxScrollY);\n      return;\n    }\n\n    // Handle the column selection mode with no modifier. (ignore shift)\n    if (mode === 'column') {\n      grid.scrollByStep('down');\n      return;\n    }\n\n    // Fetch the cursor and selection.\n    let r = model.cursorRow;\n    let c = model.cursorColumn;\n    let cs = model.currentSelection();\n\n    // Set up the selection variables.\n    let r1: number;\n    let r2: number;\n    let c1: number;\n    let c2: number;\n    let cr: number;\n    let cc: number;\n    let clear: SelectionModel.ClearMode;\n\n    // Dispatch based on the modifier keys.\n    if (accel && shift) {\n      r1 = cs ? cs.r1 : 0;\n      r2 = Infinity;\n      c1 = cs ? cs.c1 : 0;\n      c2 = cs ? cs.c2 : 0;\n      cr = r;\n      cc = c;\n      clear = 'current';\n    } else if (shift) {\n      r1 = cs ? cs.r1 : 0;\n      r2 = cs ? cs.r2 + 1 : 0;\n      c1 = cs ? cs.c1 : 0;\n      c2 = cs ? cs.c2 : 0;\n      cr = r;\n      cc = c;\n      clear = 'current';\n    } else if (accel) {\n      r1 = Infinity;\n      r2 = Infinity;\n      c1 = c;\n      c2 = c;\n      cr = r1;\n      cc = c1;\n      clear = 'all';\n    } else {\n      r1 = r + 1;\n      r2 = r + 1;\n      c1 = c;\n      c2 = c;\n      cr = r1;\n      cc = c1;\n      clear = 'all';\n    }\n\n    // Create the new selection.\n    model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n\n    // Re-fetch the current selection.\n    cs = model.currentSelection();\n\n    // Bail if there is no selection.\n    if (!cs) {\n      return;\n    }\n\n    // Scroll the grid appropriately.\n    if (shift || mode === 'row') {\n      grid.scrollToRow(cs.r2);\n    } else {\n      grid.scrollToCursor();\n    }\n  }\n\n  /**\n   * Handle the `'PageUp'` key press for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The keyboard event of interest.\n   */\n  protected onPageUp(grid: DataGrid, event: KeyboardEvent): void {\n    // Ignore the event if the accel key is pressed.\n    if (Platform.accelKey(event)) {\n      return;\n    }\n\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Fetch the selection model.\n    let model = grid.selectionModel;\n\n    // Scroll by page if there is no selection model.\n    if (!model || model.selectionMode === 'column') {\n      grid.scrollByPage('up');\n      return;\n    }\n\n    // Get the normal number of cells in the page height.\n    let n = Math.floor(grid.pageHeight / grid.defaultSizes.rowHeight);\n\n    // Fetch the cursor and selection.\n    let r = model.cursorRow;\n    let c = model.cursorColumn;\n    let cs = model.currentSelection();\n\n    // Set up the selection variables.\n    let r1: number;\n    let r2: number;\n    let c1: number;\n    let c2: number;\n    let cr: number;\n    let cc: number;\n    let clear: SelectionModel.ClearMode;\n\n    // Select or resize as needed.\n    if (event.shiftKey) {\n      r1 = cs ? cs.r1 : 0;\n      r2 = cs ? cs.r2 - n : 0;\n      c1 = cs ? cs.c1 : 0;\n      c2 = cs ? cs.c2 : 0;\n      cr = r;\n      cc = c;\n      clear = 'current';\n    } else {\n      r1 = cs ? cs.r1 - n : 0;\n      r2 = r1;\n      c1 = c;\n      c2 = c;\n      cr = r1;\n      cc = c;\n      clear = 'all';\n    }\n\n    // Create the new selection.\n    model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n\n    // Re-fetch the current selection.\n    cs = model.currentSelection();\n\n    // Bail if there is no selection.\n    if (!cs) {\n      return;\n    }\n\n    // Scroll the grid appropriately.\n    grid.scrollToRow(cs.r2);\n  }\n\n  /**\n   * Handle the `'PageDown'` key press for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The keyboard event of interest.\n   */\n  protected onPageDown(grid: DataGrid, event: KeyboardEvent): void {\n    // Ignore the event if the accel key is pressed.\n    if (Platform.accelKey(event)) {\n      return;\n    }\n\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Fetch the selection model.\n    let model = grid.selectionModel;\n\n    // Scroll by page if there is no selection model.\n    if (!model || model.selectionMode === 'column') {\n      grid.scrollByPage('down');\n      return;\n    }\n\n    // Get the normal number of cells in the page height.\n    let n = Math.floor(grid.pageHeight / grid.defaultSizes.rowHeight);\n\n    // Fetch the cursor and selection.\n    let r = model.cursorRow;\n    let c = model.cursorColumn;\n    let cs = model.currentSelection();\n\n    // Set up the selection variables.\n    let r1: number;\n    let r2: number;\n    let c1: number;\n    let c2: number;\n    let cr: number;\n    let cc: number;\n    let clear: SelectionModel.ClearMode;\n\n    // Select or resize as needed.\n    if (event.shiftKey) {\n      r1 = cs ? cs.r1 : 0;\n      r2 = cs ? cs.r2 + n : 0;\n      c1 = cs ? cs.c1 : 0;\n      c2 = cs ? cs.c2 : 0;\n      cr = r;\n      cc = c;\n      clear = 'current';\n    } else {\n      r1 = cs ? cs.r1 + n : 0;\n      r2 = r1;\n      c1 = c;\n      c2 = c;\n      cr = r1;\n      cc = c;\n      clear = 'all';\n    }\n\n    // Create the new selection.\n    model.select({ r1, c1, r2, c2, cursorRow: cr, cursorColumn: cc, clear });\n\n    // Re-fetch the current selection.\n    cs = model.currentSelection();\n\n    // Bail if there is no selection.\n    if (!cs) {\n      return;\n    }\n\n    // Scroll the grid appropriately.\n    grid.scrollToRow(cs.r2);\n  }\n\n  /**\n   * Handle the `'Escape'` key press for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The keyboard event of interest.\n   */\n  protected onEscape(grid: DataGrid, event: KeyboardEvent): void {\n    if (grid.selectionModel) {\n      grid.selectionModel.clear();\n    }\n  }\n\n  /**\n   * Handle the `'Delete'` key press for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The keyboard event of interest.\n   */\n  protected onDelete(grid: DataGrid, event: KeyboardEvent): void {\n    if (grid.editable && !grid.selectionModel!.isEmpty) {\n      const dataModel = grid.dataModel as MutableDataModel;\n      // Fetch the max row and column.\n      let maxRow = dataModel.rowCount('body') - 1;\n      let maxColumn = dataModel.columnCount('body') - 1;\n\n      for (let s of grid.selectionModel!.selections()) {\n        // Clamp the cell to the model bounds.\n        let sr1 = Math.max(0, Math.min(s.r1, maxRow));\n        let sc1 = Math.max(0, Math.min(s.c1, maxColumn));\n        let sr2 = Math.max(0, Math.min(s.r2, maxRow));\n        let sc2 = Math.max(0, Math.min(s.c2, maxColumn));\n\n        for (let r = sr1; r <= sr2; ++r) {\n          for (let c = sc1; c <= sc2; ++c) {\n            dataModel.setData('body', r, c, null);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle the `'C'` key press for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The keyboard event of interest.\n   */\n  protected onKeyC(grid: DataGrid, event: KeyboardEvent): void {\n    // Bail early if the modifiers aren't correct for copy.\n    if (event.shiftKey || !Platform.accelKey(event)) {\n      return;\n    }\n\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Copy the current selection to the clipboard.\n    grid.copyToClipboard();\n  }\n\n  private _disposed = false;\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { DataModel } from './datamodel';\n\nimport { GraphicsContext } from './graphicscontext';\n\n/**\n * An object which renders the cells of a data grid.\n *\n * #### Notes\n * If the predefined cell renderers are insufficient for a particular\n * use case, a custom cell renderer can be defined which derives from\n * this class.\n *\n * The data grid renders cells in column-major order, by region. The\n * region order is: body, row header, column header, corner header.\n */\nexport abstract class CellRenderer {\n  /**\n   * Paint the content for a cell.\n   *\n   * @param gc - The graphics context to use for drawing.\n   *\n   * @param config - The configuration data for the cell.\n   *\n   * #### Notes\n   * The grid will save/restore the `gc` state before/after invoking\n   * the renderer.\n   *\n   * For performance, the cell content is efficiently clipped to the\n   * width of the column, but *the height is not clipped*. If height\n   * clipping is needed, the renderer must set up its own clip rect.\n   *\n   * The renderer **must not** draw outside the cell bounding height.\n   */\n  abstract paint(gc: GraphicsContext, config: CellRenderer.CellConfig): void;\n}\n\n/**\n * The namespace for the `CellRenderer` class statics.\n */\nexport namespace CellRenderer {\n  /**\n   * An object which holds the configuration data for a cell.\n   */\n  export type CellConfig = {\n    /**\n     * The X position of the cell rectangle, in viewport coordinates.\n     */\n    readonly x: number;\n\n    /**\n     * The Y position of the cell rectangle, in viewport coordinates.\n     */\n    readonly y: number;\n\n    /**\n     * The height of the cell rectangle, in viewport pixels.\n     */\n    readonly height: number;\n\n    /**\n     * The width of the cell rectangle, in viewport pixels.\n     */\n    readonly width: number;\n\n    /**\n     * The region for the cell.\n     */\n    readonly region: DataModel.CellRegion;\n\n    /**\n     * The row index of the cell.\n     */\n    readonly row: number;\n\n    /**\n     * The column index of the cell.\n     */\n    readonly column: number;\n\n    /**\n     * The value for the cell.\n     */\n    readonly value: any;\n\n    /**\n     * The metadata for the cell.\n     */\n    readonly metadata: DataModel.Metadata;\n  };\n\n  /**\n   * A type alias for a cell renderer config function.\n   *\n   * This type is used to compute a value from a cell config object.\n   */\n  export type ConfigFunc<T> = (config: CellConfig) => T;\n\n  /**\n   * A type alias for a cell renderer config option.\n   *\n   * A config option can be a static value or a config function.\n   */\n  export type ConfigOption<T> = T | ConfigFunc<T>;\n\n  /**\n   * Resolve a config option for a cell renderer.\n   *\n   * @param option - The config option to resolve.\n   *\n   * @param config - The cell config object.\n   *\n   * @returns The resolved value for the option.\n   */\n  export function resolveOption<T>(\n    option: ConfigOption<T>,\n    config: CellConfig\n  ): T {\n    return typeof option === 'function'\n      ? (option as ConfigFunc<T>)(config)\n      : option;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { CellRenderer } from './cellrenderer';\n\nimport { GraphicsContext } from './graphicscontext';\n\n/**\n * A cell renderer which renders data values as text.\n */\nexport class TextRenderer extends CellRenderer {\n  /**\n   * Construct a new text renderer.\n   *\n   * @param options - The options for initializing the renderer.\n   */\n  constructor(options: TextRenderer.IOptions = {}) {\n    super();\n    this.font = options.font || '12px sans-serif';\n    this.textColor = options.textColor || '#000000';\n    this.backgroundColor = options.backgroundColor || '';\n    this.verticalAlignment = options.verticalAlignment || 'center';\n    this.horizontalAlignment = options.horizontalAlignment || 'left';\n    this.horizontalPadding = options.horizontalPadding || 8;\n    this.format = options.format || TextRenderer.formatGeneric();\n    this.elideDirection = options.elideDirection || 'none';\n    this.wrapText = options.wrapText || false;\n  }\n\n  /**\n   * The CSS shorthand font for drawing the text.\n   */\n  readonly font: CellRenderer.ConfigOption<string>;\n\n  /**\n   * The CSS color for drawing the text.\n   */\n  readonly textColor: CellRenderer.ConfigOption<string>;\n\n  /**\n   * The CSS color for the cell background.\n   */\n  readonly backgroundColor: CellRenderer.ConfigOption<string>;\n\n  /**\n   * The vertical alignment for the cell text.\n   */\n  readonly verticalAlignment: CellRenderer.ConfigOption<TextRenderer.VerticalAlignment>;\n\n  /**\n   * The horizontal alignment for the cell text.\n   */\n  readonly horizontalAlignment: CellRenderer.ConfigOption<TextRenderer.HorizontalAlignment>;\n\n  /**\n   * The horizontal alignment for the cell text.\n   */\n  readonly horizontalPadding: number;\n\n  /**\n   * The format function for the cell value.\n   */\n  readonly format: TextRenderer.FormatFunc;\n\n  /**\n   * Which side to draw the ellipsis. Set to 'none' to disable ellipsis.\n   */\n  readonly elideDirection: CellRenderer.ConfigOption<TextRenderer.ElideDirection>;\n\n  /**\n   * Boolean flag for applying text wrapping.\n   */\n  readonly wrapText: CellRenderer.ConfigOption<boolean>;\n\n  /**\n   * Paint the content for a cell.\n   *\n   * @param gc - The graphics context to use for drawing.\n   *\n   * @param config - The configuration data for the cell.\n   */\n  paint(gc: GraphicsContext, config: CellRenderer.CellConfig): void {\n    this.drawBackground(gc, config);\n    this.drawText(gc, config);\n  }\n\n  /**\n   * Draw the background for the cell.\n   *\n   * @param gc - The graphics context to use for drawing.\n   *\n   * @param config - The configuration data for the cell.\n   */\n  drawBackground(gc: GraphicsContext, config: CellRenderer.CellConfig): void {\n    // Resolve the background color for the cell.\n    let color = CellRenderer.resolveOption(this.backgroundColor, config);\n\n    // Bail if there is no background color to draw.\n    if (!color) {\n      return;\n    }\n\n    // Fill the cell with the background color.\n    gc.fillStyle = color;\n    gc.fillRect(config.x, config.y, config.width, config.height);\n  }\n\n  /**\n   * Get the full text to be rendered by the cell.\n   */\n  getText(config: CellRenderer.CellConfig): string {\n    return this.format(config);\n  }\n\n  /**\n   * Draw the text for the cell.\n   *\n   * @param gc - The graphics context to use for drawing.\n   *\n   * @param config - The configuration data for the cell.\n   */\n  drawText(gc: GraphicsContext, config: CellRenderer.CellConfig): void {\n    // Resolve the font for the cell.\n    let font = CellRenderer.resolveOption(this.font, config);\n\n    // Bail if there is no font to draw.\n    if (!font) {\n      return;\n    }\n\n    // Resolve the text color for the cell.\n    let color = CellRenderer.resolveOption(this.textColor, config);\n\n    // Bail if there is no text color to draw.\n    if (!color) {\n      return;\n    }\n\n    // Format the cell value to text.\n    let text = this.getText(config);\n\n    // Bail if there is no text to draw.\n    if (!text) {\n      return;\n    }\n\n    // Resolve the vertical and horizontal alignment.\n    let vAlign = CellRenderer.resolveOption(this.verticalAlignment, config);\n    let hAlign = CellRenderer.resolveOption(this.horizontalAlignment, config);\n\n    // Resolve the elision direction\n    let elideDirection = CellRenderer.resolveOption(\n      this.elideDirection,\n      config\n    );\n\n    // Resolve the text wrapping flag\n    let wrapText = CellRenderer.resolveOption(this.wrapText, config);\n\n    // Compute the padded text box height for the specified alignment.\n    let boxHeight = config.height - (vAlign === 'center' ? 1 : 2);\n\n    // Bail if the text box has no effective size.\n    if (boxHeight <= 0) {\n      return;\n    }\n\n    // Compute the text height for the gc font.\n    let textHeight = TextRenderer.measureFontHeight(font);\n\n    // Set up the text position variables.\n    let textX: number;\n    let textY: number;\n    let boxWidth: number;\n\n    // Compute the Y position for the text.\n    switch (vAlign) {\n      case 'top':\n        textY = config.y + 2 + textHeight;\n        break;\n      case 'center':\n        textY = config.y + config.height / 2 + textHeight / 2;\n        break;\n      case 'bottom':\n        textY = config.y + config.height - 2;\n        break;\n      default:\n        throw 'unreachable';\n    }\n\n    // Compute the X position for the text.\n    switch (hAlign) {\n      case 'left':\n        textX = config.x + this.horizontalPadding;\n        boxWidth = config.width - 14;\n        break;\n      case 'center':\n        textX = config.x + config.width / 2;\n        boxWidth = config.width;\n        break;\n      case 'right':\n        textX = config.x + config.width - this.horizontalPadding;\n        boxWidth = config.width - 14;\n        break;\n      default:\n        throw 'unreachable';\n    }\n\n    // Clip the cell if the text is taller than the text box height.\n    if (textHeight > boxHeight) {\n      gc.beginPath();\n      gc.rect(config.x, config.y, config.width, config.height - 1);\n      gc.clip();\n    }\n\n    // Set the gc state.\n    gc.font = font;\n    gc.fillStyle = color;\n    gc.textAlign = hAlign;\n    gc.textBaseline = 'bottom';\n\n    // Terminate call here if we're not eliding or wrapping text\n    if (elideDirection === 'none' && !wrapText) {\n      gc.fillText(text, textX, textY);\n      return;\n    }\n\n    // The current text width in pixels.\n    let textWidth = gc.measureText(text).width;\n\n    // Apply text wrapping if enabled.\n    if (wrapText && textWidth > boxWidth) {\n      // Make sure box clipping happens.\n      gc.beginPath();\n      gc.rect(config.x, config.y, config.width, config.height - 1);\n      gc.clip();\n\n      // Split column name to words based on\n      // whitespace preceding a word boundary.\n      // \"Hello  world\" --> [\"Hello  \", \"world\"]\n      const wordsInColumn = text.split(/\\s(?=\\b)/);\n\n      // Y-coordinate offset for any additional lines\n      let curY = textY;\n      let textInCurrentLine = wordsInColumn.shift()!;\n\n      // Single word. Applying text wrap on word by splitting\n      // it into characters and fitting the maximum number of\n      // characters possible per line (box width).\n      if (wordsInColumn.length === 0) {\n        let curLineTextWidth = gc.measureText(textInCurrentLine).width;\n        while (curLineTextWidth > boxWidth && textInCurrentLine !== '') {\n          // Iterating from the end of the string until we find a\n          // substring (0,i) which has a width less than the box width.\n          for (let i = textInCurrentLine.length; i > 0; i--) {\n            const curSubString = textInCurrentLine.substring(0, i);\n            const curSubStringWidth = gc.measureText(curSubString).width;\n            if (curSubStringWidth < boxWidth || curSubString.length === 1) {\n              // Found a substring which has a width less than the current\n              // box width. Rendering that substring on the current line\n              // and setting the remainder of the parent string as the next\n              // string to iterate on for the next line.\n              const nextLineText = textInCurrentLine.substring(\n                i,\n                textInCurrentLine.length\n              );\n              textInCurrentLine = nextLineText;\n              curLineTextWidth = gc.measureText(textInCurrentLine).width;\n              gc.fillText(curSubString, textX, curY);\n              curY += textHeight;\n              // No need to continue iterating after we identified\n              // an index to break the string on.\n              break;\n            }\n          }\n        }\n      }\n\n      // Multiple words in column header. Fitting maximum\n      // number of words possible per line (box width).\n      else {\n        while (wordsInColumn.length !== 0) {\n          // Processing the next word in the queue.\n          const curWord = wordsInColumn.shift();\n          // Joining that word with the existing text for\n          // the current line.\n          const incrementedText = [textInCurrentLine, curWord].join(' ');\n          const incrementedTextWidth = gc.measureText(incrementedText).width;\n          if (incrementedTextWidth > boxWidth) {\n            // If the newly combined text has a width larger than\n            // the box width, we render the line before the current\n            // word was added. We set the current word as the next\n            // line.\n            gc.fillText(textInCurrentLine, textX, curY);\n            curY += textHeight;\n            textInCurrentLine = curWord!;\n          } else {\n            // The combined text hasd a width less than the box width. We\n            // set the the current line text to be the new combined text.\n            textInCurrentLine = incrementedText;\n          }\n        }\n      }\n      gc.fillText(textInCurrentLine!, textX, curY);\n      // Terminating the call here as we don't want\n      // to apply text eliding when wrapping is active.\n      return;\n    }\n\n    // Elide text that is too long\n    const elide = '\\u2026';\n\n    // Loop until text width fits box or only one character remains\n    while (textWidth > boxWidth && text.length > 1) {\n      // Convert text string to array for dealing with astral symbols\n      const textArr = [...text];\n\n      if (elideDirection === 'right') {\n        // If text width is substantially bigger, take half the string\n        if (textArr.length > 4 && textWidth >= 2 * boxWidth) {\n          text =\n            textArr.slice(0, Math.floor(textArr.length / 2 + 1)).join('') +\n            elide;\n        } else {\n          // Otherwise incrementally remove the last character\n          text = textArr.slice(0, textArr.length - 2).join('') + elide;\n        }\n      } else {\n        // If text width is substantially bigger, take half the string\n        if (textArr.length > 4 && textWidth >= 2 * boxWidth) {\n          text = elide + textArr.slice(Math.floor(textArr.length / 2)).join('');\n        } else {\n          // Otherwise incrementally remove the last character\n          text = elide + textArr.slice(2).join('');\n        }\n      }\n\n      // Measure new text width\n      textWidth = gc.measureText(text).width;\n    }\n\n    // Draw the text for the cell.\n    gc.fillText(text, textX, textY);\n  }\n}\n\n/**\n * The namespace for the `TextRenderer` class statics.\n */\nexport namespace TextRenderer {\n  /**\n   * A type alias for the supported vertical alignment modes.\n   */\n  export type VerticalAlignment = 'top' | 'center' | 'bottom';\n\n  /**\n   * A type alias for the supported horizontal alignment modes.\n   */\n  export type HorizontalAlignment = 'left' | 'center' | 'right';\n\n  /**\n   * A type alias for the supported ellipsis sides.\n   */\n  export type ElideDirection = 'left' | 'right' | 'none';\n\n  /**\n   * An options object for initializing a text renderer.\n   */\n  export interface IOptions {\n    /**\n     * The font for drawing the cell text.\n     *\n     * The default is `'12px sans-serif'`.\n     */\n    font?: CellRenderer.ConfigOption<string>;\n\n    /**\n     * The color for the drawing the cell text.\n     *\n     * The default `'#000000'`.\n     */\n    textColor?: CellRenderer.ConfigOption<string>;\n\n    /**\n     * The background color for the cells.\n     *\n     * The default is `''`.\n     */\n    backgroundColor?: CellRenderer.ConfigOption<string>;\n\n    /**\n     * The vertical alignment for the cell text.\n     *\n     * The default is `'center'`.\n     */\n    verticalAlignment?: CellRenderer.ConfigOption<VerticalAlignment>;\n\n    /**\n     * The horizontal alignment for the cell text.\n     *\n     * The default is `'left'`.\n     */\n    horizontalAlignment?: CellRenderer.ConfigOption<HorizontalAlignment>;\n\n    /**\n     * The horizontal padding for the cell text in pixels.\n     *\n     * The default is `8`.\n     */\n    horizontalPadding?: number;\n\n    /**\n     * The format function for the renderer.\n     *\n     * The default is `TextRenderer.formatGeneric()`.\n     */\n    format?: FormatFunc;\n\n    /**\n     * The ellipsis direction for the cell text.\n     *\n     * The default is `'none'`.\n     */\n    elideDirection?: CellRenderer.ConfigOption<ElideDirection>;\n\n    /**\n     * Whether or not to apply text wrapping.\n     *\n     * The default is `'false'`.\n     */\n    wrapText?: CellRenderer.ConfigOption<boolean>;\n  }\n\n  /**\n   * A type alias for a format function.\n   */\n  export type FormatFunc = CellRenderer.ConfigFunc<string>;\n\n  /**\n   * Create a generic text format function.\n   *\n   * @param options - The options for creating the format function.\n   *\n   * @returns A new generic text format function.\n   *\n   * #### Notes\n   * This formatter uses the builtin `String()` to coerce any value\n   * to a string.\n   */\n  export function formatGeneric(\n    options: formatGeneric.IOptions = {}\n  ): FormatFunc {\n    let missing = options.missing || '';\n    return ({ value }) => {\n      if (value === null || value === undefined) {\n        return missing;\n      }\n      return String(value);\n    };\n  }\n\n  /**\n   * The namespace for the `formatGeneric` function statics.\n   */\n  export namespace formatGeneric {\n    /**\n     * The options for creating a generic format function.\n     */\n    export interface IOptions {\n      /**\n       * The text to use for a `null` or `undefined` data value.\n       *\n       * The default is `''`.\n       */\n      missing?: string;\n    }\n  }\n\n  /**\n   * Create a fixed decimal format function.\n   *\n   * @param options - The options for creating the format function.\n   *\n   * @returns A new fixed decimal format function.\n   *\n   * #### Notes\n   * This formatter uses the builtin `Number()` and `toFixed()` to\n   * coerce values.\n   *\n   * The `formatIntlNumber()` formatter is more flexible, but slower.\n   */\n  export function formatFixed(options: formatFixed.IOptions = {}): FormatFunc {\n    let digits = options.digits;\n    let missing = options.missing || '';\n    return ({ value }) => {\n      if (value === null || value === undefined) {\n        return missing;\n      }\n      return Number(value).toFixed(digits);\n    };\n  }\n\n  /**\n   * The namespace for the `formatFixed` function statics.\n   */\n  export namespace formatFixed {\n    /**\n     * The options for creating a fixed format function.\n     */\n    export interface IOptions {\n      /**\n       * The number of digits to include after the decimal point.\n       *\n       * The default is determined by the user agent.\n       */\n      digits?: number;\n\n      /**\n       * The text to use for a `null` or `undefined` data value.\n       *\n       * The default is `''`.\n       */\n      missing?: string;\n    }\n  }\n\n  /**\n   * Create a significant figure format function.\n   *\n   * @param options - The options for creating the format function.\n   *\n   * @returns A new significant figure format function.\n   *\n   * #### Notes\n   * This formatter uses the builtin `Number()` and `toPrecision()`\n   * to coerce values.\n   *\n   * The `formatIntlNumber()` formatter is more flexible, but slower.\n   */\n  export function formatPrecision(\n    options: formatPrecision.IOptions = {}\n  ): FormatFunc {\n    let digits = options.digits;\n    let missing = options.missing || '';\n    return ({ value }) => {\n      if (value === null || value === undefined) {\n        return missing;\n      }\n      return Number(value).toPrecision(digits);\n    };\n  }\n\n  /**\n   * The namespace for the `formatPrecision` function statics.\n   */\n  export namespace formatPrecision {\n    /**\n     * The options for creating a precision format function.\n     */\n    export interface IOptions {\n      /**\n       * The number of significant figures to include in the value.\n       *\n       * The default is determined by the user agent.\n       */\n      digits?: number;\n\n      /**\n       * The text to use for a `null` or `undefined` data value.\n       *\n       * The default is `''`.\n       */\n      missing?: string;\n    }\n  }\n\n  /**\n   * Create a scientific notation format function.\n   *\n   * @param options - The options for creating the format function.\n   *\n   * @returns A new scientific notation format function.\n   *\n   * #### Notes\n   * This formatter uses the builtin `Number()` and `toExponential()`\n   * to coerce values.\n   *\n   * The `formatIntlNumber()` formatter is more flexible, but slower.\n   */\n  export function formatExponential(\n    options: formatExponential.IOptions = {}\n  ): FormatFunc {\n    let digits = options.digits;\n    let missing = options.missing || '';\n    return ({ value }) => {\n      if (value === null || value === undefined) {\n        return missing;\n      }\n      return Number(value).toExponential(digits);\n    };\n  }\n\n  /**\n   * The namespace for the `formatExponential` function statics.\n   */\n  export namespace formatExponential {\n    /**\n     * The options for creating an exponential format function.\n     */\n    export interface IOptions {\n      /**\n       * The number of digits to include after the decimal point.\n       *\n       * The default is determined by the user agent.\n       */\n      digits?: number;\n\n      /**\n       * The text to use for a `null` or `undefined` data value.\n       *\n       * The default is `''`.\n       */\n      missing?: string;\n    }\n  }\n\n  /**\n   * Create an international number format function.\n   *\n   * @param options - The options for creating the format function.\n   *\n   * @returns A new international number format function.\n   *\n   * #### Notes\n   * This formatter uses the builtin `Intl.NumberFormat` object to\n   * coerce values.\n   *\n   * This is the most flexible (but slowest) number formatter.\n   */\n  export function formatIntlNumber(\n    options: formatIntlNumber.IOptions = {}\n  ): FormatFunc {\n    let missing = options.missing || '';\n    let nft = new Intl.NumberFormat(options.locales, options.options);\n    return ({ value }) => {\n      if (value === null || value === undefined) {\n        return missing;\n      }\n      return nft.format(value);\n    };\n  }\n\n  /**\n   * The namespace for the `formatIntlNumber` function statics.\n   */\n  export namespace formatIntlNumber {\n    /**\n     * The options for creating an intl number format function.\n     */\n    export interface IOptions {\n      /**\n       * The locales to pass to the `Intl.NumberFormat` constructor.\n       *\n       * The default is determined by the user agent.\n       */\n      locales?: string | string[];\n\n      /**\n       * The options to pass to the `Intl.NumberFormat` constructor.\n       *\n       * The default is determined by the user agent.\n       */\n      options?: Intl.NumberFormatOptions;\n\n      /**\n       * The text to use for a `null` or `undefined` data value.\n       *\n       * The default is `''`.\n       */\n      missing?: string;\n    }\n  }\n\n  /**\n   * Create a date format function.\n   *\n   * @param options - The options for creating the format function.\n   *\n   * @returns A new date format function.\n   *\n   * #### Notes\n   * This formatter uses `Date.toDateString()` to format the values.\n   *\n   * If a value is not a `Date` object, `new Date(value)` is used to\n   * coerce the value to a date.\n   *\n   * The `formatIntlDateTime()` formatter is more flexible, but slower.\n   */\n  export function formatDate(options: formatDate.IOptions = {}): FormatFunc {\n    let missing = options.missing || '';\n    return ({ value }) => {\n      if (value === null || value === undefined) {\n        return missing;\n      }\n      if (value instanceof Date) {\n        return value.toDateString();\n      }\n      return new Date(value).toDateString();\n    };\n  }\n\n  /**\n   * The namespace for the `formatDate` function statics.\n   */\n  export namespace formatDate {\n    /**\n     * The options for creating a date format function.\n     */\n    export interface IOptions {\n      /**\n       * The text to use for a `null` or `undefined` data value.\n       *\n       * The default is `''`.\n       */\n      missing?: string;\n    }\n  }\n\n  /**\n   * Create a time format function.\n   *\n   * @param options - The options for creating the format function.\n   *\n   * @returns A new time format function.\n   *\n   * #### Notes\n   * This formatter uses `Date.toTimeString()` to format the values.\n   *\n   * If a value is not a `Date` object, `new Date(value)` is used to\n   * coerce the value to a date.\n   *\n   * The `formatIntlDateTime()` formatter is more flexible, but slower.\n   */\n  export function formatTime(options: formatTime.IOptions = {}): FormatFunc {\n    let missing = options.missing || '';\n    return ({ value }) => {\n      if (value === null || value === undefined) {\n        return missing;\n      }\n      if (value instanceof Date) {\n        return value.toTimeString();\n      }\n      return new Date(value).toTimeString();\n    };\n  }\n\n  /**\n   * The namespace for the `formatTime` function statics.\n   */\n  export namespace formatTime {\n    /**\n     * The options for creating a time format function.\n     */\n    export interface IOptions {\n      /**\n       * The text to use for a `null` or `undefined` data value.\n       *\n       * The default is `''`.\n       */\n      missing?: string;\n    }\n  }\n\n  /**\n   * Create an ISO datetime format function.\n   *\n   * @param options - The options for creating the format function.\n   *\n   * @returns A new ISO datetime format function.\n   *\n   * #### Notes\n   * This formatter uses `Date.toISOString()` to format the values.\n   *\n   * If a value is not a `Date` object, `new Date(value)` is used to\n   * coerce the value to a date.\n   *\n   * The `formatIntlDateTime()` formatter is more flexible, but slower.\n   */\n  export function formatISODateTime(\n    options: formatISODateTime.IOptions = {}\n  ): FormatFunc {\n    let missing = options.missing || '';\n    return ({ value }) => {\n      if (value === null || value === undefined) {\n        return missing;\n      }\n      if (value instanceof Date) {\n        return value.toISOString();\n      }\n      return new Date(value).toISOString();\n    };\n  }\n\n  /**\n   * The namespace for the `formatISODateTime` function statics.\n   */\n  export namespace formatISODateTime {\n    /**\n     * The options for creating an ISO datetime format function.\n     */\n    export interface IOptions {\n      /**\n       * The text to use for a `null` or `undefined` data value.\n       *\n       * The default is `''`.\n       */\n      missing?: string;\n    }\n  }\n\n  /**\n   * Create a UTC datetime format function.\n   *\n   * @param options - The options for creating the format function.\n   *\n   * @returns A new UTC datetime format function.\n   *\n   * #### Notes\n   * This formatter uses `Date.toUTCString()` to format the values.\n   *\n   * If a value is not a `Date` object, `new Date(value)` is used to\n   * coerce the value to a date.\n   *\n   * The `formatIntlDateTime()` formatter is more flexible, but slower.\n   */\n  export function formatUTCDateTime(\n    options: formatUTCDateTime.IOptions = {}\n  ): FormatFunc {\n    let missing = options.missing || '';\n    return ({ value }) => {\n      if (value === null || value === undefined) {\n        return missing;\n      }\n      if (value instanceof Date) {\n        return value.toUTCString();\n      }\n      return new Date(value).toUTCString();\n    };\n  }\n\n  /**\n   * The namespace for the `formatUTCDateTime` function statics.\n   */\n  export namespace formatUTCDateTime {\n    /**\n     * The options for creating a UTC datetime format function.\n     */\n    export interface IOptions {\n      /**\n       * The text to use for a `null` or `undefined` data value.\n       *\n       * The default is `''`.\n       */\n      missing?: string;\n    }\n  }\n\n  /**\n   * Create an international datetime format function.\n   *\n   * @param options - The options for creating the format function.\n   *\n   * @returns A new international datetime format function.\n   *\n   * #### Notes\n   * This formatter uses the builtin `Intl.DateTimeFormat` object to\n   * coerce values.\n   *\n   * This is the most flexible (but slowest) datetime formatter.\n   */\n  export function formatIntlDateTime(\n    options: formatIntlDateTime.IOptions = {}\n  ): FormatFunc {\n    let missing = options.missing || '';\n    let dtf = new Intl.DateTimeFormat(options.locales, options.options);\n    return ({ value }) => {\n      if (value === null || value === undefined) {\n        return missing;\n      }\n      return dtf.format(value);\n    };\n  }\n\n  /**\n   * The namespace for the `formatIntlDateTime` function statics.\n   */\n  export namespace formatIntlDateTime {\n    /**\n     * The options for creating an intl datetime format function.\n     */\n    export interface IOptions {\n      /**\n       * The locales to pass to the `Intl.DateTimeFormat` constructor.\n       *\n       * The default is determined by the user agent.\n       */\n      locales?: string | string[];\n\n      /**\n       * The options to pass to the `Intl.DateTimeFormat` constructor.\n       *\n       * The default is determined by the user agent.\n       */\n      options?: Intl.DateTimeFormatOptions;\n\n      /**\n       * The text to use for a `null` or `undefined` data value.\n       *\n       * The default is `''`.\n       */\n      missing?: string;\n    }\n  }\n\n  /**\n   * Measure the height of a font.\n   *\n   * @param font - The CSS font string of interest.\n   *\n   * @returns The height of the font bounding box.\n   *\n   * #### Notes\n   * This function uses a temporary DOM node to measure the text box\n   * height for the specified font. The first call for a given font\n   * will incur a DOM reflow, but the return value is cached, so any\n   * subsequent call for the same font will return the cached value.\n   */\n  export function measureFontHeight(font: string): number {\n    // Look up the cached font height.\n    let height = Private.fontHeightCache[font];\n\n    // Return the cached font height if it exists.\n    if (height !== undefined) {\n      return height;\n    }\n\n    // Normalize the font.\n    Private.fontMeasurementGC.font = font;\n    let normFont = Private.fontMeasurementGC.font;\n\n    // Set the font on the measurement node.\n    Private.fontMeasurementNode.style.font = normFont;\n\n    // Add the measurement node to the document.\n    document.body.appendChild(Private.fontMeasurementNode);\n\n    // Measure the node height.\n    height = Private.fontMeasurementNode.offsetHeight;\n\n    // Remove the measurement node from the document.\n    document.body.removeChild(Private.fontMeasurementNode);\n\n    // Cache the measured height for the font and norm font.\n    Private.fontHeightCache[font] = height;\n    Private.fontHeightCache[normFont] = height;\n\n    // Return the measured height.\n    return height;\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A cache of measured font heights.\n   */\n  export const fontHeightCache: { [font: string]: number } =\n    Object.create(null);\n\n  /**\n   * The DOM node used for font height measurement.\n   */\n  export const fontMeasurementNode = (() => {\n    let node = document.createElement('div');\n    node.style.position = 'absolute';\n    node.style.top = '-99999px';\n    node.style.left = '-99999px';\n    node.style.visibility = 'hidden';\n    node.textContent = 'M';\n    return node;\n  })();\n\n  /**\n   * The GC used for font measurement.\n   */\n  export const fontMeasurementGC = (() => {\n    let canvas = document.createElement('canvas');\n    canvas.width = 0;\n    canvas.height = 0;\n    return canvas.getContext('2d')!;\n  })();\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { CellRenderer } from './cellrenderer';\n\nimport { GraphicsContext } from './graphicscontext';\n\nimport { TextRenderer } from './textrenderer';\n\n/**\n * A cell renderer which renders data values as text.\n */\nexport class HyperlinkRenderer extends TextRenderer {\n  /**\n   * Construct a new text renderer.\n   *\n   * @param options - The options for initializing the renderer.\n   */\n  constructor(options: HyperlinkRenderer.IOptions = {}) {\n    // Set default parameters before passing over the super.\n    options.textColor = options.textColor || 'navy';\n    options.font = options.font || 'bold 12px sans-serif';\n    super(options);\n    this.url = options.url;\n    this.urlName = options.urlName;\n  }\n\n  /**\n   * The URL address.\n   */\n  readonly url: CellRenderer.ConfigOption<string> | undefined;\n\n  /**\n   * The friendly link name.\n   */\n  readonly urlName: CellRenderer.ConfigOption<string> | undefined;\n\n  /**\n   * Get the full text to be rendered by the cell.\n   */\n  getText(config: CellRenderer.CellConfig): string {\n    let urlName = CellRenderer.resolveOption(this.urlName, config);\n\n    // If we have a friendly URL name, use that.\n    if (urlName) {\n      return this.format({\n        ...config,\n        value: urlName\n      } as CellRenderer.CellConfig);\n    }\n\n    // Otherwise use the raw value attribute.\n    return this.format(config);\n  }\n\n  /**\n   * Draw the text for the cell.\n   *\n   * @param gc - The graphics context to use for drawing.\n   *\n   * @param config - The configuration data for the cell.\n   */\n  drawText(gc: GraphicsContext, config: CellRenderer.CellConfig): void {\n    // Resolve the font for the cell.\n    let font = CellRenderer.resolveOption(this.font, config);\n\n    // Bail if there is no font to draw.\n    if (!font) {\n      return;\n    }\n\n    // Resolve the text color for the cell.\n    let color = CellRenderer.resolveOption(this.textColor, config);\n\n    // Bail if there is no text color to draw.\n    if (!color) {\n      return;\n    }\n\n    let text = this.getText(config);\n\n    // Bail if there is no text to draw.\n    if (!text) {\n      return;\n    }\n\n    // Resolve the vertical and horizontal alignment.\n    let vAlign = CellRenderer.resolveOption(this.verticalAlignment, config);\n    let hAlign = CellRenderer.resolveOption(this.horizontalAlignment, config);\n\n    // Resolve the elision direction\n    let elideDirection = CellRenderer.resolveOption(\n      this.elideDirection,\n      config\n    );\n\n    // Resolve the text wrapping flag\n    let wrapText = CellRenderer.resolveOption(this.wrapText, config);\n\n    // Compute the padded text box height for the specified alignment.\n    let boxHeight = config.height - (vAlign === 'center' ? 1 : 2);\n\n    // Bail if the text box has no effective size.\n    if (boxHeight <= 0) {\n      return;\n    }\n\n    // Compute the text height for the gc font.\n    let textHeight = HyperlinkRenderer.measureFontHeight(font);\n\n    // Set up the text position variables.\n    let textX: number;\n    let textY: number;\n    let boxWidth: number;\n\n    // Compute the Y position for the text.\n    switch (vAlign) {\n      case 'top':\n        textY = config.y + 2 + textHeight;\n        break;\n      case 'center':\n        textY = config.y + config.height / 2 + textHeight / 2;\n        break;\n      case 'bottom':\n        textY = config.y + config.height - 2;\n        break;\n      default:\n        throw 'unreachable';\n    }\n\n    // Compute the X position for the text.\n    switch (hAlign) {\n      case 'left':\n        textX = config.x + 8;\n        boxWidth = config.width - 14;\n        break;\n      case 'center':\n        textX = config.x + config.width / 2;\n        boxWidth = config.width;\n        break;\n      case 'right':\n        textX = config.x + config.width - 8;\n        boxWidth = config.width - 14;\n        break;\n      default:\n        throw 'unreachable';\n    }\n\n    // Clip the cell if the text is taller than the text box height.\n    if (textHeight > boxHeight) {\n      gc.beginPath();\n      gc.rect(config.x, config.y, config.width, config.height - 1);\n      gc.clip();\n    }\n\n    // Set the gc state.\n    gc.font = font;\n    gc.fillStyle = color;\n    gc.textAlign = hAlign;\n    gc.textBaseline = 'bottom';\n\n    // Terminate call here if we're not eliding or wrapping text\n    if (elideDirection === 'none' && !wrapText) {\n      gc.fillText(text, textX, textY);\n      return;\n    }\n\n    // The current text width in pixels.\n    let textWidth = gc.measureText(text).width;\n\n    // Apply text wrapping if enabled.\n    if (wrapText && textWidth > boxWidth) {\n      // Make sure box clipping happens.\n      gc.beginPath();\n      gc.rect(config.x, config.y, config.width, config.height - 1);\n      gc.clip();\n\n      // Split column name to words based on\n      // whitespace preceding a word boundary.\n      // \"Hello  world\" --> [\"Hello  \", \"world\"]\n      const wordsInColumn = text.split(/\\s(?=\\b)/);\n\n      // Y-coordinate offset for any additional lines\n      let curY = textY;\n      let textInCurrentLine = wordsInColumn.shift()!;\n\n      // Single word. Applying text wrap on word by splitting\n      // it into characters and fitting the maximum number of\n      // characters possible per line (box width).\n      if (wordsInColumn.length === 0) {\n        let curLineTextWidth = gc.measureText(textInCurrentLine).width;\n        while (curLineTextWidth > boxWidth && textInCurrentLine !== '') {\n          // Iterating from the end of the string until we find a\n          // substring (0,i) which has a width less than the box width.\n          for (let i = textInCurrentLine.length; i > 0; i--) {\n            const curSubString = textInCurrentLine.substring(0, i);\n            const curSubStringWidth = gc.measureText(curSubString).width;\n            if (curSubStringWidth < boxWidth || curSubString.length === 1) {\n              // Found a substring which has a width less than the current\n              // box width. Rendering that substring on the current line\n              // and setting the remainder of the parent string as the next\n              // string to iterate on for the next line.\n              const nextLineText = textInCurrentLine.substring(\n                i,\n                textInCurrentLine.length\n              );\n              textInCurrentLine = nextLineText;\n              curLineTextWidth = gc.measureText(textInCurrentLine).width;\n              gc.fillText(curSubString, textX, curY);\n              curY += textHeight;\n              // No need to continue iterating after we identified\n              // an index to break the string on.\n              break;\n            }\n          }\n        }\n      }\n\n      // Multiple words in column header. Fitting maximum\n      // number of words possible per line (box width).\n      else {\n        while (wordsInColumn.length !== 0) {\n          // Processing the next word in the queue.\n          const curWord = wordsInColumn.shift();\n          // Joining that word with the existing text for\n          // the current line.\n          const incrementedText = [textInCurrentLine, curWord].join(' ');\n          const incrementedTextWidth = gc.measureText(incrementedText).width;\n          if (incrementedTextWidth > boxWidth) {\n            // If the newly combined text has a width larger than\n            // the box width, we render the line before the current\n            // word was added. We set the current word as the next\n            // line.\n            gc.fillText(textInCurrentLine, textX, curY);\n            curY += textHeight;\n            textInCurrentLine = curWord!;\n          } else {\n            // The combined text hasd a width less than the box width. We\n            // set the the current line text to be the new combined text.\n            textInCurrentLine = incrementedText;\n          }\n        }\n      }\n      gc.fillText(textInCurrentLine!, textX, curY);\n      // Terminating the call here as we don't want\n      // to apply text eliding when wrapping is active.\n      return;\n    }\n\n    // Elide text that is too long\n    let elide = '\\u2026';\n\n    // Compute elided text\n    if (elideDirection === 'right') {\n      while (textWidth > boxWidth && text.length > 1) {\n        if (text.length > 4 && textWidth >= 2 * boxWidth) {\n          // If text width is substantially bigger, take half the string\n          text = text.substring(0, text.length / 2 + 1) + elide;\n        } else {\n          // Otherwise incrementally remove the last character\n          text = text.substring(0, text.length - 2) + elide;\n        }\n        textWidth = gc.measureText(text).width;\n      }\n    } else {\n      while (textWidth > boxWidth && text.length > 1) {\n        if (text.length > 4 && textWidth >= 2 * boxWidth) {\n          // If text width is substantially bigger, take half the string\n          text = elide + text.substring(text.length / 2);\n        } else {\n          // Otherwise incrementally remove the last character\n          text = elide + text.substring(2);\n        }\n        textWidth = gc.measureText(text).width;\n      }\n    }\n\n    // Draw the text for the cell.\n    gc.fillText(text, textX, textY);\n  }\n}\n\nexport namespace HyperlinkRenderer {\n  /**\n   * A type alias for the supported vertical alignment modes.\n   */\n  export type VerticalAlignment = 'top' | 'center' | 'bottom';\n\n  /**\n   * A type alias for the supported horizontal alignment modes.\n   */\n  export type HorizontalAlignment = 'left' | 'center' | 'right';\n\n  /**\n   * A type alias for the supported ellipsis sides.\n   */\n  export type ElideDirection = 'left' | 'right' | 'none';\n\n  /**\n   * An options object for initializing a text renderer.\n   */\n  export interface IOptions extends TextRenderer.IOptions {\n    /**\n     * The URL address\n     */\n    url?: CellRenderer.ConfigOption<string> | undefined;\n    /**\n     * The friendly link name.\n     *\n     * The default is the URL itself.\n     */\n    urlName?: CellRenderer.ConfigOption<string> | undefined;\n  }\n}\n","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n\nimport { DataModel } from './datamodel';\n\n/**\n * An interface describing a merged cell group.\n * r1: start row\n * r2: end row\n * c1: start column\n * c2: end column\n */\nexport interface CellGroup {\n  r1: number;\n  r2: number;\n  c1: number;\n  c2: number;\n}\n\n/**\n * A collection of helper functions relating to merged cell groups\n */\nexport namespace CellGroup {\n  /**\n   * Checks if two cell-groups are intersecting\n   * in the given axis.\n   * @param group1\n   * @param group2\n   * @param axis\n   */\n  export function areCellGroupsIntersectingAtAxis(\n    group1: CellGroup,\n    group2: CellGroup,\n    axis: 'row' | 'column'\n  ): boolean {\n    if (axis === 'row') {\n      return (\n        (group1.r1 >= group2.r1 && group1.r1 <= group2.r2) ||\n        (group1.r2 >= group2.r1 && group1.r2 <= group2.r2) ||\n        (group2.r1 >= group1.r1 && group2.r1 <= group1.r2) ||\n        (group2.r2 >= group1.r1 && group2.r2 <= group1.r2)\n      );\n    }\n    return (\n      (group1.c1 >= group2.c1 && group1.c1 <= group2.c2) ||\n      (group1.c2 >= group2.c1 && group1.c2 <= group2.c2) ||\n      (group2.c1 >= group1.c1 && group2.c1 <= group1.c2) ||\n      (group2.c2 >= group1.c1 && group2.c2 <= group1.c2)\n    );\n  }\n\n  /**\n   * Checks if cell-groups are intersecting.\n   * @param group1\n   * @param group2\n   */\n  export function areCellGroupsIntersecting(\n    group1: CellGroup,\n    group2: CellGroup\n  ): boolean {\n    return (\n      ((group1.r1 >= group2.r1 && group1.r1 <= group2.r2) ||\n        (group1.r2 >= group2.r1 && group1.r2 <= group2.r2) ||\n        (group2.r1 >= group1.r1 && group2.r1 <= group1.r2) ||\n        (group2.r2 >= group1.r1 && group2.r2 <= group1.r2)) &&\n      ((group1.c1 >= group2.c1 && group1.c1 <= group2.c2) ||\n        (group1.c2 >= group2.c1 && group1.c2 <= group2.c2) ||\n        (group2.c1 >= group1.c1 && group2.c1 <= group1.c2) ||\n        (group2.c2 >= group1.c1 && group2.c2 <= group1.c2))\n    );\n  }\n\n  /**\n   * Retrieves the index of the cell-group to which\n   * the cell at the given row, column belongs.\n   * @param dataModel\n   * @param rgn\n   * @param row\n   * @param column\n   */\n  export function getGroupIndex(\n    dataModel: DataModel,\n    rgn: DataModel.CellRegion,\n    row: number,\n    column: number\n  ): number {\n    const numGroups = dataModel.groupCount(rgn);\n    for (let i = 0; i < numGroups; i++) {\n      const group = dataModel.group(rgn, i)!;\n      if (\n        row >= group.r1 &&\n        row <= group.r2 &&\n        column >= group.c1 &&\n        column <= group.c2\n      ) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Returns a cell-group for the given row/index coordinates.\n   * @param dataModel\n   * @param rgn\n   * @param row\n   * @param column\n   */\n  export function getGroup(\n    dataModel: DataModel,\n    rgn: DataModel.CellRegion,\n    row: number,\n    column: number\n  ): CellGroup | null {\n    const groupIndex = getGroupIndex(dataModel, rgn, row, column);\n    if (groupIndex === -1) {\n      return null;\n    }\n\n    return dataModel.group(rgn, groupIndex);\n  }\n\n  /**\n   * Returns all cell groups which belong to\n   * a given cell cell region.\n   * @param dataModel\n   * @param rgn\n   */\n  export function getCellGroupsAtRegion(\n    dataModel: DataModel,\n    rgn: DataModel.CellRegion\n  ): CellGroup[] {\n    let groupsAtRegion: CellGroup[] = [];\n    const numGroups = dataModel.groupCount(rgn);\n\n    for (let i = 0; i < numGroups; i++) {\n      const group = dataModel.group(rgn, i)!;\n      groupsAtRegion.push(group);\n    }\n    return groupsAtRegion;\n  }\n\n  /**\n   * Calculates and returns a merged cell-group from\n   * two cell-group objects.\n   * @param groups\n   */\n  export function joinCellGroups(groups: CellGroup[]): CellGroup {\n    let startRow = Number.MAX_VALUE;\n    let endRow = Number.MIN_VALUE;\n    let startColumn = Number.MAX_VALUE;\n    let endColumn = Number.MIN_VALUE;\n\n    for (const group of groups) {\n      startRow = Math.min(startRow, group.r1);\n      endRow = Math.max(endRow, group.r2);\n      startColumn = Math.min(startColumn, group.c1);\n      endColumn = Math.max(endColumn, group.c2);\n    }\n\n    return { r1: startRow, r2: endRow, c1: startColumn, c2: endColumn };\n  }\n\n  /**\n   * Merges a cell group with other cells groups in the\n   * same region if they intersect.\n   * @param dataModel the data model of the grid.\n   * @param group the target cell group.\n   * @param region the region of the cell group.\n   * @returns a new cell group after merging has happened.\n   */\n  export function joinCellGroupWithMergedCellGroups(\n    dataModel: DataModel,\n    group: CellGroup,\n    region: DataModel.CellRegion\n  ): CellGroup {\n    let joinedGroup: CellGroup = { ...group };\n\n    const mergedCellGroups: CellGroup[] = getCellGroupsAtRegion(\n      dataModel,\n      region\n    );\n\n    for (let g = 0; g < mergedCellGroups.length; g++) {\n      const mergedGroup = mergedCellGroups[g];\n      if (areCellGroupsIntersecting(joinedGroup, mergedGroup)) {\n        joinedGroup = joinCellGroups([joinedGroup, mergedGroup]);\n      }\n    }\n\n    return joinedGroup;\n  }\n\n  /**\n   * Retrieves a list of cell groups intersecting at\n   * a given row.\n   * @param dataModel data model of the grid.\n   * @param rgn the cell region.\n   * @param row the target row to look for intersections at.\n   * @returns all cell groups intersecting with the row.\n   */\n  export function getCellGroupsAtRow(\n    dataModel: DataModel,\n    rgn: DataModel.CellRegion,\n    row: number\n  ): CellGroup[] {\n    let groupsAtRow = [];\n    const numGroups = dataModel.groupCount(rgn);\n\n    for (let i = 0; i < numGroups; i++) {\n      const group = dataModel.group(rgn, i)!;\n      if (row >= group.r1 && row <= group.r2) {\n        groupsAtRow.push(group);\n      }\n    }\n    return groupsAtRow;\n  }\n\n  /**\n   * Retrieves a list of cell groups intersecting at\n   * a given column.\n   * @param dataModel data model of the grid.\n   * @param rgn the cell region.\n   * @param column the target column to look for intersections at.\n   * @returns all cell groups intersecting with the column.\n   */\n  export function getCellGroupsAtColumn(\n    dataModel: DataModel,\n    rgn: DataModel.CellRegion,\n    column: number\n  ): CellGroup[] {\n    let groupsAtColumn = [];\n    const numGroups = dataModel.groupCount(rgn);\n\n    for (let i = 0; i < numGroups; i++) {\n      const group = dataModel.group(rgn, i)!;\n      if (column >= group.c1 && column <= group.c2) {\n        groupsAtColumn.push(group);\n      }\n    }\n    return groupsAtColumn;\n  }\n\n  /**\n   * Merges a target cell group with any cell groups\n   * it intersects with at a given row or column.\n   * @param dataModel data model of the grid.\n   * @param regions list of cell regions.\n   * @param axis row or column.\n   * @param group the target cell group.\n   * @returns a new merged cell group.\n   */\n  export function joinCellGroupsIntersectingAtAxis(\n    dataModel: DataModel,\n    regions: DataModel.CellRegion[],\n    axis: 'row' | 'column',\n    group: CellGroup\n  ): CellGroup {\n    let groupsAtAxis: CellGroup[] = [];\n    if (axis === 'row') {\n      for (const region of regions) {\n        for (let r = group.r1; r <= group.r2; r++) {\n          groupsAtAxis = groupsAtAxis.concat(\n            CellGroup.getCellGroupsAtRow(dataModel, region, r)\n          );\n        }\n      }\n    } else {\n      for (const region of regions) {\n        for (let c = group.c1; c <= group.c2; c++) {\n          groupsAtAxis = groupsAtAxis.concat(\n            CellGroup.getCellGroupsAtColumn(dataModel, region, c)\n          );\n        }\n      }\n    }\n\n    let mergedGroupAtAxis: CellGroup = CellGroup.joinCellGroups(groupsAtAxis);\n\n    if (groupsAtAxis.length > 0) {\n      let mergedCellGroups: CellGroup[] = [];\n      for (const region of regions) {\n        mergedCellGroups = mergedCellGroups.concat(\n          CellGroup.getCellGroupsAtRegion(dataModel, region)\n        );\n      }\n\n      for (let g = 0; g < mergedCellGroups.length; g++) {\n        const group = mergedCellGroups[g];\n        if (\n          CellGroup.areCellGroupsIntersectingAtAxis(\n            mergedGroupAtAxis,\n            group,\n            axis\n          )\n        ) {\n          mergedGroupAtAxis = CellGroup.joinCellGroups([\n            group,\n            mergedGroupAtAxis\n          ]);\n          mergedCellGroups.splice(g, 1);\n          g = 0;\n        }\n      }\n    }\n    return mergedGroupAtAxis;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IDisposable } from '@lumino/disposable';\n\nimport { Platform } from '@lumino/domutils';\n\nimport { Drag } from '@lumino/dragdrop';\n\nimport { DataGrid } from './datagrid';\n\nimport { HyperlinkRenderer } from './hyperlinkrenderer';\n\nimport { DataModel } from './datamodel';\n\nimport { SelectionModel } from './selectionmodel';\n\nimport { CellEditor } from './celleditor';\n\nimport { CellGroup } from './cellgroup';\n\nimport { CellRenderer } from './cellrenderer';\n\nimport { TextRenderer } from './textrenderer';\n\n/**\n * A basic implementation of a data grid mouse handler.\n *\n * #### Notes\n * This class may be subclassed and customized as needed.\n */\nexport class BasicMouseHandler implements DataGrid.IMouseHandler {\n  /**\n   * Dispose of the resources held by the mouse handler.\n   */\n  dispose(): void {\n    // Bail early if the handler is already disposed.\n    if (this._disposed) {\n      return;\n    }\n\n    // Release any held resources.\n    this.release();\n\n    // Mark the handler as disposed.\n    this._disposed = true;\n  }\n\n  /**\n   * Whether the mouse handler is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._disposed;\n  }\n\n  /**\n   * Release the resources held by the handler.\n   */\n  release(): void {\n    // Bail early if the is no press data.\n    if (!this._pressData) {\n      return;\n    }\n\n    // Clear the autoselect timeout.\n    if (this._pressData.type === 'select') {\n      this._pressData.timeout = -1;\n    }\n\n    // Clear the press data.\n    this._pressData.override.dispose();\n    this._pressData = null;\n  }\n\n  /**\n   * Handle the mouse hover event for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The mouse hover event of interest.\n   */\n  onMouseHover(grid: DataGrid, event: MouseEvent): void {\n    // Hit test the grid.\n    let hit = grid.hitTest(event.clientX, event.clientY);\n\n    // Get the resize handle for the hit test.\n    let handle = Private.resizeHandleForHitTest(hit);\n\n    // Fetch the cursor for the handle.\n    let cursor = this.cursorForHandle(handle);\n\n    // Hyperlink logic.\n    const config = Private.createCellConfigObject(grid, hit);\n\n    if (config) {\n      // Retrieve renderer for hovered cell.\n      const renderer = grid.cellRenderers.get(config);\n      if (renderer instanceof HyperlinkRenderer) {\n        cursor = this.cursorForHandle('hyperlink');\n      }\n    }\n\n    // Update the viewport cursor based on the part.\n    grid.viewport.node.style.cursor = cursor;\n\n    // TODO support user-defined hover items\n  }\n\n  /**\n   * Handle the mouse leave event for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The mouse hover event of interest.\n   */\n  onMouseLeave(grid: DataGrid, event: MouseEvent): void {\n    // TODO support user-defined hover popups.\n\n    // Clear the viewport cursor.\n    grid.viewport.node.style.cursor = '';\n  }\n\n  /**\n   * Handle the mouse down event for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The mouse down event of interest.\n   */\n  onMouseDown(grid: DataGrid, event: MouseEvent): void {\n    // Unpack the event.\n    let { clientX, clientY } = event;\n\n    // Hit test the grid.\n    let hit = grid.hitTest(clientX, clientY);\n\n    // Unpack the hit test.\n    const { region, row, column } = hit;\n\n    // Bail if the hit test is on an uninteresting region.\n    if (region === 'void') {\n      return;\n    }\n\n    // Fetch the modifier flags.\n    let shift = event.shiftKey;\n    let accel = Platform.accelKey(event);\n\n    // Hyperlink logic.\n    if (grid) {\n      // Create cell config object.\n      const config = Private.createCellConfigObject(grid, hit);\n\n      // Retrieve cell renderer.\n      let renderer = grid.cellRenderers.get(config!);\n\n      // Only process hyperlink renderers.\n      if (renderer instanceof HyperlinkRenderer) {\n        // Use the url param if it exists.\n        let url = CellRenderer.resolveOption(renderer.url, config!);\n        // Otherwise assume cell value is the URL.\n        if (!url) {\n          const format = TextRenderer.formatGeneric();\n          url = format(config!);\n        }\n\n        // Open the hyperlink only if user hit Ctrl+Click.\n        if (accel) {\n          window.open(url);\n          // Reset cursor default after clicking\n          const cursor = this.cursorForHandle('none');\n          grid.viewport.node.style.cursor = cursor;\n          // Not applying selections if navigating away.\n          return;\n        }\n      }\n    }\n\n    // If the hit test is the body region, the only option is select.\n    if (region === 'body') {\n      // Fetch the selection model.\n      let model = grid.selectionModel;\n\n      // Bail early if there is no selection model.\n      if (!model) {\n        return;\n      }\n\n      // Override the document cursor.\n      let override = Drag.overrideCursor('default');\n\n      // Set up the press data.\n      this._pressData = {\n        type: 'select',\n        region,\n        row,\n        column,\n        override,\n        localX: -1,\n        localY: -1,\n        timeout: -1\n      };\n\n      // Set up the selection variables.\n      let r1: number;\n      let c1: number;\n      let r2: number;\n      let c2: number;\n      let cursorRow: number;\n      let cursorColumn: number;\n      let clear: SelectionModel.ClearMode;\n\n      // Accel == new selection, keep old selections.\n      if (accel) {\n        r1 = row;\n        r2 = row;\n        c1 = column;\n        c2 = column;\n        cursorRow = row;\n        cursorColumn = column;\n        clear = 'none';\n      } else if (shift) {\n        r1 = model.cursorRow;\n        r2 = row;\n        c1 = model.cursorColumn;\n        c2 = column;\n        cursorRow = model.cursorRow;\n        cursorColumn = model.cursorColumn;\n        clear = 'current';\n      } else {\n        r1 = row;\n        r2 = row;\n        c1 = column;\n        c2 = column;\n        cursorRow = row;\n        cursorColumn = column;\n        clear = 'all';\n      }\n\n      // Make the selection.\n      model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n\n      // Done.\n      return;\n    }\n\n    // Otherwise, the hit test is on a header region.\n\n    // Convert the hit test into a part.\n    let handle = Private.resizeHandleForHitTest(hit);\n\n    // Fetch the cursor for the handle.\n    let cursor = this.cursorForHandle(handle);\n\n    // Handle horizontal resize.\n    if (handle === 'left' || handle === 'right') {\n      // Set up the resize data type.\n      const type = 'column-resize';\n\n      // Determine the column region.\n      let rgn: DataModel.ColumnRegion =\n        region === 'column-header' ? 'body' : 'row-header';\n\n      // Determine the section index.\n      let index = handle === 'left' ? column - 1 : column;\n\n      // Fetch the section size.\n      let size = grid.columnSize(rgn, index);\n\n      // Override the document cursor.\n      let override = Drag.overrideCursor(cursor);\n\n      // Create the temporary press data.\n      this._pressData = { type, region: rgn, index, size, clientX, override };\n\n      // Done.\n      return;\n    }\n\n    // Handle vertical resize\n    if (handle === 'top' || handle === 'bottom') {\n      // Set up the resize data type.\n      const type = 'row-resize';\n\n      // Determine the row region.\n      let rgn: DataModel.RowRegion =\n        region === 'row-header' ? 'body' : 'column-header';\n\n      // Determine the section index.\n      let index = handle === 'top' ? row - 1 : row;\n\n      // Fetch the section size.\n      let size = grid.rowSize(rgn, index);\n\n      // Override the document cursor.\n      let override = Drag.overrideCursor(cursor);\n\n      // Create the temporary press data.\n      this._pressData = { type, region: rgn, index, size, clientY, override };\n\n      // Done.\n      return;\n    }\n\n    // Otherwise, the only option is select.\n\n    // Fetch the selection model.\n    let model = grid.selectionModel;\n\n    // Bail if there is no selection model.\n    if (!model) {\n      return;\n    }\n\n    // Override the document cursor.\n    let override = Drag.overrideCursor('default');\n\n    // Set up the press data.\n    this._pressData = {\n      type: 'select',\n      region,\n      row,\n      column,\n      override,\n      localX: -1,\n      localY: -1,\n      timeout: -1\n    };\n\n    // Set up the selection variables.\n    let r1: number;\n    let c1: number;\n    let r2: number;\n    let c2: number;\n    let cursorRow: number;\n    let cursorColumn: number;\n    let clear: SelectionModel.ClearMode;\n\n    // Compute the selection based on the pressed region.\n    if (region === 'corner-header') {\n      r1 = 0;\n      r2 = Infinity;\n      c1 = 0;\n      c2 = Infinity;\n      cursorRow = accel ? 0 : shift ? model.cursorRow : 0;\n      cursorColumn = accel ? 0 : shift ? model.cursorColumn : 0;\n      clear = accel ? 'none' : shift ? 'current' : 'all';\n    } else if (region === 'row-header') {\n      r1 = accel ? row : shift ? model.cursorRow : row;\n      r2 = row;\n\n      const selectionGroup: CellGroup = { r1: r1, c1: 0, r2: r2, c2: 0 };\n      const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(\n        grid.dataModel!,\n        ['row-header', 'body'],\n        'row',\n        selectionGroup\n      );\n      // Check if there are any merges\n      if (joinedGroup.r1 != Number.MAX_VALUE) {\n        r1 = joinedGroup.r1;\n        r2 = joinedGroup.r2;\n      }\n\n      c1 = 0;\n      c2 = Infinity;\n      cursorRow = accel ? row : shift ? model.cursorRow : row;\n      cursorColumn = accel ? 0 : shift ? model.cursorColumn : 0;\n      clear = accel ? 'none' : shift ? 'current' : 'all';\n    } else if (region === 'column-header') {\n      r1 = 0;\n      r2 = Infinity;\n      c1 = accel ? column : shift ? model.cursorColumn : column;\n      c2 = column;\n\n      const selectionGroup: CellGroup = { r1: 0, c1: c1, r2: 0, c2: c2 };\n      const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(\n        grid.dataModel!,\n        ['column-header', 'body'],\n        'column',\n        selectionGroup\n      );\n      // Check if there are any merges\n      if (joinedGroup.c1 != Number.MAX_VALUE) {\n        c1 = joinedGroup.c1;\n        c2 = joinedGroup.c2;\n      }\n\n      cursorRow = accel ? 0 : shift ? model.cursorRow : 0;\n      cursorColumn = accel ? column : shift ? model.cursorColumn : column;\n      clear = accel ? 'none' : shift ? 'current' : 'all';\n    } else {\n      r1 = accel ? row : shift ? model.cursorRow : row;\n      r2 = row;\n      c1 = accel ? column : shift ? model.cursorColumn : column;\n      c2 = column;\n      cursorRow = accel ? row : shift ? model.cursorRow : row;\n      cursorColumn = accel ? column : shift ? model.cursorColumn : column;\n      clear = accel ? 'none' : shift ? 'current' : 'all';\n    }\n\n    // Make the selection.\n    model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n  }\n\n  /**\n   * Handle the mouse move event for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The mouse move event of interest.\n   */\n  onMouseMove(grid: DataGrid, event: MouseEvent): void {\n    // Fetch the press data.\n    const data = this._pressData;\n\n    // Bail early if there is no press data.\n    if (!data) {\n      return;\n    }\n\n    // Handle a row resize.\n    if (data.type === 'row-resize') {\n      let dy = event.clientY - data.clientY;\n      grid.resizeRow(data.region, data.index, data.size + dy);\n      return;\n    }\n\n    // Handle a column resize.\n    if (data.type === 'column-resize') {\n      let dx = event.clientX - data.clientX;\n      grid.resizeColumn(data.region, data.index, data.size + dx);\n      return;\n    }\n\n    // Otherwise, it's a select.\n\n    // Mouse moves during a corner header press are a no-op.\n    if (data.region === 'corner-header') {\n      return;\n    }\n\n    // Fetch the selection model.\n    let model = grid.selectionModel;\n\n    // Bail early if the selection model was removed.\n    if (!model) {\n      return;\n    }\n\n    // Map to local coordinates.\n    let { lx, ly } = grid.mapToLocal(event.clientX, event.clientY);\n\n    // Update the local mouse coordinates in the press data.\n    data.localX = lx;\n    data.localY = ly;\n\n    // Fetch the grid geometry.\n    let hw = grid.headerWidth;\n    let hh = grid.headerHeight;\n    let vpw = grid.viewportWidth;\n    let vph = grid.viewportHeight;\n    let sx = grid.scrollX;\n    let sy = grid.scrollY;\n    let msx = grid.maxScrollY;\n    let msy = grid.maxScrollY;\n\n    // Fetch the selection mode.\n    let mode = model.selectionMode;\n\n    // Set up the timeout variable.\n    let timeout = -1;\n\n    // Compute the timemout based on hit region and mouse position.\n    if (data.region === 'row-header' || mode === 'row') {\n      if (ly < hh && sy > 0) {\n        timeout = Private.computeTimeout(hh - ly);\n      } else if (ly >= vph && sy < msy) {\n        timeout = Private.computeTimeout(ly - vph);\n      }\n    } else if (data.region === 'column-header' || mode === 'column') {\n      if (lx < hw && sx > 0) {\n        timeout = Private.computeTimeout(hw - lx);\n      } else if (lx >= vpw && sx < msx) {\n        timeout = Private.computeTimeout(lx - vpw);\n      }\n    } else {\n      if (lx < hw && sx > 0) {\n        timeout = Private.computeTimeout(hw - lx);\n      } else if (lx >= vpw && sx < msx) {\n        timeout = Private.computeTimeout(lx - vpw);\n      } else if (ly < hh && sy > 0) {\n        timeout = Private.computeTimeout(hh - ly);\n      } else if (ly >= vph && sy < msy) {\n        timeout = Private.computeTimeout(ly - vph);\n      }\n    }\n\n    // Update or initiate the autoselect if needed.\n    if (timeout >= 0) {\n      if (data.timeout < 0) {\n        data.timeout = timeout;\n        setTimeout(() => {\n          Private.autoselect(grid, data);\n        }, timeout);\n      } else {\n        data.timeout = timeout;\n      }\n      return;\n    }\n\n    // Otherwise, clear the autoselect timeout.\n    data.timeout = -1;\n\n    // Map the position to virtual coordinates.\n    let { vx, vy } = grid.mapToVirtual(event.clientX, event.clientY);\n\n    // Clamp the coordinates to the limits.\n    vx = Math.max(0, Math.min(vx, grid.bodyWidth - 1));\n    vy = Math.max(0, Math.min(vy, grid.bodyHeight - 1));\n\n    // Set up the selection variables.\n    let r1: number;\n    let c1: number;\n    let r2: number;\n    let c2: number;\n    let cursorRow = model.cursorRow;\n    let cursorColumn = model.cursorColumn;\n    let clear: SelectionModel.ClearMode = 'current';\n\n    // Compute the selection based pressed region.\n    if (data.region === 'row-header' || mode === 'row') {\n      r1 = data.row;\n      r2 = grid.rowAt('body', vy);\n\n      const selectionGroup: CellGroup = { r1: r1, c1: 0, r2: r2, c2: 0 };\n      const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(\n        grid.dataModel!,\n        ['row-header', 'body'],\n        'row',\n        selectionGroup\n      );\n      // Check if there are any merges\n      if (joinedGroup.r1 != Number.MAX_VALUE) {\n        r1 = Math.min(r1, joinedGroup.r1);\n        r2 = Math.max(r2, joinedGroup.r2);\n      }\n\n      c1 = 0;\n      c2 = Infinity;\n    } else if (data.region === 'column-header' || mode === 'column') {\n      r1 = 0;\n      r2 = Infinity;\n      c1 = data.column;\n      c2 = grid.columnAt('body', vx);\n\n      const selectionGroup: CellGroup = { r1: 0, c1: c1, r2: 0, c2: c2 };\n      const joinedGroup = CellGroup.joinCellGroupsIntersectingAtAxis(\n        grid.dataModel!,\n        ['column-header', 'body'],\n        'column',\n        selectionGroup\n      );\n      // Check if there are any merges\n      if (joinedGroup.c1 != Number.MAX_VALUE) {\n        c1 = joinedGroup.c1;\n        c2 = joinedGroup.c2;\n      }\n    } else {\n      r1 = cursorRow;\n      r2 = grid.rowAt('body', vy);\n      c1 = cursorColumn;\n      c2 = grid.columnAt('body', vx);\n    }\n\n    // Make the selection.\n    model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n  }\n\n  /**\n   * Handle the mouse up event for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The mouse up event of interest.\n   */\n  onMouseUp(grid: DataGrid, event: MouseEvent): void {\n    this.release();\n  }\n\n  /**\n   * Handle the mouse double click event for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The mouse up event of interest.\n   */\n  onMouseDoubleClick(grid: DataGrid, event: MouseEvent): void {\n    if (!grid.dataModel) {\n      this.release();\n      return;\n    }\n\n    // Unpack the event.\n    let { clientX, clientY } = event;\n\n    // Hit test the grid.\n    let hit = grid.hitTest(clientX, clientY);\n\n    // Unpack the hit test.\n    let { region, row, column } = hit;\n\n    if (region === 'void') {\n      this.release();\n      return;\n    }\n\n    if (region === 'column-header' || region === 'corner-header') {\n      // Convert the hit test into a part.\n      const handle = Private.resizeHandleForHitTest(hit);\n\n      if (handle === 'left' || handle === 'right') {\n        let colIndex = handle === 'left' ? column - 1 : column;\n\n        let colRegion: DataModel.ColumnRegion =\n          region === 'column-header' ? 'body' : 'row-header';\n\n        if (colIndex < 0) {\n          if (region === 'column-header') {\n            // If the column is -1, it means we are in the corner header\n            colIndex = grid.dataModel.columnCount('row-header') - 1;\n            colRegion = 'row-header';\n          } else {\n            // If we are on the left edge of the row header, do nothing\n            return;\n          }\n        }\n\n        grid.resizeColumn(colRegion, colIndex, null);\n      }\n    }\n\n    if (region === 'body') {\n      if (grid.editable) {\n        const cell: CellEditor.CellConfig = {\n          grid: grid,\n          row: row,\n          column: column\n        };\n        grid.editorController!.edit(cell);\n      }\n    }\n\n    this.release();\n  }\n\n  /**\n   * Handle the context menu event for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The context menu event of interest.\n   */\n  onContextMenu(grid: DataGrid, event: MouseEvent): void {\n    // TODO support user-defined context menus\n  }\n\n  /**\n   * Handle the wheel event for the data grid.\n   *\n   * @param grid - The data grid of interest.\n   *\n   * @param event - The wheel event of interest.\n   */\n  onWheel(grid: DataGrid, event: WheelEvent): void {\n    // Bail if a mouse press is in progress.\n    if (this._pressData) {\n      return;\n    }\n\n    // Extract the delta X and Y movement.\n    let dx = event.deltaX;\n    let dy = event.deltaY;\n\n    // Convert the delta values to pixel values.\n    switch (event.deltaMode) {\n      case 0: // DOM_DELTA_PIXEL\n        break;\n      case 1: {\n        // DOM_DELTA_LINE\n        let ds = grid.defaultSizes;\n        dx *= ds.columnWidth;\n        dy *= ds.rowHeight;\n        break;\n      }\n      case 2: // DOM_DELTA_PAGE\n        dx *= grid.pageWidth;\n        dy *= grid.pageHeight;\n        break;\n      default:\n        throw 'unreachable';\n    }\n\n    // Only scroll and stop the event propagation if needed.\n    if (\n      // Scrolling left and not reached min already\n      (dx < 0 && grid.scrollX !== 0) ||\n      // Scrolling right and not reached max already\n      (dx > 0 && grid.scrollX !== grid.maxScrollX) ||\n      // Scrolling top and not reached min already\n      (dy < 0 && grid.scrollY !== 0) ||\n      // Scrolling down and not reached max already\n      (dy > 0 && grid.scrollY !== grid.maxScrollY)\n    ) {\n      event.preventDefault();\n      event.stopPropagation();\n\n      // Scroll by the desired amount.\n      grid.scrollBy(dx, dy);\n    }\n  }\n\n  /**\n   * Convert a resize handle into a cursor.\n   */\n  cursorForHandle(handle: ResizeHandle): string {\n    return Private.cursorMap[handle];\n  }\n\n  /**\n   * Get the current pressData\n   */\n  get pressData(): PressData.PressData | null {\n    return this._pressData;\n  }\n\n  private _disposed = false;\n  protected _pressData: PressData.PressData | null = null;\n}\n\n/**\n * A type alias for the resize handle types.\n */\nexport type ResizeHandle =\n  | 'top'\n  | 'left'\n  | 'right'\n  | 'bottom'\n  | 'none'\n  | 'hyperlink';\n\n/**\n * The namespace for the pressdata.\n */\nexport namespace PressData {\n  /**\n   * A type alias for the row resize data.\n   */\n  export type RowResizeData = {\n    /**\n     * The descriminated type for the data.\n     */\n    readonly type: 'row-resize';\n\n    /**\n     * The row region which holds the section being resized.\n     */\n    readonly region: DataModel.RowRegion;\n\n    /**\n     * The index of the section being resized.\n     */\n    readonly index: number;\n\n    /**\n     * The original size of the section.\n     */\n    readonly size: number;\n\n    /**\n     * The original client Y position of the mouse.\n     */\n    readonly clientY: number;\n\n    /**\n     * The disposable to clear the cursor override.\n     */\n    readonly override: IDisposable;\n  };\n\n  /**\n   * A type alias for the column resize data.\n   */\n  export type ColumnResizeData = {\n    /**\n     * The descriminated type for the data.\n     */\n    readonly type: 'column-resize';\n\n    /**\n     * The column region which holds the section being resized.\n     */\n    readonly region: DataModel.ColumnRegion;\n\n    /**\n     * The index of the section being resized.\n     */\n    readonly index: number;\n\n    /**\n     * The original size of the section.\n     */\n    readonly size: number;\n\n    /**\n     * The original client X position of the mouse.\n     */\n    readonly clientX: number;\n\n    /**\n     * The disposable to clear the cursor override.\n     */\n    readonly override: IDisposable;\n  };\n\n  /**\n   * A type alias for the select data.\n   */\n  export type SelectData = {\n    /**\n     * The descriminated type for the data.\n     */\n    readonly type: 'select';\n\n    /**\n     * The original region for the mouse press.\n     */\n    readonly region: DataModel.CellRegion;\n\n    /**\n     * The original row that was selected.\n     */\n    readonly row: number;\n\n    /**\n     * The original column that was selected.\n     */\n    readonly column: number;\n\n    /**\n     * The disposable to clear the cursor override.\n     */\n    readonly override: IDisposable;\n\n    /**\n     * The current local X position of the mouse.\n     */\n    localX: number;\n\n    /**\n     * The current local Y position of the mouse.\n     */\n    localY: number;\n\n    /**\n     * The timeout delay for the autoselect loop.\n     */\n    timeout: number;\n  };\n\n  /**\n   * A type alias for the resize handler press data.\n   */\n  export type PressData = RowResizeData | ColumnResizeData | SelectData;\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Creates a CellConfig object from a hit region.\n   */\n  export function createCellConfigObject(\n    grid: DataGrid,\n    hit: DataGrid.HitTestResult\n  ): CellRenderer.CellConfig | undefined {\n    const { region, row, column } = hit;\n\n    // Terminate call if region is void.\n    if (region === 'void') {\n      return undefined;\n    }\n\n    // Augment hit region params with value and metadata.\n    const value = grid.dataModel!.data(region, row, column);\n    const metadata = grid.dataModel!.metadata(region, row, column);\n\n    // Create cell config object to retrieve cell renderer.\n    const config = {\n      ...hit,\n      value: value,\n      metadata: metadata\n    } as CellRenderer.CellConfig;\n\n    return config;\n  }\n\n  /**\n   * Get the resize handle for a grid hit test.\n   */\n  export function resizeHandleForHitTest(\n    hit: DataGrid.HitTestResult\n  ): ResizeHandle {\n    // Fetch the row and column.\n    let r = hit.row;\n    let c = hit.column;\n\n    // Fetch the leading and trailing sizes.\n    let lw = hit.x;\n    let lh = hit.y;\n    let tw = hit.width - hit.x;\n    let th = hit.height - hit.y;\n\n    // Set up the result variable.\n    let result: ResizeHandle;\n\n    // Dispatch based on hit test region.\n    switch (hit.region) {\n      case 'corner-header':\n        if (c > 0 && lw <= 5) {\n          result = 'left';\n        } else if (tw <= 6) {\n          result = 'right';\n        } else if (r > 0 && lh <= 5) {\n          result = 'top';\n        } else if (th <= 6) {\n          result = 'bottom';\n        } else {\n          result = 'none';\n        }\n        break;\n      case 'column-header':\n        if (c > 0 && lw <= 5) {\n          result = 'left';\n        } else if (tw <= 6) {\n          result = 'right';\n        } else if (r > 0 && lh <= 5) {\n          result = 'top';\n        } else if (th <= 6) {\n          result = 'bottom';\n        } else {\n          result = 'none';\n        }\n        break;\n      case 'row-header':\n        if (c > 0 && lw <= 5) {\n          result = 'left';\n        } else if (tw <= 6) {\n          result = 'right';\n        } else if (r > 0 && lh <= 5) {\n          result = 'top';\n        } else if (th <= 6) {\n          result = 'bottom';\n        } else {\n          result = 'none';\n        }\n        break;\n      case 'body':\n        result = 'none';\n        break;\n      case 'void':\n        result = 'none';\n        break;\n      default:\n        throw 'unreachable';\n    }\n\n    // Return the result.\n    return result;\n  }\n\n  /**\n   * A timer callback for the autoselect loop.\n   *\n   * @param grid - The datagrid of interest.\n   *\n   * @param data - The select data of interest.\n   */\n  export function autoselect(grid: DataGrid, data: PressData.SelectData): void {\n    // Bail early if the timeout has been reset.\n    if (data.timeout < 0) {\n      return;\n    }\n\n    // Fetch the selection model.\n    let model = grid.selectionModel;\n\n    // Bail early if the selection model has been removed.\n    if (!model) {\n      return;\n    }\n\n    // Fetch the current selection.\n    let cs = model.currentSelection();\n\n    // Bail early if there is no current selection.\n    if (!cs) {\n      return;\n    }\n\n    // Fetch local X and Y coordinates of the mouse.\n    let lx = data.localX;\n    let ly = data.localY;\n\n    // Set up the selection variables.\n    let r1 = cs.r1;\n    let c1 = cs.c1;\n    let r2 = cs.r2;\n    let c2 = cs.c2;\n    let cursorRow = model.cursorRow;\n    let cursorColumn = model.cursorColumn;\n    let clear: SelectionModel.ClearMode = 'current';\n\n    // Fetch the grid geometry.\n    let hw = grid.headerWidth;\n    let hh = grid.headerHeight;\n    let vpw = grid.viewportWidth;\n    let vph = grid.viewportHeight;\n\n    // Fetch the selection mode.\n    let mode = model.selectionMode;\n\n    // Update the selection based on the hit region.\n    if (data.region === 'row-header' || mode === 'row') {\n      r2 += ly <= hh ? -1 : ly >= vph ? 1 : 0;\n    } else if (data.region === 'column-header' || mode === 'column') {\n      c2 += lx <= hw ? -1 : lx >= vpw ? 1 : 0;\n    } else {\n      r2 += ly <= hh ? -1 : ly >= vph ? 1 : 0;\n      c2 += lx <= hw ? -1 : lx >= vpw ? 1 : 0;\n    }\n\n    // Update the current selection.\n    model.select({ r1, c1, r2, c2, cursorRow, cursorColumn, clear });\n\n    // Re-fetch the current selection.\n    cs = model.currentSelection();\n\n    // Bail if there is no selection.\n    if (!cs) {\n      return;\n    }\n\n    // Scroll the grid based on the hit region.\n    if (data.region === 'row-header' || mode === 'row') {\n      grid.scrollToRow(cs.r2);\n    } else if (data.region === 'column-header' || mode == 'column') {\n      grid.scrollToColumn(cs.c2);\n    } else if (mode === 'cell') {\n      grid.scrollToCell(cs.r2, cs.c2);\n    }\n\n    // Schedule the next call with the current timeout.\n    setTimeout(() => {\n      autoselect(grid, data);\n    }, data.timeout);\n  }\n\n  /**\n   * Compute the scroll timeout for the given delta distance.\n   *\n   * @param delta - The delta pixels from the origin.\n   *\n   * @returns The scaled timeout in milliseconds.\n   */\n  export function computeTimeout(delta: number): number {\n    return 5 + 120 * (1 - Math.min(128, Math.abs(delta)) / 128);\n  }\n\n  /**\n   * A mapping of resize handle to cursor.\n   */\n  export const cursorMap = {\n    top: 'ns-resize',\n    left: 'ew-resize',\n    right: 'ew-resize',\n    bottom: 'ns-resize',\n    hyperlink: 'pointer',\n    none: 'default'\n  };\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { some } from '@lumino/algorithm';\n\nimport { ISignal, Signal } from '@lumino/signaling';\n\nimport { DataModel } from './datamodel';\n\n/**\n * A base class for creating data grid selection models.\n *\n * #### Notes\n * If the predefined selection models are insufficient for a particular\n * use case, a custom model can be defined which derives from this class.\n */\nexport abstract class SelectionModel {\n  /**\n   * Construct a new selection model.\n   *\n   * @param options - The options for initializing the model.\n   */\n  constructor(options: SelectionModel.IOptions) {\n    this.dataModel = options.dataModel;\n    this._selectionMode = options.selectionMode || 'cell';\n    this.dataModel.changed.connect(this.onDataModelChanged, this);\n  }\n\n  /**\n   * Whether the selection model is empty.\n   *\n   * #### Notes\n   * An empty selection model will yield an empty `selections` iterator.\n   */\n  abstract readonly isEmpty: boolean;\n\n  /**\n   * The row index of the cursor.\n   *\n   * This is `-1` if the selection model is empty.\n   */\n  abstract readonly cursorRow: number;\n\n  /**\n   * The column index of the cursor.\n   *\n   * This is `-1` if the selection model is empty.\n   */\n  abstract readonly cursorColumn: number;\n\n  /**\n   * Move cursor down/up/left/right while making sure it remains\n   * within the bounds of selected rectangles\n   *\n   * @param direction - The direction of the movement.\n   */\n  abstract moveCursorWithinSelections(\n    direction: SelectionModel.CursorMoveDirection\n  ): void;\n\n  /**\n   * Get the current selection in the selection model.\n   *\n   * @returns The current selection or `null`.\n   *\n   * #### Notes\n   * This is the selection which holds the cursor.\n   */\n  abstract currentSelection(): SelectionModel.Selection | null;\n\n  /**\n   * Get an iterator of the selections in the model.\n   *\n   * @returns A new iterator of the selections in the model.\n   *\n   * #### Notes\n   * The data grid will render the selections in order.\n   */\n  abstract selections(): IterableIterator<SelectionModel.Selection>;\n\n  /**\n   * Select the specified cells.\n   *\n   * @param args - The arguments for the selection.\n   */\n  abstract select(args: SelectionModel.SelectArgs): void;\n\n  /**\n   * Clear all selections in the selection model.\n   */\n  abstract clear(): void;\n\n  /**\n   * A signal emitted when the selection model has changed.\n   */\n  get changed(): ISignal<this, void> {\n    return this._changed;\n  }\n\n  /**\n   * The data model associated with the selection model.\n   */\n  readonly dataModel: DataModel;\n\n  /**\n   * Get the selection mode for the model.\n   */\n  get selectionMode(): SelectionModel.SelectionMode {\n    return this._selectionMode;\n  }\n\n  /**\n   * Set the selection mode for the model.\n   *\n   * #### Notes\n   * This will clear the selection model.\n   */\n  set selectionMode(value: SelectionModel.SelectionMode) {\n    // Bail early if the mode does not change.\n    if (this._selectionMode === value) {\n      return;\n    }\n\n    // Update the internal mode.\n    this._selectionMode = value;\n\n    // Clear the current selections.\n    this.clear();\n  }\n\n  /**\n   * Test whether any selection intersects a row.\n   *\n   * @param index - The row index of interest.\n   *\n   * @returns Whether any selection intersects the row.\n   *\n   * #### Notes\n   * This method may be reimplemented in a subclass.\n   */\n  isRowSelected(index: number): boolean {\n    return some(this.selections(), s => Private.containsRow(s, index));\n  }\n\n  /**\n   * Test whether any selection intersects a column.\n   *\n   * @param index - The column index of interest.\n   *\n   * @returns Whether any selection intersects the column.\n   *\n   * #### Notes\n   * This method may be reimplemented in a subclass.\n   */\n  isColumnSelected(index: number): boolean {\n    return some(this.selections(), s => Private.containsColumn(s, index));\n  }\n\n  /**\n   * Test whether any selection intersects a cell.\n   *\n   * @param row - The row index of interest.\n   *\n   * @param column - The column index of interest.\n   *\n   * @returns Whether any selection intersects the cell.\n   *\n   * #### Notes\n   * This method may be reimplemented in a subclass.\n   */\n  isCellSelected(row: number, column: number): boolean {\n    return some(this.selections(), s => Private.containsCell(s, row, column));\n  }\n\n  /**\n   * A signal handler for the data model `changed` signal.\n   *\n   * @param args - The arguments for the signal.\n   *\n   * #### Notes\n   * Selection model implementations should update their selections\n   * in a manner that is relevant for the changes to the data model.\n   *\n   * The default implementation of this method is a no-op.\n   */\n  protected onDataModelChanged(\n    sender: DataModel,\n    args: DataModel.ChangedArgs\n  ): void {\n    // pass\n  }\n\n  /**\n   * Emit the `changed` signal for the selection model.\n   *\n   * #### Notes\n   * Subclasses should call this method whenever the selection model\n   * has changed so that attached data grids can update themselves.\n   */\n  protected emitChanged(): void {\n    this._changed.emit(undefined);\n  }\n\n  private _changed = new Signal<this, void>(this);\n  private _selectionMode: SelectionModel.SelectionMode = 'cell';\n}\n\n/**\n * The namespace for the `SelectionModel` class statics.\n */\nexport namespace SelectionModel {\n  /**\n   * A type alias for the selection mode.\n   */\n  export type SelectionMode = 'row' | 'column' | 'cell';\n\n  /**\n   * A type alias for the cursor move direction.\n   */\n  export type CursorMoveDirection = 'up' | 'down' | 'left' | 'right' | 'none';\n\n  /**\n   * A type alias for the clear mode.\n   */\n  export type ClearMode = 'all' | 'current' | 'none';\n\n  /**\n   * A type alias for the select args.\n   */\n  export type SelectArgs = {\n    /**\n     * The first row of the selection.\n     *\n     * This may be greater than `r2`.\n     */\n    r1: number;\n\n    /**\n     * The first column of the selection.\n     *\n     * This may be greater than `c2`.\n     */\n    c1: number;\n\n    /**\n     * The last row of the selection.\n     *\n     * This may be less than `r1`.\n     */\n    r2: number;\n\n    /**\n     * The last column of the selection.\n     *\n     * This may be less than `c1`.\n     */\n    c2: number;\n\n    /**\n     * The row index for the cursor.\n     *\n     * This should be contained within the selection.\n     */\n    cursorRow: number;\n\n    /**\n     * The column index for the cursor.\n     *\n     * This should be contained within the selection.\n     */\n    cursorColumn: number;\n\n    /**\n     * Which of the existing selections to clear.\n     */\n    clear: ClearMode;\n  };\n\n  /**\n   * A type alias for a selection in a selection model.\n   */\n  export type Selection = {\n    /**\n     * The first row of the selection.\n     *\n     * This may be greater than `r2`.\n     */\n    readonly r1: number;\n\n    /**\n     * The first column of the selection.\n     *\n     * This may be greater than `c2`.\n     */\n    readonly c1: number;\n\n    /**\n     * The last row of the selection.\n     *\n     * This may be less than `r1`.\n     */\n    readonly r2: number;\n\n    /**\n     * The last column of the selection.\n     *\n     * This may be less than `c1`.\n     */\n    readonly c2: number;\n  };\n\n  /**\n   * An options object for initializing a selection model.\n   */\n  export interface IOptions {\n    /**\n     * The data model for the selection model.\n     */\n    dataModel: DataModel;\n\n    /**\n     * The selection mode for the model.\n     *\n     * The default is `'cell'`.\n     */\n    selectionMode?: SelectionMode;\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Test whether a selection contains a given row.\n   */\n  export function containsRow(\n    selection: SelectionModel.Selection,\n    row: number\n  ): boolean {\n    let { r1, r2 } = selection;\n    return (row >= r1 && row <= r2) || (row >= r2 && row <= r1);\n  }\n\n  /**\n   * Test whether a selection contains a given column.\n   */\n  export function containsColumn(\n    selection: SelectionModel.Selection,\n    column: number\n  ): boolean {\n    let { c1, c2 } = selection;\n    return (column >= c1 && column <= c2) || (column >= c2 && column <= c1);\n  }\n\n  /**\n   * Test whether a selection contains a given cell.\n   */\n  export function containsCell(\n    selection: SelectionModel.Selection,\n    row: number,\n    column: number\n  ): boolean {\n    return containsRow(selection, row) && containsColumn(selection, column);\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { DataModel } from './datamodel';\n\nimport { SelectionModel } from './selectionmodel';\n\n/**\n * A basic selection model implementation.\n *\n * #### Notes\n * This selection model is sufficient for most use cases where\n * structural knowledge of the data source is *not* required.\n */\nexport class BasicSelectionModel extends SelectionModel {\n  /**\n   * Whether the selection model is empty.\n   */\n  get isEmpty(): boolean {\n    return this._selections.length === 0;\n  }\n\n  /**\n   * The row index of the cursor.\n   */\n  get cursorRow(): number {\n    return this._cursorRow;\n  }\n\n  /**\n   * The column index of the cursor.\n   */\n  get cursorColumn(): number {\n    return this._cursorColumn;\n  }\n\n  /**\n   * Move cursor down/up/left/right while making sure it remains\n   * within the bounds of selected rectangles\n   *\n   * @param direction - The direction of the movement.\n   */\n  moveCursorWithinSelections(\n    direction: SelectionModel.CursorMoveDirection\n  ): void {\n    // Bail early if there are no selections or no existing cursor\n    if (this.isEmpty || this.cursorRow === -1 || this._cursorColumn === -1) {\n      return;\n    }\n\n    // Bail early if only single cell is selected\n    const firstSelection = this._selections[0];\n    if (\n      this._selections.length === 1 &&\n      firstSelection.r1 === firstSelection.r2 &&\n      firstSelection.c1 === firstSelection.c2\n    ) {\n      return;\n    }\n\n    // start from last selection rectangle\n    if (this._cursorRectIndex === -1) {\n      this._cursorRectIndex = this._selections.length - 1;\n    }\n\n    let cursorRect = this._selections[this._cursorRectIndex];\n    const dr = direction === 'down' ? 1 : direction === 'up' ? -1 : 0;\n    const dc = direction === 'right' ? 1 : direction === 'left' ? -1 : 0;\n    let newRow = this._cursorRow + dr;\n    let newColumn = this._cursorColumn + dc;\n    const r1 = Math.min(cursorRect.r1, cursorRect.r2);\n    const r2 = Math.max(cursorRect.r1, cursorRect.r2);\n    const c1 = Math.min(cursorRect.c1, cursorRect.c2);\n    const c2 = Math.max(cursorRect.c1, cursorRect.c2);\n\n    const moveToNextRect = () => {\n      this._cursorRectIndex =\n        (this._cursorRectIndex + 1) % this._selections.length;\n      cursorRect = this._selections[this._cursorRectIndex];\n      newRow = Math.min(cursorRect.r1, cursorRect.r2);\n      newColumn = Math.min(cursorRect.c1, cursorRect.c2);\n    };\n\n    const moveToPreviousRect = () => {\n      this._cursorRectIndex =\n        this._cursorRectIndex === 0\n          ? this._selections.length - 1\n          : this._cursorRectIndex - 1;\n      cursorRect = this._selections[this._cursorRectIndex];\n      newRow = Math.max(cursorRect.r1, cursorRect.r2);\n      newColumn = Math.max(cursorRect.c1, cursorRect.c2);\n    };\n\n    if (newRow > r2) {\n      newRow = r1;\n      newColumn += 1;\n      if (newColumn > c2) {\n        moveToNextRect();\n      }\n    } else if (newRow < r1) {\n      newRow = r2;\n      newColumn -= 1;\n      if (newColumn < c1) {\n        moveToPreviousRect();\n      }\n    } else if (newColumn > c2) {\n      newColumn = c1;\n      newRow += 1;\n      if (newRow > r2) {\n        moveToNextRect();\n      }\n    } else if (newColumn < c1) {\n      newColumn = c2;\n      newRow -= 1;\n      if (newRow < r1) {\n        moveToPreviousRect();\n      }\n    }\n\n    this._cursorRow = newRow;\n    this._cursorColumn = newColumn;\n\n    // Emit the changed signal.\n    this.emitChanged();\n  }\n\n  /**\n   * Get the current selection in the selection model.\n   *\n   * @returns The current selection or `null`.\n   *\n   * #### Notes\n   * This is the selection which holds the cursor.\n   */\n  currentSelection(): SelectionModel.Selection | null {\n    return this._selections[this._selections.length - 1] || null;\n  }\n\n  /**\n   * Get an iterator of the selections in the model.\n   *\n   * @returns A new iterator of the current selections.\n   *\n   * #### Notes\n   * The data grid will render the selections in order.\n   */\n  *selections(): IterableIterator<SelectionModel.Selection> {\n    yield* this._selections;\n  }\n\n  /**\n   * Select the specified cells.\n   *\n   * @param args - The arguments for the selection.\n   */\n  select(args: SelectionModel.SelectArgs): void {\n    // Fetch the current row and column counts;\n    let rowCount = this.dataModel.rowCount('body');\n    let columnCount = this.dataModel.columnCount('body');\n\n    // Bail early if there is no content.\n    if (rowCount <= 0 || columnCount <= 0) {\n      return;\n    }\n\n    // Unpack the arguments.\n    let { r1, c1, r2, c2, cursorRow, cursorColumn, clear } = args;\n\n    // Clear the necessary selections.\n    if (clear === 'all') {\n      this._selections.length = 0;\n    } else if (clear === 'current') {\n      this._selections.pop();\n    }\n\n    // Clamp to the data model bounds.\n    r1 = Math.max(0, Math.min(r1, rowCount - 1));\n    r2 = Math.max(0, Math.min(r2, rowCount - 1));\n    c1 = Math.max(0, Math.min(c1, columnCount - 1));\n    c2 = Math.max(0, Math.min(c2, columnCount - 1));\n\n    // Indicate if a row/column has already been selected.\n    let alreadySelected = false;\n\n    // Handle the selection mode.\n    if (this.selectionMode === 'row') {\n      c1 = 0;\n      c2 = columnCount - 1;\n      alreadySelected =\n        this._selections.filter(selection => selection.r1 === r1).length !== 0;\n      // Remove from selections if already selected.\n      this._selections = alreadySelected\n        ? this._selections.filter(selection => selection.r1 !== r1)\n        : this._selections;\n    } else if (this.selectionMode === 'column') {\n      r1 = 0;\n      r2 = rowCount - 1;\n      alreadySelected =\n        this._selections.filter(selection => selection.c1 === c1).length !== 0;\n      // Remove from selections if already selected.\n      this._selections = alreadySelected\n        ? this._selections.filter(selection => selection.c1 !== c1)\n        : this._selections;\n    }\n\n    // Alias the cursor row and column.\n    let cr = cursorRow;\n    let cc = cursorColumn;\n\n    // Compute the new cursor location.\n    if (cr < 0 || (cr < r1 && cr < r2) || (cr > r1 && cr > r2)) {\n      cr = r1;\n    }\n    if (cc < 0 || (cc < c1 && cc < c2) || (cc > c1 && cc > c2)) {\n      cc = c1;\n    }\n\n    // Update the cursor.\n    this._cursorRow = cr;\n    this._cursorColumn = cc;\n    this._cursorRectIndex = this._selections.length;\n\n    // Add the new selection if it wasn't already selected.\n    if (!alreadySelected) {\n      this._selections.push({ r1, c1, r2, c2 });\n    }\n\n    // Emit the changed signal.\n    this.emitChanged();\n  }\n\n  /**\n   * Clear all selections in the selection model.\n   */\n  clear(): void {\n    // Bail early if there are no selections.\n    if (this._selections.length === 0) {\n      return;\n    }\n\n    // Reset the internal state.\n    this._cursorRow = -1;\n    this._cursorColumn = -1;\n    this._cursorRectIndex = -1;\n    this._selections.length = 0;\n\n    // Emit the changed signal.\n    this.emitChanged();\n  }\n\n  /**\n   * A signal handler for the data model `changed` signal.\n   *\n   * @param args - The arguments for the signal.\n   */\n  protected onDataModelChanged(\n    sender: DataModel,\n    args: DataModel.ChangedArgs\n  ): void {\n    // Bail early if the model has no current selections.\n    if (this._selections.length === 0) {\n      return;\n    }\n\n    // Bail early if the cells have changed in place.\n    if (args.type === 'cells-changed') {\n      return;\n    }\n\n    // Bail early if there is no change to the row or column count.\n    if (args.type === 'rows-moved' || args.type === 'columns-moved') {\n      return;\n    }\n\n    // Fetch the last row and column index.\n    let lr = sender.rowCount('body') - 1;\n    let lc = sender.columnCount('body') - 1;\n\n    // Bail early if the data model is empty.\n    if (lr < 0 || lc < 0) {\n      this._selections.length = 0;\n      this.emitChanged();\n      return;\n    }\n\n    // Fetch the selection mode.\n    let mode = this.selectionMode;\n\n    // Set up the assignment index variable.\n    let j = 0;\n\n    // Iterate over the current selections.\n    for (let i = 0, n = this._selections.length; i < n; ++i) {\n      // Unpack the selection.\n      let { r1, c1, r2, c2 } = this._selections[i];\n\n      // Skip the selection if it will disappear.\n      if ((lr < r1 && lr < r2) || (lc < c1 && lc < c2)) {\n        continue;\n      }\n\n      // Modify the bounds based on the selection mode.\n      if (mode === 'row') {\n        r1 = Math.max(0, Math.min(r1, lr));\n        r2 = Math.max(0, Math.min(r2, lr));\n        c1 = 0;\n        c2 = lc;\n      } else if (mode === 'column') {\n        r1 = 0;\n        r2 = lr;\n        c1 = Math.max(0, Math.min(c1, lc));\n        c2 = Math.max(0, Math.min(c2, lc));\n      } else {\n        r1 = Math.max(0, Math.min(r1, lr));\n        r2 = Math.max(0, Math.min(r2, lr));\n        c1 = Math.max(0, Math.min(c1, lc));\n        c2 = Math.max(0, Math.min(c2, lc));\n      }\n\n      // Assign the modified selection to the array.\n      this._selections[j++] = { r1, c1, r2, c2 };\n    }\n\n    // Remove the stale selections.\n    this._selections.length = j;\n\n    // Emit the changed signal.\n    this.emitChanged();\n  }\n\n  private _cursorRow = -1;\n  private _cursorColumn = -1;\n  private _cursorRectIndex = -1;\n  private _selections: SelectionModel.Selection[] = [];\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2023, Lumino Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n\nimport { CellRenderer } from './cellrenderer';\nimport { GraphicsContext } from './graphicscontext';\n\n/**\n * An object which renders the cells of a data grid asynchronously.\n *\n * #### Notes\n * For performance reason, the datagrid only paints cells synchronously,\n * though if your cell renderer inherits from AsyncCellRenderer, you will\n * be able to do some asynchronous work prior to painting the cell.\n * See `ImageRenderer` for an example of an asynchronous renderer.\n */\nexport abstract class AsyncCellRenderer extends CellRenderer {\n  /**\n   * Whether the renderer is ready or not for that specific config.\n   * If it's not ready, the datagrid will paint the placeholder using `paintPlaceholder`.\n   * If it's ready, the datagrid will paint the cell synchronously using `paint`.\n   *\n   * @param config - The configuration data for the cell.\n   *\n   * @returns Whether the renderer is ready for this config or not.\n   */\n  abstract isReady(config: CellRenderer.CellConfig): boolean;\n\n  /**\n   * Do any asynchronous work prior to painting this cell config.\n   *\n   * @param config - The configuration data for the cell.\n   */\n  abstract load(config: CellRenderer.CellConfig): Promise<void>;\n\n  /**\n   * Paint the placeholder for a cell, waiting for the renderer to be ready.\n   *\n   * @param gc - The graphics context to use for drawing.\n   *\n   * @param config - The configuration data for the cell.\n   */\n  abstract paintPlaceholder(\n    gc: GraphicsContext,\n    config: CellRenderer.CellConfig\n  ): void;\n}\n","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IDisposable } from '@lumino/disposable';\n\nimport { Message } from '@lumino/messaging';\n\nimport { Widget } from '@lumino/widgets';\n\nimport { DataGrid } from './datagrid';\n\nimport { SelectionModel } from './selectionmodel';\n\nimport { getKeyboardLayout } from '@lumino/keyboard';\n\nimport { Signal } from '@lumino/signaling';\n\nimport { CellGroup } from './cellgroup';\n\n/**\n * A response object returned from cell input validator\n */\nexport interface ICellInputValidatorResponse {\n  /**\n   * Flag indicating cell input is valid or not\n   */\n  valid: boolean;\n  /**\n   * Validation error message. Set only when input is invalid\n   */\n  message?: string;\n}\n\n/**\n * An object which validates cell input values.\n */\nexport interface ICellInputValidator {\n  /**\n   * Validate cell input.\n   *\n   * @param cell - The object holding cell configuration data.\n   *\n   * @param value - The cell value input.\n   *\n   * @returns An object with validation result.\n   */\n  validate(\n    cell: CellEditor.CellConfig,\n    value: any\n  ): ICellInputValidatorResponse;\n}\n\n/**\n * An object returned from cell editor after a successful edit.\n */\nexport interface ICellEditResponse {\n  /**\n   * An object which holds the configuration data for a cell.\n   */\n  cell: CellEditor.CellConfig;\n  /**\n   * Value input.\n   */\n  value: any;\n  /**\n   * Cursor move direction based on keys pressed to end the edit.\n   */\n  cursorMovement: SelectionModel.CursorMoveDirection;\n}\n\n/**\n * An object implementing cell editing.\n */\nexport interface ICellEditor {\n  /**\n   * Start editing the cell.\n   *\n   * @param cell - The object holding cell configuration data.\n   *\n   * @param options - The cell editing options.\n   */\n  edit(cell: CellEditor.CellConfig, options?: ICellEditOptions): void;\n  /**\n   * Cancel editing the cell.\n   */\n  cancel(): void;\n}\n\n// default validation error message\nconst DEFAULT_INVALID_INPUT_MESSAGE = 'Invalid input!';\n\n// A type alias for available cell data types\nexport type CellDataType =\n  | 'string'\n  | 'number'\n  | 'integer'\n  | 'boolean'\n  | 'date'\n  | 'string:option'\n  | 'number:option'\n  | 'integer:option'\n  | 'date:option'\n  | 'string:dynamic-option'\n  | 'number:dynamic-option'\n  | 'integer:dynamic-option'\n  | 'date:dynamic-option';\n\n/**\n * An object containing cell editing options.\n */\nexport interface ICellEditOptions {\n  /**\n   * Cell editor to use for editing.\n   *\n   * #### Notes\n   * This object is only used by cell editor controller.\n   * If not set, controller picks the most suitable editor\n   * for the particular cell configuration.\n   */\n  editor?: ICellEditor;\n  /**\n   * Cell input validator to use for value validation.\n   */\n  validator?: ICellInputValidator;\n  /**\n   * Callback method to call on cell edit commit.\n   */\n  onCommit?: (response: ICellEditResponse) => void;\n  /**\n   * Callback method to call on cell edit cancel.\n   */\n  onCancel?: () => void;\n}\n\n/**\n * A cell input validator object which always returns valid.\n */\nexport class PassInputValidator implements ICellInputValidator {\n  /**\n   * Validate cell input.\n   *\n   * @param cell - The object holding cell configuration data.\n   *\n   * @param value - The cell value input.\n   *\n   * @returns An object with validation result.\n   */\n  validate(\n    cell: CellEditor.CellConfig,\n    value: unknown\n  ): ICellInputValidatorResponse {\n    return { valid: true };\n  }\n}\n\n/**\n * Text cell input validator.\n */\nexport class TextInputValidator implements ICellInputValidator {\n  /**\n   * Validate cell input.\n   *\n   * @param cell - The object holding cell configuration data.\n   *\n   * @param value - The cell value input.\n   *\n   * @returns An object with validation result.\n   */\n  validate(\n    cell: CellEditor.CellConfig,\n    value: string\n  ): ICellInputValidatorResponse {\n    if (value === null) {\n      return { valid: true };\n    }\n\n    if (typeof value !== 'string') {\n      return {\n        valid: false,\n        message: 'Input must be valid text'\n      };\n    }\n\n    if (!isNaN(this.minLength) && value.length < this.minLength) {\n      return {\n        valid: false,\n        message: `Text length must be greater than ${this.minLength}`\n      };\n    }\n\n    if (!isNaN(this.maxLength) && value.length > this.maxLength) {\n      return {\n        valid: false,\n        message: `Text length must be less than ${this.maxLength}`\n      };\n    }\n\n    if (this.pattern && !this.pattern.test(value)) {\n      return {\n        valid: false,\n        message: `Text doesn't match the required pattern`\n      };\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Minimum text length\n   *\n   * The default is Number.NaN, meaning no minimum constraint\n   */\n  minLength: number = Number.NaN;\n  /**\n   * Maximum text length\n   *\n   * The default is Number.NaN, meaning no maximum constraint\n   */\n  maxLength: number = Number.NaN;\n  /**\n   * Required text pattern as regular expression\n   *\n   * The default is null, meaning no pattern constraint\n   */\n  pattern: RegExp | null = null;\n}\n\n/**\n * Integer cell input validator.\n */\nexport class IntegerInputValidator implements ICellInputValidator {\n  /**\n   * Validate cell input.\n   *\n   * @param cell - The object holding cell configuration data.\n   *\n   * @param value - The cell value input.\n   *\n   * @returns An object with validation result.\n   */\n  validate(\n    cell: CellEditor.CellConfig,\n    value: number\n  ): ICellInputValidatorResponse {\n    if (value === null) {\n      return { valid: true };\n    }\n\n    if (isNaN(value) || value % 1 !== 0) {\n      return {\n        valid: false,\n        message: 'Input must be valid integer'\n      };\n    }\n\n    if (!isNaN(this.min) && value < this.min) {\n      return {\n        valid: false,\n        message: `Input must be greater than ${this.min}`\n      };\n    }\n\n    if (!isNaN(this.max) && value > this.max) {\n      return {\n        valid: false,\n        message: `Input must be less than ${this.max}`\n      };\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Minimum value\n   *\n   * The default is Number.NaN, meaning no minimum constraint\n   */\n  min: number = Number.NaN;\n  /**\n   * Maximum value\n   *\n   * The default is Number.NaN, meaning no maximum constraint\n   */\n  max: number = Number.NaN;\n}\n\n/**\n * Real number cell input validator.\n */\nexport class NumberInputValidator implements ICellInputValidator {\n  /**\n   * Validate cell input.\n   *\n   * @param cell - The object holding cell configuration data.\n   *\n   * @param value - The cell value input.\n   *\n   * @returns An object with validation result.\n   */\n  validate(\n    cell: CellEditor.CellConfig,\n    value: number\n  ): ICellInputValidatorResponse {\n    if (value === null) {\n      return { valid: true };\n    }\n\n    if (isNaN(value)) {\n      return {\n        valid: false,\n        message: 'Input must be valid number'\n      };\n    }\n\n    if (!isNaN(this.min) && value < this.min) {\n      return {\n        valid: false,\n        message: `Input must be greater than ${this.min}`\n      };\n    }\n\n    if (!isNaN(this.max) && value > this.max) {\n      return {\n        valid: false,\n        message: `Input must be less than ${this.max}`\n      };\n    }\n\n    return { valid: true };\n  }\n\n  /**\n   * Minimum value\n   *\n   * The default is Number.NaN, meaning no minimum constraint\n   */\n  min: number = Number.NaN;\n  /**\n   * Maximum value\n   *\n   * The default is Number.NaN, meaning no maximum constraint\n   */\n  max: number = Number.NaN;\n}\n\n/**\n * An abstract base class that provides the most of the functionality\n * needed by a cell editor. All of the built-in cell editors\n * for various cell types are derived from this base class. Custom cell editors\n * can be easily implemented by extending this class.\n */\nexport abstract class CellEditor implements ICellEditor, IDisposable {\n  /**\n   * Construct a new cell editor.\n   */\n  constructor() {\n    this.inputChanged.connect(() => {\n      this.validate();\n    });\n  }\n\n  /**\n   * Whether the cell editor is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._disposed;\n  }\n\n  /**\n   * Dispose of the resources held by cell editor.\n   */\n  dispose(): void {\n    if (this._disposed) {\n      return;\n    }\n\n    if (this._gridWheelEventHandler) {\n      this.cell.grid.node.removeEventListener(\n        'wheel',\n        this._gridWheelEventHandler\n      );\n      this._gridWheelEventHandler = null;\n    }\n\n    this._closeValidityNotification();\n\n    this._disposed = true;\n    this.cell.grid.node.removeChild(this.viewportOccluder);\n  }\n\n  /**\n   * Start editing the cell.\n   *\n   * @param cell - The object holding cell configuration data.\n   *\n   * @param options - The cell editing options.\n   */\n  edit(cell: CellEditor.CellConfig, options?: ICellEditOptions): void {\n    this.cell = cell;\n    this.onCommit = options && options.onCommit;\n    this.onCancel = options && options.onCancel;\n\n    this.validator =\n      options && options.validator\n        ? options.validator\n        : this.createValidatorBasedOnType();\n\n    this._gridWheelEventHandler = () => {\n      this._closeValidityNotification();\n      this.updatePosition();\n    };\n\n    cell.grid.node.addEventListener('wheel', this._gridWheelEventHandler);\n\n    this._addContainer();\n\n    this.updatePosition();\n    this.startEditing();\n  }\n\n  /**\n   * Cancel editing the cell.\n   */\n  cancel(): void {\n    if (this._disposed) {\n      return;\n    }\n\n    this.dispose();\n    if (this.onCancel) {\n      this.onCancel();\n    }\n  }\n\n  /**\n   * Start editing the cell. Usually an editor widget is created and\n   *  added to `editorContainer`\n   */\n  protected abstract startEditing(): void;\n  /**\n   * Return the current input entered. This method throws exceptions\n   * if input is invalid. Error message in exception is shown as notification.\n   */\n  protected abstract getInput(): any;\n\n  /**\n   * Whether the value input is valid.\n   */\n  protected get validInput(): boolean {\n    return this._validInput;\n  }\n\n  /**\n   * Validate the cell input. Shows validation error notification when input is invalid.\n   */\n  protected validate(): void {\n    let value;\n    try {\n      value = this.getInput();\n    } catch (error) {\n      console.log(`Input error: ${error.message}`);\n      this.setValidity(false, error.message || DEFAULT_INVALID_INPUT_MESSAGE);\n      return;\n    }\n\n    if (this.validator) {\n      const result = this.validator.validate(this.cell, value);\n      if (result.valid) {\n        this.setValidity(true);\n      } else {\n        this.setValidity(\n          false,\n          result.message || DEFAULT_INVALID_INPUT_MESSAGE\n        );\n      }\n    } else {\n      this.setValidity(true);\n    }\n  }\n\n  /**\n   * Set validity flag.\n   *\n   * @param valid - Whether the input is valid.\n   *\n   * @param message - Notification message to show.\n   *\n   * If message is set to empty string (which is the default)\n   * existing notification popup is removed if any.\n   */\n  protected setValidity(valid: boolean, message: string = ''): void {\n    this._validInput = valid;\n\n    this._closeValidityNotification();\n\n    if (valid) {\n      this.editorContainer.classList.remove('lm-mod-invalid');\n    } else {\n      this.editorContainer.classList.add('lm-mod-invalid');\n\n      // show a notification popup\n      if (message !== '') {\n        this.validityNotification = new CellEditor.Notification({\n          target: this.editorContainer,\n          message: message,\n          placement: 'bottom',\n          timeout: 5000\n        });\n        this.validityNotification.show();\n      }\n    }\n  }\n\n  /**\n   * Create and return a cell input validator based on configuration of the\n   * cell being edited. If no suitable validator can be found, it returns undefined.\n   */\n  protected createValidatorBasedOnType(): ICellInputValidator | undefined {\n    const cell = this.cell;\n    const metadata = cell.grid.dataModel!.metadata(\n      'body',\n      cell.row,\n      cell.column\n    );\n\n    switch (metadata && metadata.type) {\n      case 'string':\n        {\n          const validator = new TextInputValidator();\n          if (typeof metadata!.format === 'string') {\n            const format = metadata!.format;\n            switch (format) {\n              case 'email':\n                validator.pattern = new RegExp(\n                  '^([a-z0-9_.-]+)@([da-z.-]+).([a-z.]{2,6})$'\n                );\n                break;\n              case 'uuid':\n                validator.pattern = new RegExp(\n                  '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'\n                );\n                break;\n              case 'uri':\n                // TODO\n                break;\n              case 'binary':\n                // TODO\n                break;\n            }\n          }\n\n          if (metadata!.constraint) {\n            if (metadata!.constraint.minLength !== undefined) {\n              validator.minLength = metadata!.constraint.minLength;\n            }\n            if (metadata!.constraint.maxLength !== undefined) {\n              validator.maxLength = metadata!.constraint.maxLength;\n            }\n            if (typeof metadata!.constraint.pattern === 'string') {\n              validator.pattern = new RegExp(metadata!.constraint.pattern);\n            }\n          }\n          return validator;\n        }\n        break;\n      case 'number':\n        {\n          const validator = new NumberInputValidator();\n          if (metadata!.constraint) {\n            if (metadata!.constraint.minimum !== undefined) {\n              validator.min = metadata!.constraint.minimum;\n            }\n            if (metadata!.constraint.maximum !== undefined) {\n              validator.max = metadata!.constraint.maximum;\n            }\n          }\n          return validator;\n        }\n        break;\n      case 'integer':\n        {\n          const validator = new IntegerInputValidator();\n          if (metadata!.constraint) {\n            if (metadata!.constraint.minimum !== undefined) {\n              validator.min = metadata!.constraint.minimum;\n            }\n            if (metadata!.constraint.maximum !== undefined) {\n              validator.max = metadata!.constraint.maximum;\n            }\n          }\n          return validator;\n        }\n        break;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Compute cell rectangle and return with other cell properties.\n   */\n  protected getCellInfo(cell: CellEditor.CellConfig): Private.ICellInfo {\n    const { grid, row, column } = cell;\n    let data, columnX, rowY, width, height;\n    const cellGroup = CellGroup.getGroup(grid.dataModel!, 'body', row, column);\n\n    if (cellGroup) {\n      columnX =\n        grid.headerWidth -\n        grid.scrollX +\n        grid.columnOffset('body', cellGroup.c1);\n      rowY =\n        grid.headerHeight - grid.scrollY + grid.rowOffset('body', cellGroup.r1);\n      width = 0;\n      height = 0;\n\n      for (let r = cellGroup.r1; r <= cellGroup.r2; r++) {\n        height += grid.rowSize('body', r);\n      }\n\n      for (let c = cellGroup.c1; c <= cellGroup.c2; c++) {\n        width += grid.columnSize('body', c);\n      }\n\n      data = grid.dataModel!.data('body', cellGroup.r1, cellGroup.c1);\n    } else {\n      columnX =\n        grid.headerWidth - grid.scrollX + grid.columnOffset('body', column);\n      rowY = grid.headerHeight - grid.scrollY + grid.rowOffset('body', row);\n      width = grid.columnSize('body', column);\n      height = grid.rowSize('body', row);\n      data = grid.dataModel!.data('body', row, column);\n    }\n\n    return {\n      grid: grid,\n      row: row,\n      column: column,\n      data: data,\n      x: columnX,\n      y: rowY,\n      width: width,\n      height: height\n    };\n  }\n\n  /**\n   * Reposition cell editor by moving viewport occluder and cell editor container.\n   */\n  protected updatePosition(): void {\n    const grid = this.cell.grid;\n    const cellInfo = this.getCellInfo(this.cell);\n    const headerHeight = grid.headerHeight;\n    const headerWidth = grid.headerWidth;\n\n    this.viewportOccluder.style.top = headerHeight + 'px';\n    this.viewportOccluder.style.left = headerWidth + 'px';\n    this.viewportOccluder.style.width = grid.viewportWidth - headerWidth + 'px';\n    this.viewportOccluder.style.height =\n      grid.viewportHeight - headerHeight + 'px';\n    this.viewportOccluder.style.position = 'absolute';\n\n    this.editorContainer.style.left = cellInfo.x - 1 - headerWidth + 'px';\n    this.editorContainer.style.top = cellInfo.y - 1 - headerHeight + 'px';\n    this.editorContainer.style.width = cellInfo.width + 1 + 'px';\n    this.editorContainer.style.height = cellInfo.height + 1 + 'px';\n    this.editorContainer.style.visibility = 'visible';\n    this.editorContainer.style.position = 'absolute';\n  }\n\n  /**\n   * Commit the edited value.\n   *\n   * @param cursorMovement - Cursor move direction based on keys pressed to end the edit.\n   *\n   * @returns true on valid input, false otherwise.\n   */\n  protected commit(\n    cursorMovement: SelectionModel.CursorMoveDirection = 'none'\n  ): boolean {\n    this.validate();\n\n    if (!this._validInput) {\n      return false;\n    }\n\n    let value;\n    try {\n      value = this.getInput();\n    } catch (error) {\n      console.log(`Input error: ${error.message}`);\n      return false;\n    }\n\n    this.dispose();\n\n    if (this.onCommit) {\n      this.onCommit({\n        cell: this.cell,\n        value: value,\n        cursorMovement: cursorMovement\n      });\n    }\n\n    return true;\n  }\n\n  /**\n   * Create container elements needed to prevent editor widget overflow\n   * beyond viewport and to position cell editor widget.\n   */\n  private _addContainer() {\n    this.viewportOccluder = document.createElement('div');\n    this.viewportOccluder.className = 'lm-DataGrid-cellEditorOccluder';\n    this.cell.grid.node.appendChild(this.viewportOccluder);\n\n    this.editorContainer = document.createElement('div');\n    this.editorContainer.className = 'lm-DataGrid-cellEditorContainer';\n    this.viewportOccluder.appendChild(this.editorContainer);\n\n    // update mouse event pass-through state based on input validity\n    this.editorContainer.addEventListener('mouseleave', (event: MouseEvent) => {\n      this.viewportOccluder.style.pointerEvents = this._validInput\n        ? 'none'\n        : 'auto';\n    });\n    this.editorContainer.addEventListener('mouseenter', (event: MouseEvent) => {\n      this.viewportOccluder.style.pointerEvents = 'none';\n    });\n  }\n\n  /**\n   * Remove validity notification popup.\n   */\n  private _closeValidityNotification() {\n    if (this.validityNotification) {\n      this.validityNotification.close();\n      this.validityNotification = null;\n    }\n  }\n\n  /**\n   * A signal emitted when input changes.\n   */\n  protected inputChanged = new Signal<this, void>(this);\n  /**\n   * Callback method to call on cell edit commit.\n   */\n  protected onCommit?: (response: ICellEditResponse) => void;\n  /**\n   * Callback method to call on cell edit cancel.\n   */\n  protected onCancel?: () => void;\n  /**\n   * Cell configuration data for the cell being edited.\n   */\n  protected cell: CellEditor.CellConfig;\n  /**\n   * Cell input validator to use for the cell being edited.\n   */\n  protected validator: ICellInputValidator | undefined;\n  /**\n   * The div element used to prevent editor widget overflow beyond grid viewport.\n   */\n  protected viewportOccluder: HTMLDivElement;\n  /**\n   * The div element used to contain and position editor widget.\n   */\n  protected editorContainer: HTMLDivElement;\n  /**\n   * Notification popup used to show validation error messages.\n   */\n  protected validityNotification: CellEditor.Notification | null = null;\n  /**\n   * Whether the cell editor is disposed.\n   */\n  private _disposed = false;\n  /**\n   * Whether the value input is valid.\n   */\n  private _validInput: boolean = true;\n  /**\n   * Grid wheel event handler.\n   */\n  private _gridWheelEventHandler:\n    | ((this: HTMLElement, ev: WheelEvent) => any)\n    | null = null;\n}\n\n/**\n * Abstract base class with shared functionality\n * for cell editors which use HTML Input widget as editor.\n */\nexport abstract class InputCellEditor extends CellEditor {\n  /**\n   * Handle the DOM events for the editor.\n   *\n   * @param event - The DOM event sent to the editor.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'keydown':\n        this._onKeyDown(event as KeyboardEvent);\n        break;\n      case 'blur':\n        this._onBlur(event as FocusEvent);\n        break;\n      case 'input':\n        this._onInput(event);\n        break;\n    }\n  }\n\n  /**\n   * Dispose of the resources held by cell editor.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n\n    this._unbindEvents();\n\n    super.dispose();\n  }\n\n  /**\n   * Start editing the cell.\n   */\n  protected startEditing(): void {\n    this.createWidget();\n\n    const cell = this.cell;\n    const cellInfo = this.getCellInfo(cell);\n    this.input.value = this.deserialize(cellInfo.data);\n    this.editorContainer.appendChild(this.input);\n    this.input.focus();\n    this.input.select();\n\n    this.bindEvents();\n  }\n\n  protected deserialize(value: unknown): any {\n    if (value === null || value === undefined) {\n      return '';\n    }\n\n    return (value as any).toString();\n  }\n\n  protected createWidget(): void {\n    const input = document.createElement('input');\n    input.classList.add('lm-DataGrid-cellEditorWidget');\n    input.classList.add('lm-DataGrid-cellEditorInput');\n    input.spellcheck = false;\n    input.type = this.inputType;\n\n    this.input = input;\n  }\n\n  protected bindEvents(): void {\n    this.input.addEventListener('keydown', this);\n    this.input.addEventListener('blur', this);\n    this.input.addEventListener('input', this);\n  }\n\n  private _unbindEvents() {\n    this.input.removeEventListener('keydown', this);\n    this.input.removeEventListener('blur', this);\n    this.input.removeEventListener('input', this);\n  }\n\n  private _onKeyDown(event: KeyboardEvent) {\n    switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n      case 'Enter':\n        this.commit(event.shiftKey ? 'up' : 'down');\n        break;\n      case 'Tab':\n        this.commit(event.shiftKey ? 'left' : 'right');\n        event.stopPropagation();\n        event.preventDefault();\n        break;\n      case 'Escape':\n        this.cancel();\n        break;\n      default:\n        break;\n    }\n  }\n\n  private _onBlur(event: FocusEvent) {\n    if (this.isDisposed) {\n      return;\n    }\n\n    if (!this.commit()) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.input.focus();\n    }\n  }\n\n  private _onInput(event: Event) {\n    this.inputChanged.emit(void 0);\n  }\n\n  protected input: HTMLInputElement;\n  protected abstract inputType: string;\n}\n\n/**\n * Cell editor for text cells.\n */\nexport class TextCellEditor extends InputCellEditor {\n  /**\n   * Return the current text input entered.\n   */\n  protected getInput(): string | null {\n    return this.input.value;\n  }\n\n  protected inputType: string = 'text';\n}\n\n/**\n * Cell editor for real number cells.\n */\nexport class NumberCellEditor extends InputCellEditor {\n  /**\n   * Start editing the cell.\n   */\n  protected startEditing(): void {\n    super.startEditing();\n\n    this.input.step = 'any';\n\n    const cell = this.cell;\n\n    const metadata = cell.grid.dataModel!.metadata(\n      'body',\n      cell.row,\n      cell.column\n    );\n    const constraint = metadata.constraint;\n    if (constraint) {\n      if (constraint.minimum) {\n        this.input.min = constraint.minimum;\n      }\n      if (constraint.maximum) {\n        this.input.max = constraint.maximum;\n      }\n    }\n  }\n\n  /**\n   * Return the current number input entered. This method throws exception\n   * if input is invalid.\n   */\n  protected getInput(): number | null {\n    let value = this.input.value;\n    if (value.trim() === '') {\n      return null;\n    }\n\n    const floatValue = parseFloat(value);\n    if (isNaN(floatValue)) {\n      throw new Error('Invalid input');\n    }\n\n    return floatValue;\n  }\n\n  protected inputType: string = 'number';\n}\n\n/**\n * Cell editor for integer cells.\n */\nexport class IntegerCellEditor extends InputCellEditor {\n  /**\n   * Start editing the cell.\n   */\n  protected startEditing(): void {\n    super.startEditing();\n\n    this.input.step = '1';\n\n    const cell = this.cell;\n\n    const metadata = cell.grid.dataModel!.metadata(\n      'body',\n      cell.row,\n      cell.column\n    );\n    const constraint = metadata.constraint;\n    if (constraint) {\n      if (constraint.minimum) {\n        this.input.min = constraint.minimum;\n      }\n      if (constraint.maximum) {\n        this.input.max = constraint.maximum;\n      }\n    }\n  }\n\n  /**\n   * Return the current integer input entered. This method throws exception\n   * if input is invalid.\n   */\n  protected getInput(): number | null {\n    let value = this.input.value;\n    if (value.trim() === '') {\n      return null;\n    }\n\n    let intValue = parseInt(value);\n    if (isNaN(intValue)) {\n      throw new Error('Invalid input');\n    }\n\n    return intValue;\n  }\n\n  protected inputType: string = 'number';\n}\n\n/**\n * Cell editor for date cells.\n */\nexport class DateCellEditor extends CellEditor {\n  /**\n   * Handle the DOM events for the editor.\n   *\n   * @param event - The DOM event sent to the editor.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'keydown':\n        this._onKeyDown(event as KeyboardEvent);\n        break;\n      case 'blur':\n        this._onBlur(event as FocusEvent);\n        break;\n    }\n  }\n\n  /**\n   * Dispose of the resources held by cell editor.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n\n    this._unbindEvents();\n\n    super.dispose();\n  }\n\n  /**\n   * Start editing the cell.\n   */\n  protected startEditing(): void {\n    this._createWidget();\n\n    const cell = this.cell;\n    const cellInfo = this.getCellInfo(cell);\n    this._input.value = this._deserialize(cellInfo.data);\n    this.editorContainer.appendChild(this._input);\n    this._input.focus();\n\n    this._bindEvents();\n  }\n\n  /**\n   * Return the current date input entered.\n   */\n  protected getInput(): string | null {\n    return this._input.value;\n  }\n\n  private _deserialize(value: any): any {\n    if (value === null || value === undefined) {\n      return '';\n    }\n\n    return value.toString();\n  }\n\n  private _createWidget() {\n    const input = document.createElement('input');\n    input.type = 'date';\n    input.pattern = 'd{4}-d{2}-d{2}';\n    input.classList.add('lm-DataGrid-cellEditorWidget');\n    input.classList.add('lm-DataGrid-cellEditorInput');\n\n    this._input = input;\n  }\n\n  private _bindEvents() {\n    this._input.addEventListener('keydown', this);\n    this._input.addEventListener('blur', this);\n  }\n\n  private _unbindEvents() {\n    this._input.removeEventListener('keydown', this);\n    this._input.removeEventListener('blur', this);\n  }\n\n  private _onKeyDown(event: KeyboardEvent) {\n    switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n      case 'Enter':\n        this.commit(event.shiftKey ? 'up' : 'down');\n        break;\n      case 'Tab':\n        this.commit(event.shiftKey ? 'left' : 'right');\n        event.stopPropagation();\n        event.preventDefault();\n        break;\n      case 'Escape':\n        this.cancel();\n        break;\n      default:\n        break;\n    }\n  }\n\n  private _onBlur(event: FocusEvent) {\n    if (this.isDisposed) {\n      return;\n    }\n\n    if (!this.commit()) {\n      event.preventDefault();\n      event.stopPropagation();\n      this._input.focus();\n    }\n  }\n\n  private _input: HTMLInputElement;\n}\n\n/**\n * Cell editor for boolean cells.\n */\nexport class BooleanCellEditor extends CellEditor {\n  /**\n   * Handle the DOM events for the editor.\n   *\n   * @param event - The DOM event sent to the editor.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'keydown':\n        this._onKeyDown(event as KeyboardEvent);\n        break;\n      case 'mousedown':\n        // fix focus loss problem in Safari and Firefox\n        this._input.focus();\n        event.stopPropagation();\n        event.preventDefault();\n        break;\n      case 'blur':\n        this._onBlur(event as FocusEvent);\n        break;\n    }\n  }\n\n  /**\n   * Dispose of the resources held by cell editor.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n\n    this._unbindEvents();\n\n    super.dispose();\n  }\n\n  /**\n   * Start editing the cell.\n   */\n  protected startEditing(): void {\n    this._createWidget();\n\n    const cell = this.cell;\n    const cellInfo = this.getCellInfo(cell);\n    this._input.checked = this._deserialize(cellInfo.data);\n    this.editorContainer.appendChild(this._input);\n    this._input.focus();\n\n    this._bindEvents();\n  }\n\n  /**\n   * Return the current boolean input entered.\n   */\n  protected getInput(): boolean | null {\n    return this._input.checked;\n  }\n\n  private _deserialize(value: any): any {\n    if (value === null || value === undefined) {\n      return false;\n    }\n\n    return value == true;\n  }\n\n  private _createWidget() {\n    const input = document.createElement('input');\n    input.classList.add('lm-DataGrid-cellEditorWidget');\n    input.classList.add('lm-DataGrid-cellEditorCheckbox');\n    input.type = 'checkbox';\n    input.spellcheck = false;\n\n    this._input = input;\n  }\n\n  private _bindEvents() {\n    this._input.addEventListener('keydown', this);\n    this._input.addEventListener('mousedown', this);\n    this._input.addEventListener('blur', this);\n  }\n\n  private _unbindEvents() {\n    this._input.removeEventListener('keydown', this);\n    this._input.removeEventListener('mousedown', this);\n    this._input.removeEventListener('blur', this);\n  }\n\n  private _onKeyDown(event: KeyboardEvent) {\n    switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n      case 'Enter':\n        this.commit(event.shiftKey ? 'up' : 'down');\n        break;\n      case 'Tab':\n        this.commit(event.shiftKey ? 'left' : 'right');\n        event.stopPropagation();\n        event.preventDefault();\n        break;\n      case 'Escape':\n        this.cancel();\n        break;\n      default:\n        break;\n    }\n  }\n\n  private _onBlur(event: FocusEvent) {\n    if (this.isDisposed) {\n      return;\n    }\n\n    if (!this.commit()) {\n      event.preventDefault();\n      event.stopPropagation();\n      this._input.focus();\n    }\n  }\n\n  private _input: HTMLInputElement;\n}\n\n/**\n * Cell editor for option cells.\n *\n * It supports multiple option selection. If cell metadata contains\n * type attribute 'array', then it behaves as a multi select.\n * In that case cell data is expected to be list of string values.\n */\nexport class OptionCellEditor extends CellEditor {\n  /**\n   * Dispose of the resources held by cell editor.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n\n    super.dispose();\n\n    if (this._isMultiSelect) {\n      document.body.removeChild(this._select);\n    }\n  }\n\n  /**\n   * Start editing the cell.\n   */\n  protected startEditing(): void {\n    const cell = this.cell;\n    const cellInfo = this.getCellInfo(cell);\n    const metadata = cell.grid.dataModel!.metadata(\n      'body',\n      cell.row,\n      cell.column\n    );\n    this._isMultiSelect = metadata.type === 'array';\n    this._createWidget();\n\n    if (this._isMultiSelect) {\n      this._select.multiple = true;\n      const values = this._deserialize(cellInfo.data) as string[];\n      for (let i = 0; i < this._select.options.length; ++i) {\n        const option = this._select.options.item(i);\n        option!.selected = values.indexOf(option!.value) !== -1;\n      }\n      document.body.appendChild(this._select);\n    } else {\n      this._select.value = this._deserialize(cellInfo.data) as string;\n      this.editorContainer.appendChild(this._select);\n    }\n\n    this._select.focus();\n\n    this._bindEvents();\n\n    this.updatePosition();\n  }\n\n  /**\n   * Return the current option input.\n   */\n  protected getInput(): string | string[] | null {\n    if (this._isMultiSelect) {\n      const input: string[] = [];\n      for (let i = 0; i < this._select.selectedOptions.length; ++i) {\n        input.push(this._select.selectedOptions.item(i)!.value);\n      }\n      return input;\n    } else {\n      return this._select.value;\n    }\n  }\n\n  /**\n   * Reposition cell editor.\n   */\n  protected updatePosition(): void {\n    super.updatePosition();\n\n    if (!this._isMultiSelect) {\n      return;\n    }\n\n    const cellInfo = this.getCellInfo(this.cell);\n\n    this._select.style.position = 'absolute';\n    const editorContainerRect = this.editorContainer.getBoundingClientRect();\n\n    this._select.style.left = editorContainerRect.left + 'px';\n    this._select.style.top = editorContainerRect.top + cellInfo.height + 'px';\n    this._select.style.width = editorContainerRect.width + 'px';\n    this._select.style.maxHeight = '60px';\n\n    this.editorContainer.style.visibility = 'hidden';\n  }\n\n  private _deserialize(value: any): string | string[] {\n    if (value === null || value === undefined) {\n      return '';\n    }\n\n    if (this._isMultiSelect) {\n      const values: string[] = [];\n      if (Array.isArray(value)) {\n        for (let item of value) {\n          values.push(item.toString());\n        }\n      }\n      return values;\n    } else {\n      return value.toString();\n    }\n  }\n\n  private _createWidget() {\n    const cell = this.cell;\n    const metadata = cell.grid.dataModel!.metadata(\n      'body',\n      cell.row,\n      cell.column\n    );\n    const items = metadata.constraint.enum;\n\n    const select = document.createElement('select');\n    select.classList.add('lm-DataGrid-cellEditorWidget');\n    for (let item of items) {\n      const option = document.createElement('option');\n      option.value = item;\n      option.text = item;\n      select.appendChild(option);\n    }\n\n    this._select = select;\n  }\n\n  private _bindEvents() {\n    this._select.addEventListener('keydown', this._onKeyDown.bind(this));\n    this._select.addEventListener('blur', this._onBlur.bind(this));\n  }\n\n  private _onKeyDown(event: KeyboardEvent) {\n    switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n      case 'Enter':\n        this.commit(event.shiftKey ? 'up' : 'down');\n        break;\n      case 'Tab':\n        this.commit(event.shiftKey ? 'left' : 'right');\n        event.stopPropagation();\n        event.preventDefault();\n        break;\n      case 'Escape':\n        this.cancel();\n        break;\n      default:\n        break;\n    }\n  }\n\n  private _onBlur(event: FocusEvent) {\n    if (this.isDisposed) {\n      return;\n    }\n\n    if (!this.commit()) {\n      event.preventDefault();\n      event.stopPropagation();\n      this._select.focus();\n    }\n  }\n\n  private _select: HTMLSelectElement;\n  private _isMultiSelect: boolean = false;\n}\n\n/**\n * Cell editor for option cells whose value can be any value\n * from set of pre-defined options or values that can be input by user.\n */\nexport class DynamicOptionCellEditor extends CellEditor {\n  /**\n   * Handle the DOM events for the editor.\n   *\n   * @param event - The DOM event sent to the editor.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'keydown':\n        this._onKeyDown(event as KeyboardEvent);\n        break;\n      case 'blur':\n        this._onBlur(event as FocusEvent);\n        break;\n    }\n  }\n\n  /**\n   * Dispose of the resources held by cell editor.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n\n    this._unbindEvents();\n\n    super.dispose();\n  }\n\n  /**\n   * Start editing the cell.\n   */\n  protected startEditing(): void {\n    this._createWidget();\n\n    const cell = this.cell;\n    const cellInfo = this.getCellInfo(cell);\n    this._input.value = this._deserialize(cellInfo.data);\n    this.editorContainer.appendChild(this._input);\n    this._input.focus();\n    this._input.select();\n\n    this._bindEvents();\n  }\n\n  /**\n   * Return the current option input.\n   */\n  protected getInput(): string | null {\n    return this._input.value;\n  }\n\n  private _deserialize(value: any): any {\n    if (value === null || value === undefined) {\n      return '';\n    }\n\n    return value.toString();\n  }\n\n  private _createWidget() {\n    const cell = this.cell;\n    const grid = cell.grid;\n    const dataModel = grid.dataModel!;\n    const rowCount = dataModel.rowCount('body');\n\n    const listId = 'cell-editor-list';\n    const list = document.createElement('datalist');\n    list.id = listId;\n    const input = document.createElement('input');\n    input.classList.add('lm-DataGrid-cellEditorWidget');\n    input.classList.add('lm-DataGrid-cellEditorInput');\n    const valueSet = new Set<string>();\n    for (let r = 0; r < rowCount; ++r) {\n      const data = dataModel.data('body', r, cell.column);\n      if (data) {\n        valueSet.add(data);\n      }\n    }\n    valueSet.forEach((value: string) => {\n      const option = document.createElement('option');\n      option.value = value;\n      option.text = value;\n      list.appendChild(option);\n    });\n    this.editorContainer.appendChild(list);\n    input.setAttribute('list', listId);\n\n    this._input = input;\n  }\n\n  private _bindEvents() {\n    this._input.addEventListener('keydown', this);\n    this._input.addEventListener('blur', this);\n  }\n\n  private _unbindEvents() {\n    this._input.removeEventListener('keydown', this);\n    this._input.removeEventListener('blur', this);\n  }\n\n  private _onKeyDown(event: KeyboardEvent) {\n    switch (getKeyboardLayout().keyForKeydownEvent(event)) {\n      case 'Enter':\n        this.commit(event.shiftKey ? 'up' : 'down');\n        break;\n      case 'Tab':\n        this.commit(event.shiftKey ? 'left' : 'right');\n        event.stopPropagation();\n        event.preventDefault();\n        break;\n      case 'Escape':\n        this.cancel();\n        break;\n      default:\n        break;\n    }\n  }\n\n  private _onBlur(event: FocusEvent) {\n    if (this.isDisposed) {\n      return;\n    }\n\n    if (!this.commit()) {\n      event.preventDefault();\n      event.stopPropagation();\n      this._input.focus();\n    }\n  }\n\n  private _input: HTMLInputElement;\n}\n\n/**\n * The namespace for the `CellEditor` class statics.\n */\nexport namespace CellEditor {\n  /**\n   * An object which holds the configuration data for a cell.\n   */\n  export type CellConfig = {\n    /**\n     * The grid containing the cell.\n     */\n    readonly grid: DataGrid;\n    /**\n     * The row index of the cell.\n     */\n    readonly row: number;\n\n    /**\n     * The column index of the cell.\n     */\n    readonly column: number;\n  };\n\n  /**\n   * A widget which implements a notification popup.\n   */\n  export class Notification extends Widget {\n    /**\n     * Construct a new notification.\n     *\n     * @param options - The options for initializing the notification.\n     */\n    constructor(options: Notification.IOptions) {\n      super({ node: Notification.createNode() });\n      this.addClass('lm-DataGrid-notification');\n      this.setFlag(Widget.Flag.DisallowLayout);\n\n      this._target = options.target;\n      this._message = options.message || '';\n      this._placement = options.placement || 'bottom';\n\n      Widget.attach(this, document.body);\n\n      if (options.timeout && options.timeout > 0) {\n        setTimeout(() => {\n          this.close();\n        }, options.timeout);\n      }\n    }\n\n    /**\n     * Handle the DOM events for the notification.\n     *\n     * @param event - The DOM event sent to the notification.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notification's DOM node.\n     *\n     * This should not be called directly by user code.\n     */\n    handleEvent(event: Event): void {\n      switch (event.type) {\n        case 'mousedown':\n          this._evtMouseDown(event as MouseEvent);\n          break;\n        case 'contextmenu':\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n      }\n    }\n\n    /**\n     * Get the placement of the notification.\n     */\n    get placement(): Notification.Placement {\n      return this._placement;\n    }\n\n    /**\n     * Set the placement of the notification.\n     */\n    set placement(value: Notification.Placement) {\n      // Do nothing if the placement does not change.\n      if (this._placement === value) {\n        return;\n      }\n\n      // Update the internal placement.\n      this._placement = value;\n\n      // Schedule an update for notification.\n      this.update();\n    }\n\n    /**\n     * Get the current value of the message.\n     */\n    get message(): string {\n      return this._message;\n    }\n\n    /**\n     * Set the current value of the message.\n     *\n     */\n    set message(value: string) {\n      // Do nothing if the value does not change.\n      if (this._message === value) {\n        return;\n      }\n\n      // Update the internal value.\n      this._message = value;\n\n      // Schedule an update for notification.\n      this.update();\n    }\n\n    /**\n     * Get the node presenting the message.\n     */\n    get messageNode(): HTMLSpanElement {\n      return this.node.getElementsByClassName(\n        'lm-DataGrid-notificationMessage'\n      )[0] as HTMLSpanElement;\n    }\n\n    /**\n     * A method invoked on a 'before-attach' message.\n     */\n    protected onBeforeAttach(msg: Message): void {\n      this.node.addEventListener('mousedown', this);\n      this.update();\n    }\n\n    /**\n     * A method invoked on an 'after-detach' message.\n     */\n    protected onAfterDetach(msg: Message): void {\n      this.node.removeEventListener('mousedown', this);\n    }\n\n    /**\n     * A method invoked on an 'update-request' message.\n     */\n    protected onUpdateRequest(msg: Message): void {\n      const targetRect = this._target.getBoundingClientRect();\n      const style = this.node.style;\n\n      switch (this._placement) {\n        case 'bottom':\n          style.left = targetRect.left + 'px';\n          style.top = targetRect.bottom + 'px';\n          break;\n        case 'top':\n          style.left = targetRect.left + 'px';\n          style.height = targetRect.top + 'px';\n          style.top = '0';\n          style.alignItems = 'flex-end';\n          style.justifyContent = 'flex-end';\n          break;\n        case 'left':\n          style.left = '0';\n          style.width = targetRect.left + 'px';\n          style.top = targetRect.top + 'px';\n          style.alignItems = 'flex-end';\n          style.justifyContent = 'flex-end';\n          break;\n        case 'right':\n          style.left = targetRect.right + 'px';\n          style.top = targetRect.top + 'px';\n          break;\n      }\n\n      this.messageNode.innerHTML = this._message;\n    }\n\n    /**\n     * Handle the `'mousedown'` event for the notification.\n     */\n    private _evtMouseDown(event: MouseEvent): void {\n      // Do nothing if it's not a left mouse press.\n      if (event.button !== 0) {\n        return;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n      this.close();\n    }\n\n    private _target: HTMLElement;\n    private _message: string = '';\n    private _placement: Notification.Placement;\n  }\n\n  /**\n   * The namespace for the `Notification` class statics.\n   */\n  export namespace Notification {\n    /**\n     * A type alias for a notification placement.\n     */\n    export type Placement = 'top' | 'bottom' | 'left' | 'right';\n\n    /**\n     * An options object for creating a notification.\n     */\n    export interface IOptions {\n      /**\n       * Target element to attach notification to.\n       *\n       */\n      target: HTMLElement;\n\n      /**\n       * The message to show on notification.\n       */\n      message?: string;\n\n      /**\n       * The placement of the notification.\n       *\n       * The default is `'bottom'`.\n       */\n      placement?: Placement;\n\n      /**\n       * Duration in ms after which to close notification popup.\n       *\n       * The default is undefined, and notification is kept visible\n       * Timeout value needs to be greater than zero\n       */\n      timeout?: number;\n    }\n\n    /**\n     * Create the DOM node for notification.\n     */\n    export function createNode(): HTMLElement {\n      const node = document.createElement('div');\n      const container = document.createElement('div');\n      container.className = 'lm-DataGrid-notificationContainer';\n      const message = document.createElement('span');\n      message.className = 'lm-DataGrid-notificationMessage';\n      container.appendChild(message);\n      node.appendChild(container);\n\n      return node;\n    }\n  }\n}\n\n/**\n * A namespace for module-private functionality.\n */\nnamespace Private {\n  /**\n   * A type alias for cell properties.\n   */\n  export type ICellInfo = {\n    grid: DataGrid;\n    row: number;\n    column: number;\n    data: any;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n}\n","/*\n * Copyright (c) Jupyter Development Team.\n * Distributed under the terms of the Modified BSD License.\n */\n\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  BooleanCellEditor,\n  CellDataType,\n  CellEditor,\n  DateCellEditor,\n  DynamicOptionCellEditor,\n  ICellEditOptions,\n  ICellEditor,\n  ICellEditResponse,\n  IntegerCellEditor,\n  NumberCellEditor,\n  OptionCellEditor,\n  TextCellEditor\n} from './celleditor';\n\nimport { CellGroup } from './cellgroup';\n\nimport { DataModel, MutableDataModel } from './datamodel';\n\n/**\n * A type alias for cell editor override identifier.\n */\nexport type EditorOverrideIdentifier =\n  | CellDataType\n  | DataModel.Metadata\n  | 'default';\n\n/**\n * An object which manages cell editing.\n */\nexport interface ICellEditorController {\n  /**\n   * Override cell editor for the cells matching the identifier.\n   *\n   * @param identifier - Cell identifier to use when matching cells.\n   * if identifier is a CellDataType, then cell matching is done using data type of the cell,\n   * if identifier is a Metadata, then partial match of the cell metadata with identifier is used for match,\n   * if identifier is 'default' then override is used as default editor when no other editor is found suitable\n   *\n   * @param editor - The cell editor to use or resolver to use to get an editor for matching cells.\n   */\n  setEditor(\n    identifier: EditorOverrideIdentifier,\n    editor: ICellEditor | Resolver\n  ): void;\n  /**\n   * Start editing a cell.\n   *\n   * @param cell - The object holding cell configuration data.\n   *\n   * @param options - The cell editing options.\n   */\n  edit(cell: CellEditor.CellConfig, options?: ICellEditOptions): boolean;\n  /**\n   * Cancel editing.\n   */\n  cancel(): void;\n}\n\n/**\n * A type alias for a cell editor config function.\n *\n * This type is used to compute a value from a cell config object.\n */\nexport type ConfigFunc<T> = (config: CellEditor.CellConfig) => T;\n\n/**\n * A type alias for a cell editor config option.\n *\n * A config option can be a static value or a config function.\n */\nexport type ConfigOption<T> = T | ConfigFunc<T>;\n\n/**\n * A type alias for a cell editor resolver function.\n */\nexport type Resolver = ConfigFunc<ICellEditor | undefined>;\n\n/**\n * Resolve a config option for a cell editor.\n *\n * @param option - The config option to resolve.\n *\n * @param config - The cell config object.\n *\n * @returns The resolved value for the option.\n */\nexport function resolveOption<T>(\n  option: ConfigOption<T>,\n  config: CellEditor.CellConfig\n): T {\n  return typeof option === 'function'\n    ? (option as ConfigFunc<T>)(config)\n    : option;\n}\n\n/**\n * An object which manages cell editing. It stores editor overrides,\n * decides which editor to use for a cell, makes sure there is only one editor active.\n */\nexport class CellEditorController implements ICellEditorController {\n  /**\n   * Override cell editor for the cells matching the identifier.\n   *\n   * @param identifier - Cell identifier to use when matching cells.\n   * if identifier is a CellDataType, then cell matching is done using data type of the cell,\n   * if identifier is a Metadata, then partial match of the cell metadata with identifier is used for match,\n   * if identifier is 'default' then override is used as default editor when no other editor is found suitable\n   *\n   * @param editor - The cell editor to use or resolver to use to get an editor for matching cells.\n   */\n  setEditor(\n    identifier: EditorOverrideIdentifier,\n    editor: ICellEditor | Resolver\n  ): void {\n    if (typeof identifier === 'string') {\n      this._typeBasedOverrides.set(identifier, editor);\n    } else {\n      const key = this._metadataIdentifierToKey(identifier);\n      this._metadataBasedOverrides.set(key, [identifier, editor]);\n    }\n  }\n\n  /**\n   * Start editing a cell.\n   *\n   * @param cell - The object holding cell configuration data.\n   *\n   * @param options - The cell editing options.\n   */\n  edit(cell: CellEditor.CellConfig, options?: ICellEditOptions): boolean {\n    const grid = cell.grid;\n\n    if (!grid.editable) {\n      console.error('Grid cannot be edited!');\n      return false;\n    }\n\n    this.cancel();\n\n    this._cell = cell;\n\n    options = options || {};\n    options.onCommit = options.onCommit || this._onCommit.bind(this);\n    options.onCancel = options.onCancel || this._onCancel.bind(this);\n\n    // if an editor is passed in with options, then use it for editing\n    if (options.editor) {\n      this._editor = options.editor;\n      options.editor.edit(cell, options);\n      return true;\n    }\n\n    // choose an editor based on overrides / cell data type\n    const editor = this._getEditor(cell);\n    if (editor) {\n      this._editor = editor;\n      editor.edit(cell, options);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Cancel editing.\n   */\n  cancel(): void {\n    if (this._editor) {\n      this._editor.cancel();\n      this._editor = null;\n    }\n\n    this._cell = null;\n  }\n\n  private _onCommit(response: ICellEditResponse): void {\n    const cell = this._cell;\n\n    if (!cell) {\n      return;\n    }\n\n    const grid = cell.grid;\n    const dataModel = grid.dataModel as MutableDataModel;\n    let row = cell.row;\n    let column = cell.column;\n\n    const cellGroup = CellGroup.getGroup(grid.dataModel!, 'body', row, column);\n    if (cellGroup) {\n      row = cellGroup.r1;\n      column = cellGroup.c1;\n    }\n\n    dataModel.setData('body', row, column, response.value);\n    grid.viewport.node.focus();\n    if (response.cursorMovement !== 'none') {\n      grid.moveCursor(response.cursorMovement);\n      grid.scrollToCursor();\n    }\n  }\n\n  private _onCancel(): void {\n    if (!this._cell) {\n      return;\n    }\n\n    this._cell.grid.viewport.node.focus();\n  }\n\n  private _getDataTypeKey(cell: CellEditor.CellConfig): string {\n    const metadata = cell.grid.dataModel\n      ? cell.grid.dataModel.metadata('body', cell.row, cell.column)\n      : null;\n\n    if (!metadata) {\n      return 'default';\n    }\n\n    let key = '';\n\n    if (metadata) {\n      key = metadata.type;\n    }\n\n    if (metadata.constraint && metadata.constraint.enum) {\n      if (metadata.constraint.enum === 'dynamic') {\n        key += ':dynamic-option';\n      } else {\n        key += ':option';\n      }\n    }\n\n    return key;\n  }\n\n  private _objectToKey(object: any): string {\n    let str = '';\n    for (let key in object) {\n      const value = object[key];\n      if (typeof value === 'object') {\n        str += `${key}:${this._objectToKey(value)}`;\n      } else {\n        str += `[${key}:${value}]`;\n      }\n    }\n\n    return str;\n  }\n\n  private _metadataIdentifierToKey(metadata: DataModel.Metadata): string {\n    return this._objectToKey(metadata);\n  }\n\n  private _metadataMatchesIdentifier(\n    metadata: DataModel.Metadata,\n    identifier: DataModel.Metadata\n  ): boolean {\n    for (let key in identifier) {\n      if (!metadata.hasOwnProperty(key)) {\n        return false;\n      }\n\n      const identifierValue = identifier[key];\n      const metadataValue = metadata[key];\n      if (typeof identifierValue === 'object') {\n        if (!this._metadataMatchesIdentifier(metadataValue, identifierValue)) {\n          return false;\n        }\n      } else if (metadataValue !== identifierValue) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private _getMetadataBasedEditor(\n    cell: CellEditor.CellConfig\n  ): ICellEditor | undefined {\n    let editorMatched: ICellEditor | undefined;\n    const metadata = cell.grid.dataModel!.metadata(\n      'body',\n      cell.row,\n      cell.column\n    );\n    if (metadata) {\n      this._metadataBasedOverrides.forEach(value => {\n        if (!editorMatched) {\n          let [identifier, editor] = value;\n          if (this._metadataMatchesIdentifier(metadata, identifier)) {\n            editorMatched = resolveOption(editor, cell);\n          }\n        }\n      });\n    }\n\n    return editorMatched;\n  }\n\n  /**\n   * Choose the most appropriate cell editor to use based on overrides / cell data type.\n   *\n   * If no match is found in overrides or based on cell data type, and if cell has a primitive\n   * data type then TextCellEditor is used as default cell editor. If 'default' cell editor\n   * is overridden, then it is used instead of TextCellEditor for default.\n   */\n  private _getEditor(cell: CellEditor.CellConfig): ICellEditor | undefined {\n    const dtKey = this._getDataTypeKey(cell);\n\n    // find an editor based on data type based override\n    if (this._typeBasedOverrides.has(dtKey)) {\n      const editor = this._typeBasedOverrides.get(dtKey);\n      return resolveOption(editor!, cell);\n    } // find an editor based on metadata match based override\n    else if (this._metadataBasedOverrides.size > 0) {\n      const editor = this._getMetadataBasedEditor(cell);\n      if (editor) {\n        return editor;\n      }\n    }\n\n    // choose an editor based on data type\n    switch (dtKey) {\n      case 'string':\n        return new TextCellEditor();\n      case 'number':\n        return new NumberCellEditor();\n      case 'integer':\n        return new IntegerCellEditor();\n      case 'boolean':\n        return new BooleanCellEditor();\n      case 'date':\n        return new DateCellEditor();\n      case 'string:option':\n      case 'number:option':\n      case 'integer:option':\n      case 'date:option':\n      case 'array:option':\n        return new OptionCellEditor();\n      case 'string:dynamic-option':\n      case 'number:dynamic-option':\n      case 'integer:dynamic-option':\n      case 'date:dynamic-option':\n        return new DynamicOptionCellEditor();\n    }\n\n    // if an override exists for 'default', then use it\n    if (this._typeBasedOverrides.has('default')) {\n      const editor = this._typeBasedOverrides.get('default');\n      return resolveOption(editor!, cell);\n    }\n\n    // if cell has a primitive data type then use TextCellEditor\n    const data = cell.grid.dataModel!.data('body', cell.row, cell.column);\n    if (!data || typeof data !== 'object') {\n      return new TextCellEditor();\n    }\n\n    // no suitable editor found for the cell\n    return undefined;\n  }\n\n  // active cell editor\n  private _editor: ICellEditor | null = null;\n  // active cell being edited\n  private _cell: CellEditor.CellConfig | null = null;\n  // cell editor overrides based on cell data type identifier\n  private _typeBasedOverrides: Map<string, ICellEditor | Resolver> = new Map();\n  // cell editor overrides based on partial metadata match\n  private _metadataBasedOverrides: Map<\n    string,\n    [DataModel.Metadata, ICellEditor | Resolver]\n  > = new Map();\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { ISignal, Signal } from '@lumino/signaling';\n\nimport { CellGroup } from './cellgroup';\n/**\n * An object which provides the data for a data grid.\n *\n * #### Notes\n * If the predefined data models are insufficient for a particular use\n * case, a custom model can be defined which derives from this class.\n */\nexport abstract class DataModel {\n  /**\n   * A signal emitted when the data model has changed.\n   */\n  get changed(): ISignal<this, DataModel.ChangedArgs> {\n    return this._changed;\n  }\n\n  /**\n   * Get the row count for a region in the data model.\n   *\n   * @param region - The row region of interest.\n   *\n   * @returns - The row count for the region.\n   *\n   * #### Notes\n   * This method is called often, and so should be efficient.\n   */\n  abstract rowCount(region: DataModel.RowRegion): number;\n\n  /**\n   * Get the column count for a region in the data model.\n   *\n   * @param region - The column region of interest.\n   *\n   * @returns - The column count for the region.\n   *\n   * #### Notes\n   * This method is called often, and so should be efficient.\n   */\n  abstract columnCount(region: DataModel.ColumnRegion): number;\n\n  /**\n   * Get the data value for a cell in the data model.\n   *\n   * @param region - The cell region of interest.\n   *\n   * @param row - The row index of the cell of interest.\n   *\n   * @param column - The column index of the cell of interest.\n   *\n   * @returns The data value for the specified cell.\n   *\n   * #### Notes\n   * The returned data should be treated as immutable.\n   *\n   * This method is called often, and so should be efficient.\n   */\n  abstract data(region: DataModel.CellRegion, row: number, column: number): any;\n\n  /**\n   * Get the count of merged cell groups pertaining to a given\n   * cell region.\n   * @param region the target cell region.\n   */\n  groupCount(region: DataModel.CellRegion): number {\n    return 0;\n  }\n\n  /**\n   * Get the metadata for a cell in the data model.\n   *\n   * @param region - The cell region of interest.\n   *\n   * @param row - The row index of the cell of interest.\n   *\n   * @param column - The column index of the cell of interest.\n   *\n   * @returns The metadata for the specified cell.\n   *\n   * #### Notes\n   * The returned metadata should be treated as immutable.\n   *\n   * This method is called often, and so should be efficient.\n   *\n   * The default implementation returns `{}`.\n   */\n  metadata(\n    region: DataModel.CellRegion,\n    row: number,\n    column: number\n  ): DataModel.Metadata {\n    return DataModel.emptyMetadata;\n  }\n\n  /**\n   * Get the merged cell group corresponding to a region and index number.\n   * @param region the cell region of cell group.\n   * @param groupIndex the group index of the cell group.\n   * @returns a cell group.\n   */\n  group(region: DataModel.CellRegion, groupIndex: number): CellGroup | null {\n    return null;\n  }\n\n  /**\n   * Emit the `changed` signal for the data model.\n   *\n   * #### Notes\n   * Subclasses should call this method whenever the data model has\n   * changed so that attached data grids can update themselves.\n   */\n  protected emitChanged(args: DataModel.ChangedArgs): void {\n    this._changed.emit(args);\n  }\n\n  private _changed = new Signal<this, DataModel.ChangedArgs>(this);\n}\n\n/**\n * An object which provides the mutable data for a data grid.\n *\n * #### Notes\n * This object is an extension to `DataModel` and it only adds ability to\n * change data for cells.\n */\nexport abstract class MutableDataModel extends DataModel {\n  /**\n   * Set the data value for a cell in the data model.\n   *\n   * @param region - The cell region of interest.\n   *\n   * @param row - The row index of the cell of interest.\n   *\n   * @param column - The column index of the cell of interest.\n   *\n   * @returns true if succeeds, false otherwise.\n   *\n   */\n  abstract setData(\n    region: DataModel.CellRegion,\n    row: number,\n    column: number,\n    value: unknown\n  ): boolean;\n}\n\n/**\n * The namespace for the `DataModel` class statics.\n */\nexport namespace DataModel {\n  /**\n   * A type alias for the data model row regions.\n   */\n  export type RowRegion = 'body' | 'column-header';\n\n  /**\n   * A type alias for the data model column regions.\n   */\n  export type ColumnRegion = 'body' | 'row-header';\n\n  /**\n   * A type alias for the data model cell regions.\n   */\n  export type CellRegion =\n    | 'body'\n    | 'row-header'\n    | 'column-header'\n    | 'corner-header';\n\n  /**\n   * The metadata for a column in a data model.\n   */\n  export type Metadata = { [key: string]: any };\n\n  /**\n   * A singleton empty metadata object.\n   */\n  export const emptyMetadata: Metadata = Object.freeze({});\n\n  /**\n   * An arguments object for the `changed` signal.\n   *\n   * #### Notes\n   * Data models should emit the `changed` signal with this args object\n   * type when rows are inserted or removed.\n   */\n  export type RowsChangedArgs = {\n    /**\n     * The discriminated type of the args object.\n     */\n    readonly type: 'rows-inserted' | 'rows-removed';\n\n    /**\n     * The region which contains the modified rows.\n     */\n    readonly region: RowRegion;\n\n    /**\n     * The index of the first modified row.\n     */\n    readonly index: number;\n\n    /**\n     * The number of modified rows.\n     */\n    readonly span: number;\n  };\n\n  /**\n   * An arguments object for the `changed` signal.\n   *\n   * #### Notes\n   * Data models should emit the `changed` signal with this args object\n   * type when columns are inserted or removed.\n   */\n  export type ColumnsChangedArgs = {\n    /**\n     * The discriminated type of the args object.\n     */\n    readonly type: 'columns-inserted' | 'columns-removed';\n\n    /**\n     * The region which contains the modified columns.\n     */\n    readonly region: ColumnRegion;\n\n    /**\n     * The index of the first modified column.\n     */\n    readonly index: number;\n\n    /**\n     * The number of modified columns.\n     */\n    readonly span: number;\n  };\n\n  /**\n   * An arguments object for the `changed` signal.\n   *\n   * #### Notes\n   * Data models should emit the `changed` signal with this args object\n   * type when rows are moved.\n   */\n  export type RowsMovedArgs = {\n    /**\n     * The discriminated type of the args object.\n     */\n    readonly type: 'rows-moved';\n\n    /**\n     * The region which contains the modified rows.\n     */\n    readonly region: RowRegion;\n\n    /**\n     * The starting index of the first modified row.\n     */\n    readonly index: number;\n\n    /**\n     * The number of modified rows.\n     */\n    readonly span: number;\n\n    /**\n     * The ending index of the first modified row.\n     */\n    readonly destination: number;\n  };\n\n  /**\n   * An arguments object for the `changed` signal.\n   *\n   * #### Notes\n   * Data models should emit the `changed` signal with this args object\n   * type when columns are moved.\n   */\n  export type ColumnsMovedArgs = {\n    /**\n     * The discriminated type of the args object.\n     */\n    readonly type: 'columns-moved';\n\n    /**\n     * The region which contains the modified columns.\n     */\n    readonly region: ColumnRegion;\n\n    /**\n     * The starting index of the first modified column.\n     */\n    readonly index: number;\n\n    /**\n     * The number of modified columns.\n     */\n    readonly span: number;\n\n    /**\n     * The ending index of the first modified column.\n     */\n    readonly destination: number;\n  };\n\n  /**\n   * An arguments object for the `changed` signal.\n   *\n   * #### Notes\n   * Data models should emit the `changed` signal with this args object\n   * type when cells are changed in-place.\n   */\n  export type CellsChangedArgs = {\n    /**\n     * The discriminated type of the args object.\n     */\n    readonly type: 'cells-changed';\n\n    /**\n     * The region which contains the modified cells.\n     */\n    readonly region: CellRegion;\n\n    /**\n     * The row index of the first modified cell.\n     */\n    readonly row: number;\n\n    /**\n     * The column index of the first modified cell.\n     */\n    readonly column: number;\n\n    /**\n     * The number of rows in the modified cell range.\n     */\n    readonly rowSpan: number;\n\n    /**\n     * The number of columns in the modified cell range.\n     */\n    readonly columnSpan: number;\n  };\n\n  /**\n   * An arguments object for the `changed` signal.\n   *\n   * #### Notes\n   * Data models should emit the `changed` signal with this args object\n   * type when the model has changed in a fashion that cannot be easily\n   * expressed by the other args object types.\n   *\n   * This is the \"big hammer\" approach, and will cause any associated\n   * data grid to perform a full reset. The other changed args types\n   * should be used whenever possible.\n   */\n  export type ModelResetArgs = {\n    /**\n     * The discriminated type of the args object.\n     */\n    readonly type: 'model-reset';\n  };\n\n  /**\n   * A type alias for the args objects of the `changed` signal.\n   */\n  export type ChangedArgs =\n    | RowsChangedArgs\n    | ColumnsChangedArgs\n    | RowsMovedArgs\n    | ColumnsMovedArgs\n    | CellsChangedArgs\n    | ModelResetArgs;\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IDisposable } from '@lumino/disposable';\n\n/**\n * A thin caching wrapper around a 2D canvas rendering context.\n *\n * #### Notes\n * This class is mostly a transparent wrapper around a canvas rendering\n * context which improves performance when writing context state.\n *\n * For best performance, avoid reading state from the `gc`. Writes are\n * cached based on the previously written value.\n *\n * Unless otherwise specified, the API and semantics of this class are\n * identical to the builtin 2D canvas rendering context:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D\n *\n * The wrapped canvas context should not be manipulated externally\n * until the wrapping `GraphicsContext` object is disposed.\n */\nexport class GraphicsContext implements IDisposable {\n  /**\n   * Create a new graphics context object.\n   *\n   * @param context - The 2D canvas rendering context to wrap.\n   */\n  constructor(context: CanvasRenderingContext2D) {\n    this._context = context;\n    this._state = Private.State.create(context);\n  }\n\n  dispose(): void {\n    // Bail if the gc is already disposed.\n    if (this._disposed) {\n      return;\n    }\n\n    // Mark the gc as disposed.\n    this._disposed = true;\n\n    // Pop any unrestored saves.\n    while (this._state.next) {\n      this._state = this._state.next;\n      this._context.restore();\n    }\n  }\n\n  get isDisposed(): boolean {\n    return this._disposed;\n  }\n\n  get fillStyle(): string | CanvasGradient | CanvasPattern {\n    return this._context.fillStyle;\n  }\n\n  set fillStyle(value: string | CanvasGradient | CanvasPattern) {\n    if (this._state.fillStyle !== value) {\n      this._state.fillStyle = value;\n      this._context.fillStyle = value;\n    }\n  }\n\n  get strokeStyle(): string | CanvasGradient | CanvasPattern {\n    return this._context.strokeStyle;\n  }\n\n  set strokeStyle(value: string | CanvasGradient | CanvasPattern) {\n    if (this._state.strokeStyle !== value) {\n      this._state.strokeStyle = value;\n      this._context.strokeStyle = value;\n    }\n  }\n\n  get font(): string {\n    return this._context.font;\n  }\n\n  set font(value: string) {\n    if (this._state.font !== value) {\n      this._state.font = value;\n      this._context.font = value;\n    }\n  }\n\n  get textAlign(): CanvasTextAlign {\n    return this._context.textAlign;\n  }\n\n  set textAlign(value: CanvasTextAlign) {\n    if (this._state.textAlign !== value) {\n      this._state.textAlign = value;\n      this._context.textAlign = value;\n    }\n  }\n\n  get textBaseline(): CanvasTextBaseline {\n    return this._context.textBaseline;\n  }\n\n  set textBaseline(value: CanvasTextBaseline) {\n    if (this._state.textBaseline !== value) {\n      this._state.textBaseline = value;\n      this._context.textBaseline = value;\n    }\n  }\n\n  get lineCap(): CanvasLineCap {\n    return this._context.lineCap;\n  }\n\n  set lineCap(value: CanvasLineCap) {\n    if (this._state.lineCap !== value) {\n      this._state.lineCap = value;\n      this._context.lineCap = value;\n    }\n  }\n\n  get lineDashOffset(): number {\n    return this._context.lineDashOffset;\n  }\n\n  set lineDashOffset(value: number) {\n    if (this._state.lineDashOffset !== value) {\n      this._state.lineDashOffset = value;\n      this._context.lineDashOffset = value;\n    }\n  }\n\n  get lineJoin(): CanvasLineJoin {\n    return this._context.lineJoin;\n  }\n\n  set lineJoin(value: CanvasLineJoin) {\n    if (this._state.lineJoin !== value) {\n      this._state.lineJoin = value;\n      this._context.lineJoin = value;\n    }\n  }\n\n  get lineWidth(): number {\n    return this._context.lineWidth;\n  }\n\n  set lineWidth(value: number) {\n    if (this._state.lineWidth !== value) {\n      this._state.lineWidth = value;\n      this._context.lineWidth = value;\n    }\n  }\n\n  get miterLimit(): number {\n    return this._context.miterLimit;\n  }\n\n  set miterLimit(value: number) {\n    if (this._state.miterLimit !== value) {\n      this._state.miterLimit = value;\n      this._context.miterLimit = value;\n    }\n  }\n\n  get shadowBlur(): number {\n    return this._context.shadowBlur;\n  }\n\n  set shadowBlur(value: number) {\n    if (this._state.shadowBlur !== value) {\n      this._state.shadowBlur = value;\n      this._context.shadowBlur = value;\n    }\n  }\n\n  get shadowColor(): string {\n    return this._context.shadowColor;\n  }\n\n  set shadowColor(value: string) {\n    if (this._state.shadowColor !== value) {\n      this._state.shadowColor = value;\n      this._context.shadowColor = value;\n    }\n  }\n\n  get shadowOffsetX(): number {\n    return this._context.shadowOffsetX;\n  }\n\n  set shadowOffsetX(value: number) {\n    if (this._state.shadowOffsetX !== value) {\n      this._state.shadowOffsetX = value;\n      this._context.shadowOffsetX = value;\n    }\n  }\n\n  get shadowOffsetY(): number {\n    return this._context.shadowOffsetY;\n  }\n\n  set shadowOffsetY(value: number) {\n    if (this._state.shadowOffsetY !== value) {\n      this._state.shadowOffsetY = value;\n      this._context.shadowOffsetY = value;\n    }\n  }\n\n  get imageSmoothingEnabled(): boolean {\n    return this._context.imageSmoothingEnabled;\n  }\n\n  set imageSmoothingEnabled(value: boolean) {\n    if (this._state.imageSmoothingEnabled !== value) {\n      this._state.imageSmoothingEnabled = value;\n      this._context.imageSmoothingEnabled = value;\n    }\n  }\n\n  get globalAlpha(): number {\n    return this._context.globalAlpha;\n  }\n\n  set globalAlpha(value: number) {\n    if (this._state.globalAlpha !== value) {\n      this._state.globalAlpha = value;\n      this._context.globalAlpha = value;\n    }\n  }\n\n  get globalCompositeOperation(): GlobalCompositeOperation {\n    return this._context.globalCompositeOperation;\n  }\n\n  set globalCompositeOperation(value: GlobalCompositeOperation) {\n    if (this._state.globalCompositeOperation !== value) {\n      this._state.globalCompositeOperation = value;\n      this._context.globalCompositeOperation = value;\n    }\n  }\n\n  getLineDash(): number[] {\n    return this._context.getLineDash();\n  }\n\n  setLineDash(segments: number[]): void {\n    this._context.setLineDash(segments);\n  }\n\n  rotate(angle: number): void {\n    this._context.rotate(angle);\n  }\n\n  scale(x: number, y: number): void {\n    this._context.scale(x, y);\n  }\n\n  transform(\n    m11: number,\n    m12: number,\n    m21: number,\n    m22: number,\n    dx: number,\n    dy: number\n  ): void {\n    this._context.transform(m11, m12, m21, m22, dx, dy);\n  }\n\n  translate(x: number, y: number): void {\n    this._context.translate(x, y);\n  }\n\n  setTransform(\n    m11: number,\n    m12: number,\n    m21: number,\n    m22: number,\n    dx: number,\n    dy: number\n  ): void {\n    this._context.setTransform(m11, m12, m21, m22, dx, dy);\n  }\n\n  save(): void {\n    // Clone an push the current state to the stack.\n    this._state = Private.State.push(this._state);\n\n    // Save the wrapped context state.\n    this._context.save();\n  }\n\n  restore(): void {\n    // Bail if there is no state to restore.\n    if (!this._state.next) {\n      return;\n    }\n\n    // Pop the saved state from the stack.\n    this._state = Private.State.pop(this._state);\n\n    // Restore the wrapped context state.\n    this._context.restore();\n  }\n\n  beginPath(): void {\n    return this._context.beginPath();\n  }\n\n  closePath(): void {\n    this._context.closePath();\n  }\n\n  isPointInPath(x: number, y: number, fillRule?: CanvasFillRule): boolean {\n    let result: boolean;\n    if (arguments.length === 2) {\n      result = this._context.isPointInPath(x, y);\n    } else {\n      result = this._context.isPointInPath(x, y, fillRule);\n    }\n    return result;\n  }\n\n  arc(\n    x: number,\n    y: number,\n    radius: number,\n    startAngle: number,\n    endAngle: number,\n    anticlockwise?: boolean\n  ): void {\n    if (arguments.length === 5) {\n      this._context.arc(x, y, radius, startAngle, endAngle);\n    } else {\n      this._context.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n    }\n  }\n\n  arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void {\n    this._context.arcTo(x1, y1, x2, y2, radius);\n  }\n\n  bezierCurveTo(\n    cp1x: number,\n    cp1y: number,\n    cp2x: number,\n    cp2y: number,\n    x: number,\n    y: number\n  ): void {\n    this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n  }\n\n  ellipse(\n    x: number,\n    y: number,\n    radiusX: number,\n    radiusY: number,\n    rotation: number,\n    startAngle: number,\n    endAngle: number,\n    anticlockwise?: boolean\n  ): void {\n    if (arguments.length === 7) {\n      this._context.ellipse(\n        x,\n        y,\n        radiusX,\n        radiusY,\n        rotation,\n        startAngle,\n        endAngle\n      );\n    } else {\n      this._context.ellipse(\n        x,\n        y,\n        radiusX,\n        radiusY,\n        rotation,\n        startAngle,\n        endAngle,\n        anticlockwise\n      );\n    }\n  }\n\n  lineTo(x: number, y: number): void {\n    this._context.lineTo(x, y);\n  }\n\n  moveTo(x: number, y: number): void {\n    this._context.moveTo(x, y);\n  }\n\n  quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void {\n    this._context.quadraticCurveTo(cpx, cpy, x, y);\n  }\n\n  rect(x: number, y: number, w: number, h: number): void {\n    this._context.rect(x, y, w, h);\n  }\n\n  clip(fillRule?: CanvasFillRule): void {\n    if (arguments.length === 0) {\n      this._context.clip();\n    } else {\n      this._context.clip(fillRule);\n    }\n  }\n\n  fill(fillRule?: CanvasFillRule): void {\n    if (arguments.length === 0) {\n      this._context.fill();\n    } else {\n      this._context.fill(fillRule);\n    }\n  }\n\n  stroke(): void {\n    this._context.stroke();\n  }\n\n  clearRect(x: number, y: number, w: number, h: number): void {\n    return this._context.clearRect(x, y, w, h);\n  }\n\n  fillRect(x: number, y: number, w: number, h: number): void {\n    this._context.fillRect(x, y, w, h);\n  }\n\n  fillText(text: string, x: number, y: number, maxWidth?: number): void {\n    if (arguments.length === 3) {\n      this._context.fillText(text, x, y);\n    } else {\n      this._context.fillText(text, x, y, maxWidth);\n    }\n  }\n\n  strokeRect(x: number, y: number, w: number, h: number): void {\n    this._context.strokeRect(x, y, w, h);\n  }\n\n  strokeText(text: string, x: number, y: number, maxWidth?: number): void {\n    if (arguments.length === 3) {\n      this._context.strokeText(text, x, y);\n    } else {\n      this._context.strokeText(text, x, y, maxWidth);\n    }\n  }\n\n  measureText(text: string): TextMetrics {\n    return this._context.measureText(text);\n  }\n\n  createLinearGradient(\n    x0: number,\n    y0: number,\n    x1: number,\n    y1: number\n  ): CanvasGradient {\n    return this._context.createLinearGradient(x0, y0, x1, y1);\n  }\n\n  createRadialGradient(\n    x0: number,\n    y0: number,\n    r0: number,\n    x1: number,\n    y1: number,\n    r1: number\n  ): CanvasGradient {\n    return this._context.createRadialGradient(x0, y0, r0, x1, y1, r1);\n  }\n\n  createPattern(\n    image: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement,\n    repetition: string\n  ): CanvasPattern | null {\n    return this._context.createPattern(image, repetition);\n  }\n\n  createImageData(imageData: ImageData): ImageData;\n  createImageData(sw: number, sh: number): ImageData;\n  createImageData(): ImageData {\n    // eslint-disable-next-line prefer-spread, prefer-rest-params\n    return this._context.createImageData.apply(this._context, arguments);\n  }\n\n  getImageData(sx: number, sy: number, sw: number, sh: number): ImageData {\n    return this._context.getImageData(sx, sy, sw, sh);\n  }\n\n  putImageData(imagedata: ImageData, dx: number, dy: number): void;\n  putImageData(\n    imagedata: ImageData,\n    dx: number,\n    dy: number,\n    dirtyX: number,\n    dirtyY: number,\n    dirtyWidth: number,\n    dirtyHeight: number\n  ): void;\n  putImageData(): void {\n    // eslint-disable-next-line prefer-spread, prefer-rest-params\n    this._context.putImageData.apply(this._context, arguments);\n  }\n\n  drawImage(\n    image:\n      | HTMLImageElement\n      | HTMLCanvasElement\n      | HTMLVideoElement\n      | ImageBitmap,\n    dstX: number,\n    dstY: number\n  ): void;\n  drawImage(\n    image:\n      | HTMLImageElement\n      | HTMLCanvasElement\n      | HTMLVideoElement\n      | ImageBitmap,\n    dstX: number,\n    dstY: number,\n    dstW: number,\n    dstH: number\n  ): void;\n  drawImage(\n    image:\n      | HTMLImageElement\n      | HTMLCanvasElement\n      | HTMLVideoElement\n      | ImageBitmap,\n    srcX: number,\n    srcY: number,\n    srcW: number,\n    srcH: number,\n    dstX: number,\n    dstY: number,\n    dstW: number,\n    dstH: number\n  ): void;\n  drawImage(): void {\n    // eslint-disable-next-line prefer-spread, prefer-rest-params\n    this._context.drawImage.apply(this._context, arguments);\n  }\n\n  drawFocusIfNeeded(element: Element): void {\n    this._context.drawFocusIfNeeded(element);\n  }\n\n  private _disposed = false;\n  private _state: Private.State;\n  private _context: CanvasRenderingContext2D;\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The index of next valid pool object.\n   */\n  let pi = -1;\n\n  /**\n   * A state object allocation pool.\n   */\n  const pool: State[] = [];\n\n  /**\n   * An object which holds the state for a gc.\n   */\n  export class State {\n    /**\n     * Create a gc state object from a 2D canvas context.\n     */\n    static create(context: CanvasRenderingContext2D): State {\n      let state = pi < 0 ? new State() : pool[pi--];\n      state.next = null;\n      state.fillStyle = context.fillStyle;\n      state.font = context.font;\n      state.globalAlpha = context.globalAlpha;\n      state.globalCompositeOperation = context.globalCompositeOperation;\n      state.imageSmoothingEnabled = context.imageSmoothingEnabled;\n      state.lineCap = context.lineCap;\n      state.lineDashOffset = context.lineDashOffset;\n      state.lineJoin = context.lineJoin;\n      state.lineWidth = context.lineWidth;\n      state.miterLimit = context.miterLimit;\n      state.shadowBlur = context.shadowBlur;\n      state.shadowColor = context.shadowColor;\n      state.shadowOffsetX = context.shadowOffsetX;\n      state.shadowOffsetY = context.shadowOffsetY;\n      state.strokeStyle = context.strokeStyle;\n      state.textAlign = context.textAlign;\n      state.textBaseline = context.textBaseline;\n      return state;\n    }\n\n    /**\n     * Clone an existing gc state object and add it to the state stack.\n     */\n    static push(other: State): State {\n      let state = pi < 0 ? new State() : pool[pi--];\n      state.next = other;\n      state.fillStyle = other.fillStyle;\n      state.font = other.font;\n      state.globalAlpha = other.globalAlpha;\n      state.globalCompositeOperation = other.globalCompositeOperation;\n      state.imageSmoothingEnabled = other.imageSmoothingEnabled;\n      state.lineCap = other.lineCap;\n      state.lineDashOffset = other.lineDashOffset;\n      state.lineJoin = other.lineJoin;\n      state.lineWidth = other.lineWidth;\n      state.miterLimit = other.miterLimit;\n      state.shadowBlur = other.shadowBlur;\n      state.shadowColor = other.shadowColor;\n      state.shadowOffsetX = other.shadowOffsetX;\n      state.shadowOffsetY = other.shadowOffsetY;\n      state.strokeStyle = other.strokeStyle;\n      state.textAlign = other.textAlign;\n      state.textBaseline = other.textBaseline;\n      return state;\n    }\n\n    /**\n     * Pop the next state object and return the current to the pool\n     */\n    static pop(state: State): State {\n      state.fillStyle = '';\n      state.strokeStyle = '';\n      pool[++pi] = state;\n      return state.next!;\n    }\n\n    next: State | null;\n\n    fillStyle: string | CanvasGradient | CanvasPattern;\n    font: string;\n    globalAlpha: number;\n    globalCompositeOperation: string;\n    imageSmoothingEnabled: boolean;\n    lineCap: string;\n    lineDashOffset: number;\n    lineJoin: string;\n    lineWidth: number;\n    miterLimit: number;\n    shadowBlur: number;\n    shadowColor: string;\n    shadowOffsetX: number;\n    shadowOffsetY: number;\n    strokeStyle: string | CanvasGradient | CanvasPattern;\n    textAlign: string;\n    textBaseline: string;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { ISignal, Signal } from '@lumino/signaling';\n\nimport { CellRenderer } from './cellrenderer';\n\nimport { DataModel } from './datamodel';\n\nimport { TextRenderer } from './textrenderer';\n\n/**\n * A class which manages the mapping of cell renderers.\n */\nexport class RendererMap {\n  /**\n   * Construct a new renderer map.\n   *\n   * @param values - The initial values for the map.\n   *\n   * @param fallback - The renderer of last resort.\n   */\n  constructor(values: RendererMap.Values = {}, fallback?: CellRenderer) {\n    this._values = { ...values };\n    this._fallback = fallback || new TextRenderer();\n  }\n\n  /**\n   * A signal emitted when the renderer map has changed.\n   */\n  get changed(): ISignal<this, void> {\n    return this._changed;\n  }\n\n  /**\n   * Get the cell renderer to use for the given cell config.\n   *\n   * @param config - The cell config of interest.\n   *\n   * @returns The renderer to use for the cell.\n   */\n  get(config: CellRenderer.CellConfig): CellRenderer {\n    // Fetch the renderer from the values map.\n    let renderer = this._values[config.region];\n\n    // Execute a resolver function if necessary.\n    if (typeof renderer === 'function') {\n      try {\n        renderer = renderer(config);\n      } catch (err) {\n        renderer = undefined;\n        console.error(err);\n      }\n    }\n\n    // Return the renderer or the fallback.\n    return renderer || this._fallback;\n  }\n\n  /**\n   * Update the renderer map with new values\n   *\n   * @param values - The updated values for the map.\n   *\n   * @param fallback - The renderer of last resort.\n   *\n   * #### Notes\n   * This method always emits the `changed` signal.\n   */\n  update(values: RendererMap.Values = {}, fallback?: CellRenderer): void {\n    this._values = { ...this._values, ...values };\n    this._fallback = fallback || this._fallback;\n    this._changed.emit(undefined);\n  }\n\n  private _fallback: CellRenderer;\n  private _values: RendererMap.Values;\n  private _changed = new Signal<this, void>(this);\n}\n\n/**\n * The namespace for the `RendererMap` class statics.\n */\nexport namespace RendererMap {\n  /**\n   * A type alias for a cell renderer resolver function.\n   */\n  export type Resolver = CellRenderer.ConfigFunc<CellRenderer | undefined>;\n\n  /**\n   * A type alias for a `RendererMap` values type.\n   */\n  export type Values = {\n    [R in DataModel.CellRegion]?: Resolver | CellRenderer | undefined;\n  };\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { ArrayExt } from '@lumino/algorithm';\n\n/**\n * An object which manages a collection of variable sized sections.\n *\n * #### Notes\n * This class is an implementation detail. It is designed to manage\n * the variable row and column sizes for a data grid. User code will\n * not interact with this class directly.\n */\nexport class SectionList {\n  /**\n   * Construct a new section list.\n   *\n   * @param options - The options for initializing the list.\n   */\n  constructor(options: SectionList.IOptions) {\n    this._minimumSize = options.minimumSize || 2;\n    this._defaultSize = Math.max(\n      this._minimumSize,\n      Math.floor(options.defaultSize)\n    );\n  }\n\n  /**\n   * The total size of all sections in the list.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  /**\n   * The total number of sections in the list.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get count(): number {\n    return this._count;\n  }\n\n  /**\n   * Get the minimum size of sections in the list.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get minimumSize(): number {\n    return this._minimumSize;\n  }\n\n  /**\n   * Set the minimum size of sections in the list.\n   *\n   * #### Complexity\n   * Linear on the number of resized sections.\n   */\n  set minimumSize(value: number) {\n    // Normalize the value.\n    value = Math.max(2, Math.floor(value));\n\n    // Bail early if the value does not change.\n    if (this._minimumSize === value) {\n      return;\n    }\n\n    // Update the internal minimum size.\n    this._minimumSize = value;\n\n    // Update default size if larger than minimum size\n    if (value > this._defaultSize) {\n      this.defaultSize = value;\n    }\n  }\n\n  /**\n   * Get the default size of sections in the list.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get defaultSize(): number {\n    return this._defaultSize;\n  }\n\n  /**\n   * Set the default size of sections in the list.\n   *\n   * #### Complexity\n   * Linear on the number of resized sections.\n   */\n  set defaultSize(value: number) {\n    // Normalize the value.\n    value = Math.max(this._minimumSize, Math.floor(value));\n\n    // Bail early if the value does not change.\n    if (this._defaultSize === value) {\n      return;\n    }\n\n    // Compute the delta default size.\n    let delta = value - this._defaultSize;\n\n    // Update the internal default size.\n    this._defaultSize = value;\n\n    // Update the length.\n    this._length += delta * (this._count - this._sections.length);\n\n    // Bail early if there are no modified sections.\n    if (this._sections.length === 0) {\n      return;\n    }\n\n    // Recompute the offsets of the modified sections.\n    for (let i = 0, n = this._sections.length; i < n; ++i) {\n      // Look up the previous and current modified sections.\n      let prev = this._sections[i - 1];\n      let curr = this._sections[i];\n\n      // Adjust the offset for the current section.\n      if (prev) {\n        let count = curr.index - prev.index - 1;\n        curr.offset = prev.offset + prev.size + count * value;\n      } else {\n        curr.offset = curr.index * value;\n      }\n    }\n  }\n\n  /**\n   * Clamp a size to the minimum section size\n   *\n   * @param size - The size to clamp.\n   *\n   * @returns The size or the section minimum size, whichever is larger\n   */\n  clampSize(size: number): number {\n    return Math.max(this._minimumSize, Math.floor(size));\n  }\n\n  /**\n   * Find the index of the section which covers the given offset.\n   *\n   * @param offset - The offset of the section of interest.\n   *\n   * @returns The index of the section which covers the given offset,\n   *   or `-1` if the offset is out of range.\n   *\n   * #### Complexity\n   * Logarithmic on the number of resized sections.\n   */\n  indexOf(offset: number): number {\n    // Bail early if the offset is out of range.\n    if (offset < 0 || offset >= this._length || this._count === 0) {\n      return -1;\n    }\n\n    // Handle the simple case of no modified sections.\n    if (this._sections.length === 0) {\n      return Math.floor(offset / this._defaultSize);\n    }\n\n    // Find the modified section for the given offset.\n    let i = ArrayExt.lowerBound(this._sections, offset, Private.offsetCmp);\n\n    // Return the index of an exact match.\n    if (i < this._sections.length && this._sections[i].offset <= offset) {\n      return this._sections[i].index;\n    }\n\n    // Handle the case of no modified sections before the offset.\n    if (i === 0) {\n      return Math.floor(offset / this._defaultSize);\n    }\n\n    // Compute the index from the previous modified section.\n    let section = this._sections[i - 1];\n    let span = offset - (section.offset + section.size);\n    return section.index + Math.floor(span / this._defaultSize) + 1;\n  }\n\n  /**\n   * Find the offset of the section at the given index.\n   *\n   * @param index - The index of the section of interest.\n   *\n   * @returns The offset of the section at the given index, or `-1`\n   *   if the index is out of range.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral.\n   *\n   * #### Complexity\n   * Logarithmic on the number of resized sections.\n   */\n  offsetOf(index: number): number {\n    // Bail early if the index is out of range.\n    if (index < 0 || index >= this._count) {\n      return -1;\n    }\n\n    // Handle the simple case of no modified sections.\n    if (this._sections.length === 0) {\n      return index * this._defaultSize;\n    }\n\n    // Find the modified section for the given index.\n    let i = ArrayExt.lowerBound(this._sections, index, Private.indexCmp);\n\n    // Return the offset of an exact match.\n    if (i < this._sections.length && this._sections[i].index === index) {\n      return this._sections[i].offset;\n    }\n\n    // Handle the case of no modified sections before the index.\n    if (i === 0) {\n      return index * this._defaultSize;\n    }\n\n    // Compute the offset from the previous modified section.\n    let section = this._sections[i - 1];\n    let span = index - section.index - 1;\n    return section.offset + section.size + span * this._defaultSize;\n  }\n\n  /**\n   * Find the extent of the section at the given index.\n   *\n   * @param index - The index of the section of interest.\n   *\n   * @returns The extent of the section at the given index, or `-1`\n   *   if the index is out of range.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral.\n   *\n   * #### Complexity\n   * Logarithmic on the number of resized sections.\n   */\n  extentOf(index: number): number {\n    // Bail early if the index is out of range.\n    if (index < 0 || index >= this._count) {\n      return -1;\n    }\n\n    // Handle the simple case of no modified sections.\n    if (this._sections.length === 0) {\n      return (index + 1) * this._defaultSize - 1;\n    }\n\n    // Find the modified section for the given index.\n    let i = ArrayExt.lowerBound(this._sections, index, Private.indexCmp);\n\n    // Return the offset of an exact match.\n    if (i < this._sections.length && this._sections[i].index === index) {\n      return this._sections[i].offset + this._sections[i].size - 1;\n    }\n\n    // Handle the case of no modified sections before the index.\n    if (i === 0) {\n      return (index + 1) * this._defaultSize - 1;\n    }\n\n    // Compute the offset from the previous modified section.\n    let section = this._sections[i - 1];\n    let span = index - section.index;\n    return section.offset + section.size + span * this._defaultSize - 1;\n  }\n\n  /**\n   * Find the size of the section at the given index.\n   *\n   * @param index - The index of the section of interest.\n   *\n   * @returns The size of the section at the given index, or `-1`\n   *   if the index is out of range.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral.\n   *\n   * #### Complexity\n   * Logarithmic on the number of resized sections.\n   */\n  sizeOf(index: number): number {\n    // Bail early if the index is out of range.\n    if (index < 0 || index >= this._count) {\n      return -1;\n    }\n\n    // Handle the simple case of no modified sections.\n    if (this._sections.length === 0) {\n      return this._defaultSize;\n    }\n\n    // Find the modified section for the given index.\n    let i = ArrayExt.lowerBound(this._sections, index, Private.indexCmp);\n\n    // Return the size of an exact match.\n    if (i < this._sections.length && this._sections[i].index === index) {\n      return this._sections[i].size;\n    }\n\n    // Return the default size for all other cases.\n    return this._defaultSize;\n  }\n\n  /**\n   * Resize a section in the list.\n   *\n   * @param index - The index of the section to resize. This method\n   *   is a no-op if this value is out of range.\n   *\n   * @param size - The new size of the section. This value will be\n   *   clamped to an integer `>= 0`.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral.\n   *\n   * #### Complexity\n   * Linear on the number of resized sections.\n   */\n  resize(index: number, size: number): void {\n    // Bail early if the index is out of range.\n    if (index < 0 || index >= this._count) {\n      return;\n    }\n\n    // Clamp the size to an integer >= minimum size.\n    size = Math.max(this._minimumSize, Math.floor(size));\n\n    // Find the modified section for the given index.\n    let i = ArrayExt.lowerBound(this._sections, index, Private.indexCmp);\n\n    // Update or create the modified section as needed.\n    let delta: number;\n    if (i < this._sections.length && this._sections[i].index === index) {\n      let section = this._sections[i];\n      delta = size - section.size;\n      section.size = size;\n    } else if (i === 0) {\n      let offset = index * this._defaultSize;\n      ArrayExt.insert(this._sections, i, { index, offset, size });\n      delta = size - this._defaultSize;\n    } else {\n      let section = this._sections[i - 1];\n      let span = index - section.index - 1;\n      let offset = section.offset + section.size + span * this._defaultSize;\n      ArrayExt.insert(this._sections, i, { index, offset, size });\n      delta = size - this._defaultSize;\n    }\n\n    // Adjust the length.\n    this._length += delta;\n\n    // Update all modified sections after the resized section.\n    for (let j = i + 1, n = this._sections.length; j < n; ++j) {\n      this._sections[j].offset += delta;\n    }\n  }\n\n  /**\n   * Insert sections into the list.\n   *\n   * @param index - The index at which to insert the sections. This\n   *   value will be clamped to the bounds of the list.\n   *\n   * @param count - The number of sections to insert. This method\n   *   is a no-op if this value is `<= 0`.\n   *\n   * #### Undefined Behavior\n   * An `index` or `count` which is non-integral.\n   *\n   * #### Complexity\n   * Linear on the number of resized sections.\n   */\n  insert(index: number, count: number): void {\n    // Bail early if there are no sections to insert.\n    if (count <= 0) {\n      return;\n    }\n\n    // Clamp the index to the bounds of the list.\n    index = Math.max(0, Math.min(index, this._count));\n\n    // Add the new sections to the totals.\n    let span = count * this._defaultSize;\n    this._count += count;\n    this._length += span;\n\n    // Bail early if there are no modified sections to update.\n    if (this._sections.length === 0) {\n      return;\n    }\n\n    // Find the modified section for the given index.\n    let i = ArrayExt.lowerBound(this._sections, index, Private.indexCmp);\n\n    // Update all modified sections after the insert location.\n    for (let n = this._sections.length; i < n; ++i) {\n      let section = this._sections[i];\n      section.index += count;\n      section.offset += span;\n    }\n  }\n\n  /**\n   * Remove sections from the list.\n   *\n   * @param index - The index of the first section to remove. This\n   *   method is a no-op if this value is out of range.\n   *\n   * @param count - The number of sections to remove. This method\n   *   is a no-op if this value is `<= 0`.\n   *\n   * #### Undefined Behavior\n   * An `index` or `count` which is non-integral.\n   *\n   * #### Complexity\n   * Linear on the number of resized sections.\n   */\n  remove(index: number, count: number): void {\n    // Bail early if there is nothing to remove.\n    if (index < 0 || index >= this._count || count <= 0) {\n      return;\n    }\n\n    // Clamp the count to the bounds of the list.\n    count = Math.min(this._count - index, count);\n\n    // Handle the simple case of no modified sections to update.\n    if (this._sections.length === 0) {\n      this._count -= count;\n      this._length -= count * this._defaultSize;\n      return;\n    }\n\n    // Handle the simple case of removing all sections.\n    if (count === this._count) {\n      this._length = 0;\n      this._count = 0;\n      this._sections.length = 0;\n      return;\n    }\n\n    // Find the modified section for the start index.\n    let i = ArrayExt.lowerBound(this._sections, index, Private.indexCmp);\n\n    // Find the modified section for the end index.\n    let j = ArrayExt.lowerBound(\n      this._sections,\n      index + count,\n      Private.indexCmp\n    );\n\n    // Remove the relevant modified sections.\n    let removed = this._sections.splice(i, j - i);\n\n    // Compute the total removed span.\n    let span = (count - removed.length) * this._defaultSize;\n    for (let k = 0, n = removed.length; k < n; ++k) {\n      span += removed[k].size;\n    }\n\n    // Adjust the totals.\n    this._count -= count;\n    this._length -= span;\n\n    // Update all modified sections after the removed span.\n    for (let k = i, n = this._sections.length; k < n; ++k) {\n      let section = this._sections[k];\n      section.index -= count;\n      section.offset -= span;\n    }\n  }\n\n  /**\n   * Move sections within the list.\n   *\n   * @param index - The index of the first section to move. This method\n   *   is a no-op if this value is out of range.\n   *\n   * @param count - The number of sections to move. This method is a\n   *   no-op if this value is `<= 0`.\n   *\n   * @param destination - The destination index for the first section.\n   *   This value will be clamped to the allowable range.\n   *\n   * #### Undefined Behavior\n   * An `index`, `count`, or `destination` which is non-integral.\n   *\n   * #### Complexity\n   * Linear on the number of moved resized sections.\n   */\n  move(index: number, count: number, destination: number): void {\n    // Bail early if there is nothing to move.\n    if (index < 0 || index >= this._count || count <= 0) {\n      return;\n    }\n\n    // Handle the simple case of no modified sections.\n    if (this._sections.length === 0) {\n      return;\n    }\n\n    // Clamp the move count to the limit.\n    count = Math.min(count, this._count - index);\n\n    // Clamp the destination index to the limit.\n    destination = Math.min(Math.max(0, destination), this._count - count);\n\n    // Bail early if there is no effective move.\n    if (index === destination) {\n      return;\n    }\n\n    // Compute the first affected index.\n    let i1 = Math.min(index, destination);\n\n    // Look up the first affected modified section.\n    let k1 = ArrayExt.lowerBound(this._sections, i1, Private.indexCmp);\n\n    // Bail early if there are no affected modified sections.\n    if (k1 === this._sections.length) {\n      return;\n    }\n\n    // Compute the last affected index.\n    let i2 = Math.max(index + count - 1, destination + count - 1);\n\n    // Look up the last affected modified section.\n    let k2 = ArrayExt.upperBound(this._sections, i2, Private.indexCmp) - 1;\n\n    // Bail early if there are no affected modified sections.\n    if (k2 < k1) {\n      return;\n    }\n\n    // Compute the pivot index.\n    let pivot = destination < index ? index : index + count;\n\n    // Compute the count for each side of the pivot.\n    let count1 = pivot - i1;\n    let count2 = i2 - pivot + 1;\n\n    // Compute the span for each side of the pivot.\n    let span1 = count1 * this._defaultSize;\n    let span2 = count2 * this._defaultSize;\n\n    // Adjust the spans for the modified sections.\n    for (let j = k1; j <= k2; ++j) {\n      let section = this._sections[j];\n      if (section.index < pivot) {\n        span1 += section.size - this._defaultSize;\n      } else {\n        span2 += section.size - this._defaultSize;\n      }\n    }\n\n    // Look up the pivot section.\n    let k3 = ArrayExt.lowerBound(this._sections, pivot, Private.indexCmp);\n\n    // Rotate the modified sections if needed.\n    if (k1 <= k3 && k3 <= k2) {\n      ArrayExt.rotate(this._sections, k3 - k1, k1, k2);\n    }\n\n    // Adjust the modified section indices and offsets.\n    for (let j = k1; j <= k2; ++j) {\n      let section = this._sections[j];\n      if (section.index < pivot) {\n        section.index += count2;\n        section.offset += span2;\n      } else {\n        section.index -= count1;\n        section.offset -= span1;\n      }\n    }\n  }\n\n  /**\n   * Reset all modified sections to the default size.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  reset(): void {\n    this._sections.length = 0;\n    this._length = this._count * this._defaultSize;\n  }\n\n  /**\n   * Remove all sections from the list.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  clear(): void {\n    this._count = 0;\n    this._length = 0;\n    this._sections.length = 0;\n  }\n\n  private _count = 0;\n  private _length = 0;\n  private _minimumSize: number;\n  private _defaultSize: number;\n  private _sections: Private.Section[] = [];\n}\n\n/**\n * The namespace for the `SectionList` class statics.\n */\nexport namespace SectionList {\n  /**\n   * An options object for initializing a section list.\n   */\n  export interface IOptions {\n    /**\n     * The size of new sections added to the list.\n     */\n    defaultSize: number;\n\n    /**\n     * The minimum size of the section list.\n     */\n    minimumSize?: number;\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * An object which represents a modified section.\n   */\n  export type Section = {\n    /**\n     * The index of the section.\n     *\n     * This is always `>= 0`.\n     */\n    index: number;\n\n    /**\n     * The offset of the section.\n     */\n    offset: number;\n\n    /**\n     * The size of the section.\n     *\n     * This is always `>= 0`.\n     */\n    size: number;\n  };\n\n  /**\n   * A comparison function for searching by offset.\n   */\n  export function offsetCmp(section: Section, offset: number): number {\n    if (offset < section.offset) {\n      return 1;\n    }\n    if (section.offset + section.size <= offset) {\n      return -1;\n    }\n    return 0;\n  }\n\n  /**\n   * A comparison function for searching by index.\n   */\n  export function indexCmp(section: Section, index: number): number {\n    return section.index - index;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { IDisposable } from '@lumino/disposable';\n\nimport { ClipboardExt, ElementExt, Platform } from '@lumino/domutils';\n\nimport {\n  ConflatableMessage,\n  IMessageHandler,\n  Message,\n  MessageLoop\n} from '@lumino/messaging';\n\nimport { GridLayout, ScrollBar, Widget } from '@lumino/widgets';\n\nimport { AsyncCellRenderer } from './asynccellrenderer';\n\nimport { CellRenderer } from './cellrenderer';\n\nimport { DataModel, MutableDataModel } from './datamodel';\n\nimport { CellGroup } from './cellgroup';\n\nimport { GraphicsContext } from './graphicscontext';\n\nimport { RendererMap } from './renderermap';\n\nimport { SectionList } from './sectionlist';\n\nimport { SelectionModel } from './selectionmodel';\n\nimport {\n  CellEditorController,\n  ICellEditorController\n} from './celleditorcontroller';\n\nimport { TextRenderer } from './textrenderer';\n\n/**\n * A widget which implements a high-performance tabular data grid.\n *\n * #### Notes\n * A data grid is implemented as a composition of child widgets. These\n * child widgets are considered an implementation detail. Manipulating\n * the child widgets of a data grid directly is undefined behavior.\n *\n * This class is not designed to be subclassed.\n */\nexport class DataGrid extends Widget {\n  /**\n   * Construct a new data grid.\n   *\n   * @param options - The options for initializing the data grid.\n   */\n  constructor(options: DataGrid.IOptions = {}) {\n    super();\n    this.addClass('lm-DataGrid');\n\n    // Parse the simple options.\n    this._style = options.style || DataGrid.defaultStyle;\n    this._stretchLastRow = options.stretchLastRow || false;\n    this._stretchLastColumn = options.stretchLastColumn || false;\n    this._headerVisibility = options.headerVisibility || 'all';\n    this._cellRenderers = options.cellRenderers || new RendererMap();\n    this._copyConfig = options.copyConfig || DataGrid.defaultCopyConfig;\n\n    // Connect to the renderer map changed signal.\n    this._cellRenderers.changed.connect(this._onRenderersChanged, this);\n\n    // Parse the default sizes.\n    let defaultSizes = options.defaultSizes || DataGrid.defaultSizes;\n    let minimumSizes = options.minimumSizes || DataGrid.minimumSizes;\n\n    // Set up the sections lists.\n    this._rowSections = new SectionList({\n      defaultSize: defaultSizes.rowHeight,\n      minimumSize: minimumSizes.rowHeight\n    });\n    this._columnSections = new SectionList({\n      defaultSize: defaultSizes.columnWidth,\n      minimumSize: minimumSizes.columnWidth\n    });\n    this._rowHeaderSections = new SectionList({\n      defaultSize: defaultSizes.rowHeaderWidth,\n      minimumSize: minimumSizes.rowHeaderWidth\n    });\n    this._columnHeaderSections = new SectionList({\n      defaultSize: defaultSizes.columnHeaderHeight,\n      minimumSize: minimumSizes.columnHeaderHeight\n    });\n\n    // Create the canvas, buffer, and overlay objects.\n    this._canvas = Private.createCanvas();\n    this._buffer = Private.createCanvas();\n    this._overlay = Private.createCanvas();\n\n    // Get the graphics contexts for the canvases.\n    this._canvasGC = this._canvas.getContext('2d')!;\n    this._bufferGC = this._buffer.getContext('2d')!;\n    this._overlayGC = this._overlay.getContext('2d')!;\n\n    // Set up the on-screen canvas.\n    this._canvas.style.position = 'absolute';\n    this._canvas.style.top = '0px';\n    this._canvas.style.left = '0px';\n    this._canvas.style.width = '0px';\n    this._canvas.style.height = '0px';\n\n    // Set up the on-screen overlay.\n    this._overlay.style.position = 'absolute';\n    this._overlay.style.top = '0px';\n    this._overlay.style.left = '0px';\n    this._overlay.style.width = '0px';\n    this._overlay.style.height = '0px';\n\n    // Create the internal widgets for the data grid.\n    this._viewport = new Widget();\n    this._viewport.node.tabIndex = -1;\n    this._viewport.node.style.outline = 'none';\n    this._vScrollBar = new ScrollBar({ orientation: 'vertical' });\n    this._hScrollBar = new ScrollBar({ orientation: 'horizontal' });\n    this._scrollCorner = new Widget();\n\n    this._editorController = new CellEditorController();\n\n    // Add the extra class names to the child widgets.\n    this._viewport.addClass('lm-DataGrid-viewport');\n    this._vScrollBar.addClass('lm-DataGrid-scrollBar');\n    this._hScrollBar.addClass('lm-DataGrid-scrollBar');\n    this._scrollCorner.addClass('lm-DataGrid-scrollCorner');\n\n    // Add the on-screen canvas to the viewport node.\n    this._viewport.node.appendChild(this._canvas);\n\n    // Add the on-screen overlay to the viewport node.\n    this._viewport.node.appendChild(this._overlay);\n\n    // Install the message hooks.\n    MessageLoop.installMessageHook(this._viewport, this);\n    MessageLoop.installMessageHook(this._hScrollBar, this);\n    MessageLoop.installMessageHook(this._vScrollBar, this);\n\n    // Hide the scroll bars and corner from the outset.\n    this._vScrollBar.hide();\n    this._hScrollBar.hide();\n    this._scrollCorner.hide();\n\n    // Connect to the scroll bar signals.\n    this._vScrollBar.thumbMoved.connect(this._onThumbMoved, this);\n    this._hScrollBar.thumbMoved.connect(this._onThumbMoved, this);\n    this._vScrollBar.pageRequested.connect(this._onPageRequested, this);\n    this._hScrollBar.pageRequested.connect(this._onPageRequested, this);\n    this._vScrollBar.stepRequested.connect(this._onStepRequested, this);\n    this._hScrollBar.stepRequested.connect(this._onStepRequested, this);\n\n    // Set the layout cell config for the child widgets.\n    GridLayout.setCellConfig(this._viewport, { row: 0, column: 0 });\n    GridLayout.setCellConfig(this._vScrollBar, { row: 0, column: 1 });\n    GridLayout.setCellConfig(this._hScrollBar, { row: 1, column: 0 });\n    GridLayout.setCellConfig(this._scrollCorner, { row: 1, column: 1 });\n\n    // Create the layout for the data grid.\n    let layout = new GridLayout({\n      rowCount: 2,\n      columnCount: 2,\n      rowSpacing: 0,\n      columnSpacing: 0,\n      fitPolicy: 'set-no-constraint'\n    });\n\n    // Set the stretch factors for the grid.\n    layout.setRowStretch(0, 1);\n    layout.setRowStretch(1, 0);\n    layout.setColumnStretch(0, 1);\n    layout.setColumnStretch(1, 0);\n\n    // Add the child widgets to the layout.\n    layout.addWidget(this._viewport);\n    layout.addWidget(this._vScrollBar);\n    layout.addWidget(this._hScrollBar);\n    layout.addWidget(this._scrollCorner);\n\n    // Install the layout on the data grid.\n    this.layout = layout;\n  }\n\n  /**\n   * Dispose of the resources held by the widgets.\n   */\n  dispose(): void {\n    // Release the mouse.\n    this._releaseMouse();\n\n    // Dispose of the handlers.\n    if (this._keyHandler) {\n      this._keyHandler.dispose();\n    }\n    if (this._mouseHandler) {\n      this._mouseHandler.dispose();\n    }\n    this._keyHandler = null;\n    this._mouseHandler = null;\n\n    // Clear the models.\n    this._dataModel = null;\n    this._selectionModel = null;\n\n    // Clear the section lists.\n    this._rowSections.clear();\n    this._columnSections.clear();\n    this._rowHeaderSections.clear();\n    this._columnHeaderSections.clear();\n\n    // Dispose of the base class.\n    super.dispose();\n  }\n\n  /**\n   * Get the data model for the data grid.\n   */\n  get dataModel(): DataModel | null {\n    return this._dataModel;\n  }\n\n  /**\n   * Set the data model for the data grid.\n   *\n   * #### Notes\n   * This will automatically remove the current selection model.\n   */\n  set dataModel(value: DataModel | null) {\n    // Do nothing if the model does not change.\n    if (this._dataModel === value) {\n      return;\n    }\n\n    // Release the mouse.\n    this._releaseMouse();\n\n    // Clear the selection model.\n    this.selectionModel = null;\n\n    // Disconnect the change handler from the old model.\n    if (this._dataModel) {\n      this._dataModel.changed.disconnect(this._onDataModelChanged, this);\n    }\n\n    // Connect the change handler for the new model.\n    if (value) {\n      value.changed.connect(this._onDataModelChanged, this);\n    }\n\n    // Update the internal model reference.\n    this._dataModel = value;\n\n    // Clear the section lists.\n    this._rowSections.clear();\n    this._columnSections.clear();\n    this._rowHeaderSections.clear();\n    this._columnHeaderSections.clear();\n\n    // Populate the section lists.\n    if (value) {\n      this._rowSections.insert(0, value.rowCount('body'));\n      this._columnSections.insert(0, value.columnCount('body'));\n      this._rowHeaderSections.insert(0, value.columnCount('row-header'));\n      this._columnHeaderSections.insert(0, value.rowCount('column-header'));\n    }\n\n    // Reset the scroll position.\n    this._scrollX = 0;\n    this._scrollY = 0;\n\n    // Sync the viewport.\n    this._syncViewport();\n  }\n\n  /**\n   * Get the selection model for the data grid.\n   */\n  get selectionModel(): SelectionModel | null {\n    return this._selectionModel;\n  }\n\n  /**\n   * Set the selection model for the data grid.\n   */\n  set selectionModel(value: SelectionModel | null) {\n    // Do nothing if the selection model does not change.\n    if (this._selectionModel === value) {\n      return;\n    }\n\n    // Release the mouse.\n    this._releaseMouse();\n\n    // Ensure the data models are a match.\n    if (value && value.dataModel !== this._dataModel) {\n      throw new Error('SelectionModel.dataModel !== DataGrid.dataModel');\n    }\n\n    // Disconnect the change handler from the old model.\n    if (this._selectionModel) {\n      this._selectionModel.changed.disconnect(this._onSelectionsChanged, this);\n    }\n\n    // Connect the change handler for the new model.\n    if (value) {\n      value.changed.connect(this._onSelectionsChanged, this);\n    }\n\n    // Update the internal selection model reference.\n    this._selectionModel = value;\n\n    // Schedule a repaint of the overlay.\n    this.repaintOverlay();\n  }\n\n  /**\n   * Get the key handler for the data grid.\n   */\n  get keyHandler(): DataGrid.IKeyHandler | null {\n    return this._keyHandler;\n  }\n\n  /**\n   * Set the key handler for the data grid.\n   */\n  set keyHandler(value: DataGrid.IKeyHandler | null) {\n    this._keyHandler = value;\n  }\n\n  /**\n   * Get the mouse handler for the data grid.\n   */\n  get mouseHandler(): DataGrid.IMouseHandler | null {\n    return this._mouseHandler;\n  }\n\n  /**\n   * Set the mouse handler for the data grid.\n   */\n  set mouseHandler(value: DataGrid.IMouseHandler | null) {\n    // Bail early if the mouse handler does not change.\n    if (this._mouseHandler === value) {\n      return;\n    }\n\n    // Release the mouse.\n    this._releaseMouse();\n\n    // Update the internal mouse handler.\n    this._mouseHandler = value;\n  }\n\n  /**\n   * Get the style for the data grid.\n   */\n  get style(): DataGrid.Style {\n    return this._style;\n  }\n\n  /**\n   * Set the style for the data grid.\n   */\n  set style(value: DataGrid.Style) {\n    // Bail if the style does not change.\n    if (this._style === value) {\n      return;\n    }\n\n    // Update the internal style.\n    this._style = { ...value };\n\n    // Schedule a repaint of the content.\n    this.repaintContent();\n\n    // Schedule a repaint of the overlay.\n    this.repaintOverlay();\n  }\n\n  /**\n   * Get the cell renderer map for the data grid.\n   */\n  get cellRenderers(): RendererMap {\n    return this._cellRenderers;\n  }\n\n  /**\n   * Set the cell renderer map for the data grid.\n   */\n  set cellRenderers(value: RendererMap) {\n    // Bail if the renderer map does not change.\n    if (this._cellRenderers === value) {\n      return;\n    }\n\n    // Disconnect the old map.\n    this._cellRenderers.changed.disconnect(this._onRenderersChanged, this);\n\n    // Connect the new map.\n    value.changed.connect(this._onRenderersChanged, this);\n\n    // Update the internal renderer map.\n    this._cellRenderers = value;\n\n    // Schedule a repaint of the grid content.\n    this.repaintContent();\n  }\n\n  /**\n   * Get the header visibility for the data grid.\n   */\n  get headerVisibility(): DataGrid.HeaderVisibility {\n    return this._headerVisibility;\n  }\n\n  /**\n   * Set the header visibility for the data grid.\n   */\n  set headerVisibility(value: DataGrid.HeaderVisibility) {\n    // Bail if the visibility does not change.\n    if (this._headerVisibility === value) {\n      return;\n    }\n\n    // Update the internal visibility.\n    this._headerVisibility = value;\n\n    // Sync the viewport.\n    this._syncViewport();\n  }\n\n  /**\n   * Get the default sizes for the various sections of the data grid.\n   */\n  get defaultSizes(): DataGrid.DefaultSizes {\n    let rowHeight = this._rowSections.defaultSize;\n    let columnWidth = this._columnSections.defaultSize;\n    let rowHeaderWidth = this._rowHeaderSections.defaultSize;\n    let columnHeaderHeight = this._columnHeaderSections.defaultSize;\n    return { rowHeight, columnWidth, rowHeaderWidth, columnHeaderHeight };\n  }\n\n  /**\n   * Set the default sizes for the various sections of the data grid.\n   */\n  set defaultSizes(value: DataGrid.DefaultSizes) {\n    // Update the section default sizes.\n    this._rowSections.defaultSize = value.rowHeight;\n    this._columnSections.defaultSize = value.columnWidth;\n    this._rowHeaderSections.defaultSize = value.rowHeaderWidth;\n    this._columnHeaderSections.defaultSize = value.columnHeaderHeight;\n\n    // Sync the viewport.\n    this._syncViewport();\n  }\n\n  /**\n   * Get the minimum sizes for the various sections of the data grid.\n   */\n  get minimumSizes(): DataGrid.DefaultSizes {\n    let rowHeight = this._rowSections.minimumSize;\n    let columnWidth = this._columnSections.minimumSize;\n    let rowHeaderWidth = this._rowHeaderSections.minimumSize;\n    let columnHeaderHeight = this._columnHeaderSections.minimumSize;\n    return { rowHeight, columnWidth, rowHeaderWidth, columnHeaderHeight };\n  }\n\n  /**\n   * Set the minimum sizes for the various sections of the data grid.\n   */\n  set minimumSizes(value: DataGrid.DefaultSizes) {\n    // Update the section default sizes.\n    this._rowSections.minimumSize = value.rowHeight;\n    this._columnSections.minimumSize = value.columnWidth;\n    this._rowHeaderSections.minimumSize = value.rowHeaderWidth;\n    this._columnHeaderSections.minimumSize = value.columnHeaderHeight;\n\n    // Sync the viewport.\n    this._syncViewport();\n  }\n\n  /**\n   * Get the copy configuration for the data grid.\n   */\n  get copyConfig(): DataGrid.CopyConfig {\n    return this._copyConfig;\n  }\n\n  /**\n   * Set the copy configuration for the data grid.\n   */\n  set copyConfig(value: DataGrid.CopyConfig) {\n    this._copyConfig = value;\n  }\n\n  /**\n   * Get whether the last row is stretched.\n   */\n  get stretchLastRow(): boolean {\n    return this._stretchLastRow;\n  }\n\n  /**\n   * Set whether the last row is stretched.\n   */\n  set stretchLastRow(value: boolean) {\n    // Bail early if the value does not change.\n    if (value === this._stretchLastRow) {\n      return;\n    }\n\n    // Update the internal value.\n    this._stretchLastRow = value;\n\n    // Sync the viewport\n    this._syncViewport();\n  }\n\n  /**\n   * Get whether the last column is stretched.\n   */\n  get stretchLastColumn(): boolean {\n    return this._stretchLastColumn;\n  }\n\n  /**\n   * Set whether the last column is stretched.\n   */\n  set stretchLastColumn(value: boolean) {\n    // Bail early if the value does not change.\n    if (value === this._stretchLastColumn) {\n      return;\n    }\n\n    // Update the internal value.\n    this._stretchLastColumn = value;\n\n    // Sync the viewport\n    this._syncViewport();\n  }\n\n  /**\n   * The virtual width of the row headers.\n   */\n  get headerWidth(): number {\n    if (this._headerVisibility === 'none') {\n      return 0;\n    }\n    if (this._headerVisibility === 'column') {\n      return 0;\n    }\n    return this._rowHeaderSections.length;\n  }\n\n  /**\n   * The virtual height of the column headers.\n   */\n  get headerHeight(): number {\n    if (this._headerVisibility === 'none') {\n      return 0;\n    }\n    if (this._headerVisibility === 'row') {\n      return 0;\n    }\n    return this._columnHeaderSections.length;\n  }\n\n  /**\n   * The virtual width of the grid body.\n   *\n   * #### Notes\n   * This does *not* account for a stretched last column.\n   */\n  get bodyWidth(): number {\n    return this._columnSections.length;\n  }\n\n  /**\n   * The virtual height of the grid body.\n   *\n   * #### Notes\n   * This does *not* account for a stretched last row.\n   */\n  get bodyHeight(): number {\n    return this._rowSections.length;\n  }\n\n  /**\n   * The virtual width of the entire grid.\n   *\n   * #### Notes\n   * This does *not* account for a stretched last column.\n   */\n  get totalWidth(): number {\n    return this.headerWidth + this.bodyWidth;\n  }\n\n  /**\n   * The virtual height of the entire grid.\n   *\n   * #### Notes\n   * This does *not* account for a stretched last row.\n   */\n  get totalHeight(): number {\n    return this.headerHeight + this.bodyHeight;\n  }\n\n  /**\n   * The actual width of the viewport.\n   */\n  get viewportWidth(): number {\n    return this._viewportWidth;\n  }\n\n  /**\n   * The actual height of the viewport.\n   */\n  get viewportHeight(): number {\n    return this._viewportHeight;\n  }\n\n  /**\n   * The width of the visible portion of the grid body.\n   */\n  get pageWidth(): number {\n    return Math.max(0, this.viewportWidth - this.headerWidth);\n  }\n\n  /**\n   * The height of the visible portion of the grid body.\n   */\n  get pageHeight(): number {\n    return Math.max(0, this.viewportHeight - this.headerHeight);\n  }\n\n  /**\n   * The current scroll X position of the viewport.\n   */\n  get scrollX(): number {\n    return this._hScrollBar.value;\n  }\n\n  /**\n   * The current scroll Y position of the viewport.\n   */\n  get scrollY(): number {\n    return this._vScrollBar.value;\n  }\n\n  /**\n   * The maximum scroll X position for the grid.\n   */\n  get maxScrollX(): number {\n    return Math.max(0, this.bodyWidth - this.pageWidth - 1);\n  }\n\n  /**\n   * The maximum scroll Y position for the grid.\n   */\n  get maxScrollY(): number {\n    return Math.max(0, this.bodyHeight - this.pageHeight - 1);\n  }\n\n  /**\n   * The viewport widget for the data grid.\n   */\n  get viewport(): Widget {\n    return this._viewport;\n  }\n\n  /**\n   * The cell editor controller object for the data grid.\n   */\n  get editorController(): ICellEditorController | null {\n    return this._editorController;\n  }\n\n  set editorController(controller: ICellEditorController | null) {\n    this._editorController = controller;\n  }\n\n  /**\n   * Whether the cell editing is enabled for the data grid.\n   */\n  get editingEnabled(): boolean {\n    return this._editingEnabled;\n  }\n\n  set editingEnabled(enabled: boolean) {\n    this._editingEnabled = enabled;\n  }\n\n  /**\n   * Whether the grid cells are editable.\n   *\n   * `editingEnabled` flag must be on and grid must have required\n   * selection model, editor controller and data model properties.\n   */\n  get editable(): boolean {\n    return (\n      this._editingEnabled &&\n      this._selectionModel !== null &&\n      this._editorController !== null &&\n      this.dataModel instanceof MutableDataModel\n    );\n  }\n\n  /**\n   * The rendering context for painting the data grid.\n   */\n  protected get canvasGC(): CanvasRenderingContext2D {\n    return this._canvasGC;\n  }\n\n  /**\n   * The row sections of the data grid.\n   */\n  protected get rowSections(): SectionList {\n    return this._rowSections;\n  }\n\n  /**\n   * The column sections of the data grid.\n   */\n  protected get columnSections(): SectionList {\n    return this._columnSections;\n  }\n\n  /**\n   * The row header sections of the data grid.\n   */\n  protected get rowHeaderSections(): SectionList {\n    return this._rowHeaderSections;\n  }\n\n  /**\n   * The column header sections of the data grid.\n   */\n  protected get columnHeaderSections(): SectionList {\n    return this._columnHeaderSections;\n  }\n\n  /**\n   * Scroll the grid to the specified row.\n   *\n   * @param row - The row index of the cell.\n   *\n   * #### Notes\n   * This is a no-op if the row is already visible.\n   */\n  scrollToRow(row: number): void {\n    // Fetch the row count.\n    let nr = this._rowSections.count;\n\n    // Bail early if there is no content.\n    if (nr === 0) {\n      return;\n    }\n\n    // Floor the row index.\n    row = Math.floor(row);\n\n    // Clamp the row index.\n    row = Math.max(0, Math.min(row, nr - 1));\n\n    // Get the virtual bounds of the row.\n    let y1 = this._rowSections.offsetOf(row);\n    let y2 = this._rowSections.extentOf(row);\n\n    // Get the virtual bounds of the viewport.\n    let vy1 = this._scrollY;\n    let vy2 = this._scrollY + this.pageHeight - 1;\n\n    // Set up the delta variables.\n    let dy = 0;\n\n    // Compute the delta Y scroll.\n    if (y1 < vy1) {\n      dy = y1 - vy1 - 10;\n    } else if (y2 > vy2) {\n      dy = y2 - vy2 + 10;\n    }\n\n    // Bail early if no scroll is needed.\n    if (dy === 0) {\n      return;\n    }\n\n    // Scroll by the computed delta.\n    this.scrollBy(0, dy);\n  }\n\n  /**\n   * Scroll the grid to the specified column.\n   *\n   * @param column - The column index of the cell.\n   *\n   * #### Notes\n   * This is a no-op if the column is already visible.\n   */\n  scrollToColumn(column: number): void {\n    // Fetch the column count.\n    let nc = this._columnSections.count;\n\n    // Bail early if there is no content.\n    if (nc === 0) {\n      return;\n    }\n\n    // Floor the column index.\n    column = Math.floor(column);\n\n    // Clamp the column index.\n    column = Math.max(0, Math.min(column, nc - 1));\n\n    // Get the virtual bounds of the column.\n    let x1 = this._columnSections.offsetOf(column);\n    let x2 = this._columnSections.extentOf(column);\n\n    // Get the virtual bounds of the viewport.\n    let vx1 = this._scrollX;\n    let vx2 = this._scrollX + this.pageWidth - 1;\n\n    // Set up the delta variables.\n    let dx = 0;\n\n    // Compute the delta X scroll.\n    if (x1 < vx1) {\n      dx = x1 - vx1 - 10;\n    } else if (x2 > vx2) {\n      dx = x2 - vx2 + 10;\n    }\n\n    // Bail early if no scroll is needed.\n    if (dx === 0) {\n      return;\n    }\n\n    // Scroll by the computed delta.\n    this.scrollBy(dx, 0);\n  }\n\n  /**\n   * Scroll the grid to the specified cell.\n   *\n   * @param row - The row index of the cell.\n   *\n   * @param column - The column index of the cell.\n   *\n   * #### Notes\n   * This is a no-op if the cell is already visible.\n   */\n  scrollToCell(row: number, column: number): void {\n    // Fetch the row and column count.\n    let nr = this._rowSections.count;\n    let nc = this._columnSections.count;\n\n    // Bail early if there is no content.\n    if (nr === 0 || nc === 0) {\n      return;\n    }\n\n    // Floor the cell index.\n    row = Math.floor(row);\n    column = Math.floor(column);\n\n    // Clamp the cell index.\n    row = Math.max(0, Math.min(row, nr - 1));\n    column = Math.max(0, Math.min(column, nc - 1));\n\n    // Get the virtual bounds of the cell.\n    let x1 = this._columnSections.offsetOf(column);\n    let x2 = this._columnSections.extentOf(column);\n    let y1 = this._rowSections.offsetOf(row);\n    let y2 = this._rowSections.extentOf(row);\n\n    // Get the virtual bounds of the viewport.\n    let vx1 = this._scrollX;\n    let vx2 = this._scrollX + this.pageWidth - 1;\n    let vy1 = this._scrollY;\n    let vy2 = this._scrollY + this.pageHeight - 1;\n\n    // Set up the delta variables.\n    let dx = 0;\n    let dy = 0;\n\n    // Compute the delta X scroll.\n    if (x1 < vx1) {\n      dx = x1 - vx1 - 10;\n    } else if (x2 > vx2) {\n      dx = x2 - vx2 + 10;\n    }\n\n    // Compute the delta Y scroll.\n    if (y1 < vy1) {\n      dy = y1 - vy1 - 10;\n    } else if (y2 > vy2) {\n      dy = y2 - vy2 + 10;\n    }\n\n    // Bail early if no scroll is needed.\n    if (dx === 0 && dy === 0) {\n      return;\n    }\n\n    // Scroll by the computed delta.\n    this.scrollBy(dx, dy);\n  }\n\n  /**\n   * Move cursor down/up/left/right while making sure it remains\n   * within the bounds of selected rectangles\n   *\n   * @param direction - The direction of the movement.\n   */\n  moveCursor(direction: SelectionModel.CursorMoveDirection): void {\n    // Bail early if there is no selection\n    if (\n      !this.dataModel ||\n      !this._selectionModel ||\n      this._selectionModel.isEmpty\n    ) {\n      return;\n    }\n\n    const iter = this._selectionModel.selections();\n    const onlyOne = iter.next() && !iter.next();\n\n    // if there is a single selection that is a single cell selection\n    // then move the selection and cursor within grid bounds\n    if (onlyOne) {\n      const currentSel = this._selectionModel.currentSelection()!;\n      if (currentSel.r1 === currentSel.r2 && currentSel.c1 === currentSel.c2) {\n        const dr = direction === 'down' ? 1 : direction === 'up' ? -1 : 0;\n        const dc = direction === 'right' ? 1 : direction === 'left' ? -1 : 0;\n        let newRow = currentSel.r1 + dr;\n        let newColumn = currentSel.c1 + dc;\n        const rowCount = this.dataModel.rowCount('body');\n        const columnCount = this.dataModel.columnCount('body');\n        if (newRow >= rowCount) {\n          newRow = 0;\n          newColumn += 1;\n        } else if (newRow === -1) {\n          newRow = rowCount - 1;\n          newColumn -= 1;\n        }\n        if (newColumn >= columnCount) {\n          newColumn = 0;\n          newRow += 1;\n          if (newRow >= rowCount) {\n            newRow = 0;\n          }\n        } else if (newColumn === -1) {\n          newColumn = columnCount - 1;\n          newRow -= 1;\n          if (newRow === -1) {\n            newRow = rowCount - 1;\n          }\n        }\n\n        this._selectionModel.select({\n          r1: newRow,\n          c1: newColumn,\n          r2: newRow,\n          c2: newColumn,\n          cursorRow: newRow,\n          cursorColumn: newColumn,\n          clear: 'all'\n        });\n\n        return;\n      }\n    }\n\n    // if there are multiple selections, move cursor\n    // within selection rectangles\n    this._selectionModel.moveCursorWithinSelections(direction);\n  }\n\n  /**\n   * Scroll the grid to the current cursor position.\n   *\n   * #### Notes\n   * This is a no-op if the cursor is already visible or\n   * if there is no selection model installed on the grid.\n   */\n  scrollToCursor(): void {\n    // Bail early if there is no selection model.\n    if (!this._selectionModel) {\n      return;\n    }\n\n    // Fetch the cursor row and column.\n    let row = this._selectionModel.cursorRow;\n    let column = this._selectionModel.cursorColumn;\n\n    // Scroll to the cursor cell.\n    this.scrollToCell(row, column);\n  }\n\n  /**\n   * Scroll the viewport by the specified amount.\n   *\n   * @param dx - The X scroll amount.\n   *\n   * @param dy - The Y scroll amount.\n   */\n  scrollBy(dx: number, dy: number): void {\n    this.scrollTo(this.scrollX + dx, this.scrollY + dy);\n  }\n\n  /**\n   * Scroll the viewport by one page.\n   *\n   * @param dir - The desired direction of the scroll.\n   */\n  scrollByPage(dir: 'up' | 'down' | 'left' | 'right'): void {\n    let dx = 0;\n    let dy = 0;\n    switch (dir) {\n      case 'up':\n        dy = -this.pageHeight;\n        break;\n      case 'down':\n        dy = this.pageHeight;\n        break;\n      case 'left':\n        dx = -this.pageWidth;\n        break;\n      case 'right':\n        dx = this.pageWidth;\n        break;\n      default:\n        throw 'unreachable';\n    }\n    this.scrollTo(this.scrollX + dx, this.scrollY + dy);\n  }\n\n  /**\n   * Scroll the viewport by one cell-aligned step.\n   *\n   * @param dir - The desired direction of the scroll.\n   */\n  scrollByStep(dir: 'up' | 'down' | 'left' | 'right'): void {\n    let r: number;\n    let c: number;\n    let x = this.scrollX;\n    let y = this.scrollY;\n    let rows = this._rowSections;\n    let columns = this._columnSections;\n    switch (dir) {\n      case 'up':\n        r = rows.indexOf(y - 1);\n        y = r < 0 ? y : rows.offsetOf(r);\n        break;\n      case 'down':\n        r = rows.indexOf(y);\n        y = r < 0 ? y : rows.offsetOf(r) + rows.sizeOf(r);\n        break;\n      case 'left':\n        c = columns.indexOf(x - 1);\n        x = c < 0 ? x : columns.offsetOf(c);\n        break;\n      case 'right':\n        c = columns.indexOf(x);\n        x = c < 0 ? x : columns.offsetOf(c) + columns.sizeOf(c);\n        break;\n      default:\n        throw 'unreachable';\n    }\n    this.scrollTo(x, y);\n  }\n\n  /**\n   * Scroll to the specified offset position.\n   *\n   * @param x - The desired X position.\n   *\n   * @param y - The desired Y position.\n   */\n  scrollTo(x: number, y: number): void {\n    // Floor and clamp the position to the allowable range.\n    x = Math.max(0, Math.min(Math.floor(x), this.maxScrollX));\n    y = Math.max(0, Math.min(Math.floor(y), this.maxScrollY));\n\n    // Update the scroll bar values with the desired position.\n    this._hScrollBar.value = x;\n    this._vScrollBar.value = y;\n\n    // Post a scroll request message to the viewport.\n    MessageLoop.postMessage(this._viewport, Private.ScrollRequest);\n  }\n\n  /**\n   * Get the row count for a particular region in the data grid.\n   *\n   * @param region - The row region of interest.\n   *\n   * @returns The row count for the specified region.\n   */\n  rowCount(region: DataModel.RowRegion): number {\n    let count: number;\n    if (region === 'body') {\n      count = this._rowSections.count;\n    } else {\n      count = this._columnHeaderSections.count;\n    }\n    return count;\n  }\n\n  /**\n   * Get the column count for a particular region in the data grid.\n   *\n   * @param region - The column region of interest.\n   *\n   * @returns The column count for the specified region.\n   */\n  columnCount(region: DataModel.ColumnRegion): number {\n    let count: number;\n    if (region === 'body') {\n      count = this._columnSections.count;\n    } else {\n      count = this._rowHeaderSections.count;\n    }\n    return count;\n  }\n\n  /**\n   * Get the row at a virtual offset in the data grid.\n   *\n   * @param region - The region which holds the row of interest.\n   *\n   * @param offset - The virtual offset of the row of interest.\n   *\n   * @returns The index of the row, or `-1` if the offset is out of range.\n   *\n   * #### Notes\n   * This method accounts for a stretched last row.\n   */\n  rowAt(region: DataModel.RowRegion, offset: number): number {\n    // Bail early if the offset is negative.\n    if (offset < 0) {\n      return -1;\n    }\n\n    // Return early for the column header region.\n    if (region === 'column-header') {\n      return this._columnHeaderSections.indexOf(offset);\n    }\n\n    // Fetch the index.\n    let index = this._rowSections.indexOf(offset);\n\n    // Return early if the section is found.\n    if (index >= 0) {\n      return index;\n    }\n\n    // Bail early if the last row is not stretched.\n    if (!this._stretchLastRow) {\n      return -1;\n    }\n\n    // Fetch the geometry.\n    let bh = this.bodyHeight;\n    let ph = this.pageHeight;\n\n    // Bail early if no row stretching is required.\n    if (ph <= bh) {\n      return -1;\n    }\n\n    // Bail early if the offset is out of bounds.\n    if (offset >= ph) {\n      return -1;\n    }\n\n    // Otherwise, return the last row.\n    return this._rowSections.count - 1;\n  }\n\n  /**\n   * Get the column at a virtual offset in the data grid.\n   *\n   * @param region - The region which holds the column of interest.\n   *\n   * @param offset - The virtual offset of the column of interest.\n   *\n   * @returns The index of the column, or `-1` if the offset is out of range.\n   *\n   * #### Notes\n   * This method accounts for a stretched last column.\n   */\n  columnAt(region: DataModel.ColumnRegion, offset: number): number {\n    if (offset < 0) {\n      return -1;\n    }\n\n    // Return early for the row header region.\n    if (region === 'row-header') {\n      return this._rowHeaderSections.indexOf(offset);\n    }\n\n    // Fetch the index.\n    let index = this._columnSections.indexOf(offset);\n\n    // Return early if the section is found.\n    if (index >= 0) {\n      return index;\n    }\n\n    // Bail early if the last column is not stretched.\n    if (!this._stretchLastColumn) {\n      return -1;\n    }\n\n    // Fetch the geometry.\n    let bw = this.bodyWidth;\n    let pw = this.pageWidth;\n\n    // Bail early if no column stretching is required.\n    if (pw <= bw) {\n      return -1;\n    }\n\n    // Bail early if the offset is out of bounds.\n    if (offset >= pw) {\n      return -1;\n    }\n\n    // Otherwise, return the last column.\n    return this._columnSections.count - 1;\n  }\n\n  /**\n   * Get the offset of a row in the data grid.\n   *\n   * @param region - The region which holds the row of interest.\n   *\n   * @param index - The index of the row of interest.\n   *\n   * @returns The offset of the row, or `-1` if the index is out of range.\n   *\n   * #### Notes\n   * A stretched last row has no effect on the return value.\n   */\n  rowOffset(region: DataModel.RowRegion, index: number): number {\n    let offset: number;\n    if (region === 'body') {\n      offset = this._rowSections.offsetOf(index);\n    } else {\n      offset = this._columnHeaderSections.offsetOf(index);\n    }\n    return offset;\n  }\n\n  /**\n   * Get the offset of a column in the data grid.\n   *\n   * @param region - The region which holds the column of interest.\n   *\n   * @param index - The index of the column of interest.\n   *\n   * @returns The offset of the column, or `-1` if the index is out of range.\n   *\n   * #### Notes\n   * A stretched last column has no effect on the return value.\n   */\n  columnOffset(region: DataModel.ColumnRegion, index: number): number {\n    let offset: number;\n    if (region === 'body') {\n      offset = this._columnSections.offsetOf(index);\n    } else {\n      offset = this._rowHeaderSections.offsetOf(index);\n    }\n    return offset;\n  }\n\n  /**\n   * Get the size of a row in the data grid.\n   *\n   * @param region - The region which holds the row of interest.\n   *\n   * @param index - The index of the row of interest.\n   *\n   * @returns The size of the row, or `-1` if the index is out of range.\n   *\n   * #### Notes\n   * This method accounts for a stretched last row.\n   */\n  rowSize(region: DataModel.RowRegion, index: number): number {\n    // Return early for the column header region.\n    if (region === 'column-header') {\n      return this._columnHeaderSections.sizeOf(index);\n    }\n\n    // Fetch the row size.\n    let size = this._rowSections.sizeOf(index);\n\n    // Bail early if the index is out of bounds.\n    if (size < 0) {\n      return size;\n    }\n\n    // Return early if the last row is not stretched.\n    if (!this._stretchLastRow) {\n      return size;\n    }\n\n    // Return early if its not the last row.\n    if (index < this._rowSections.count - 1) {\n      return size;\n    }\n\n    // Fetch the geometry.\n    let bh = this.bodyHeight;\n    let ph = this.pageHeight;\n\n    // Return early if no stretching is needed.\n    if (ph <= bh) {\n      return size;\n    }\n\n    // Return the adjusted size.\n    return size + (ph - bh);\n  }\n\n  /**\n   * Get the size of a column in the data grid.\n   *\n   * @param region - The region which holds the column of interest.\n   *\n   * @param index - The index of the column of interest.\n   *\n   * @returns The size of the column, or `-1` if the index is out of range.\n   *\n   * #### Notes\n   * This method accounts for a stretched last column.\n   */\n  columnSize(region: DataModel.ColumnRegion, index: number): number {\n    // Return early for the row header region.\n    if (region === 'row-header') {\n      return this._rowHeaderSections.sizeOf(index);\n    }\n\n    // Fetch the column size.\n    let size = this._columnSections.sizeOf(index);\n\n    // Bail early if the index is out of bounds.\n    if (size < 0) {\n      return size;\n    }\n\n    // Return early if the last column is not stretched.\n    if (!this._stretchLastColumn) {\n      return size;\n    }\n\n    // Return early if its not the last column.\n    if (index < this._columnSections.count - 1) {\n      return size;\n    }\n\n    // Fetch the geometry.\n    let bw = this.bodyWidth;\n    let pw = this.pageWidth;\n\n    // Return early if no stretching is needed.\n    if (pw <= bw) {\n      return size;\n    }\n\n    // Return the adjusted size.\n    return size + (pw - bw);\n  }\n\n  /**\n   * Resize a row in the data grid.\n   *\n   * @param region - The region which holds the row of interest.\n   *\n   * @param index - The index of the row of interest.\n   *\n   * @param size - The desired size of the row.\n   */\n  resizeRow(region: DataModel.RowRegion, index: number, size: number): void {\n    let msg = new Private.RowResizeRequest(region, index, size);\n    MessageLoop.postMessage(this._viewport, msg);\n  }\n\n  /**\n   * Resize a column in the data grid.\n   *\n   * @param region - The region which holds the column of interest.\n   *\n   * @param index - The index of the column of interest.\n   *\n   * @param size - The desired size of the column.\n   */\n  resizeColumn(\n    region: DataModel.ColumnRegion,\n    index: number,\n    size: number | null\n  ): void {\n    let msg = new Private.ColumnResizeRequest(region, index, size);\n    MessageLoop.postMessage(this._viewport, msg);\n  }\n\n  /**\n   * Reset modified rows to their default size.\n   *\n   * @param region - The row region of interest.\n   */\n  resetRows(region: DataModel.RowRegion | 'all'): void {\n    switch (region) {\n      case 'all':\n        this._rowSections.reset();\n        this._columnHeaderSections.reset();\n        break;\n      case 'body':\n        this._rowSections.reset();\n        break;\n      case 'column-header':\n        this._columnHeaderSections.reset();\n        break;\n      default:\n        throw 'unreachable';\n    }\n    this.repaintContent();\n    this.repaintOverlay();\n  }\n\n  /**\n   * Reset modified columns to their default size.\n   *\n   * @param region - The column region of interest.\n   */\n  resetColumns(region: DataModel.ColumnRegion | 'all'): void {\n    switch (region) {\n      case 'all':\n        this._columnSections.reset();\n        this._rowHeaderSections.reset();\n        break;\n      case 'body':\n        this._columnSections.reset();\n        break;\n      case 'row-header':\n        this._rowHeaderSections.reset();\n        break;\n      default:\n        throw 'unreachable';\n    }\n    this.repaintContent();\n    this.repaintOverlay();\n  }\n\n  /**\n   * Auto sizes column-header widths based on their text content.\n   * @param area which area to resize: 'body', 'row-header' or 'all'.\n   * @param padding padding added to resized columns (pixels).\n   * @param numCols specify cap on the number of column resizes (optional).\n   */\n  fitColumnNames(\n    area: DataGrid.ColumnFitType = 'all',\n    padding: number = 15,\n    numCols?: number\n  ): void {\n    // Attempt resizing only if a data model is present.\n    if (this.dataModel) {\n      // Tracking remaining columns to be resized if numCols arg passed.\n      let colsRemaining =\n        numCols === undefined || numCols < 0 ? undefined : numCols;\n\n      if (area === 'row-header' || area === 'all') {\n        // Respecting any column resize cap, if one has been passed.\n        if (colsRemaining !== undefined) {\n          const rowColumnCount = this.dataModel.columnCount('row-header');\n          /*\n            If we have more row-header columns than columns available\n            for resize, resize only remaining columns as per allowance\n            and set remaining resize allowance number to 0.\n          */\n          if (colsRemaining - rowColumnCount < 0) {\n            this._fitRowColumnHeaders(this.dataModel, padding, colsRemaining);\n            colsRemaining = 0;\n          } else {\n            /*\n              Otherwise the entire row-header column count can be resized.\n              Resize all row-header columns and subtract from remaining\n              column resize allowance.\n            */\n            this._fitRowColumnHeaders(this.dataModel, padding, rowColumnCount);\n            colsRemaining = colsRemaining - rowColumnCount;\n          }\n        } else {\n          // No column resize cap passed - resizing all columns.\n          this._fitRowColumnHeaders(this.dataModel, padding);\n        }\n      }\n\n      if (area === 'body' || area === 'all') {\n        // Respecting any column resize cap, if one has been passed.\n        if (colsRemaining !== undefined) {\n          const bodyColumnCount = this.dataModel.columnCount('body');\n          /*\n            If we have more body columns than columns available\n            for resize, resize only remaining columns as per allowance\n            and set remaining resize allowance number to 0.\n          */\n          if (colsRemaining - bodyColumnCount < 0) {\n            this._fitBodyColumnHeaders(this.dataModel, padding, colsRemaining);\n          } else {\n            /*\n              Otherwise the entire body column count can be resized.\n              Resize based on the smallest number between remaining\n              resize allowance and body column count.\n            */\n            this._fitBodyColumnHeaders(\n              this.dataModel,\n              padding,\n              Math.min(colsRemaining, bodyColumnCount)\n            );\n          }\n        } else {\n          // No column resize cap passed - resizing all columns.\n          this._fitBodyColumnHeaders(this.dataModel, padding);\n        }\n      }\n    }\n  }\n\n  /**\n   * Map a client position to local viewport coordinates.\n   *\n   * @param clientX - The client X position of the mouse.\n   *\n   * @param clientY - The client Y position of the mouse.\n   *\n   * @returns The local viewport coordinates for the position.\n   */\n  mapToLocal(clientX: number, clientY: number): { lx: number; ly: number } {\n    // Fetch the viewport rect.\n    let rect = this._viewport.node.getBoundingClientRect();\n\n    // Extract the rect coordinates.\n    let { left, top } = rect;\n\n    // Round the rect coordinates for sub-pixel positioning.\n    left = Math.floor(left);\n    top = Math.floor(top);\n\n    // Convert to local coordinates.\n    let lx = clientX - left;\n    let ly = clientY - top;\n\n    // Return the local coordinates.\n    return { lx, ly };\n  }\n\n  /**\n   * Map a client position to virtual grid coordinates.\n   *\n   * @param clientX - The client X position of the mouse.\n   *\n   * @param clientY - The client Y position of the mouse.\n   *\n   * @returns The virtual grid coordinates for the position.\n   */\n  mapToVirtual(clientX: number, clientY: number): { vx: number; vy: number } {\n    // Convert to local coordiates.\n    let { lx, ly } = this.mapToLocal(clientX, clientY);\n\n    // Convert to virtual coordinates.\n    let vx = lx + this.scrollX - this.headerWidth;\n    let vy = ly + this.scrollY - this.headerHeight;\n\n    // Return the local coordinates.\n    return { vx, vy };\n  }\n\n  /**\n   * Hit test the viewport for the given client position.\n   *\n   * @param clientX - The client X position of the mouse.\n   *\n   * @param clientY - The client Y position of the mouse.\n   *\n   * @returns The hit test result, or `null` if the client\n   *   position is out of bounds.\n   *\n   * #### Notes\n   * This method accounts for a stretched last row and/or column.\n   */\n  hitTest(clientX: number, clientY: number): DataGrid.HitTestResult {\n    // Convert the mouse position into local coordinates.\n    let { lx, ly } = this.mapToLocal(clientX, clientY);\n\n    // Fetch the header and body dimensions.\n    let hw = this.headerWidth;\n    let hh = this.headerHeight;\n    let bw = this.bodyWidth;\n    let bh = this.bodyHeight;\n    let ph = this.pageHeight;\n    let pw = this.pageWidth;\n\n    // Adjust the body width for a stretched last column.\n    if (this._stretchLastColumn && pw > bw) {\n      bw = pw;\n    }\n\n    // Adjust the body height for a stretched last row.\n    if (this._stretchLastRow && ph > bh) {\n      bh = ph;\n    }\n\n    // Check for a corner header hit.\n    if (lx >= 0 && lx < hw && ly >= 0 && ly < hh) {\n      // Convert to unscrolled virtual coordinates.\n      let vx = lx;\n      let vy = ly;\n\n      // Fetch the row and column index.\n      let row = this.rowAt('column-header', vy);\n      let column = this.columnAt('row-header', vx);\n\n      // Fetch the cell offset position.\n      let ox = this.columnOffset('row-header', column);\n      let oy = this.rowOffset('column-header', row);\n\n      // Fetch cell width and height.\n      let width = this.columnSize('row-header', column);\n      let height = this.rowSize('column-header', row);\n\n      // Compute the leading and trailing positions.\n      let x = vx - ox;\n      let y = vy - oy;\n\n      // Return the hit test result.\n      return { region: 'corner-header', row, column, x, y, width, height };\n    }\n\n    // Check for a column header hit.\n    if (ly >= 0 && ly < hh && lx >= 0 && lx < hw + bw) {\n      // Convert to unscrolled virtual coordinates.\n      let vx = lx + this._scrollX - hw;\n      let vy = ly;\n\n      // Fetch the row and column index.\n      let row = this.rowAt('column-header', vy);\n      let column = this.columnAt('body', vx);\n\n      // Fetch the cell offset position.\n      let ox = this.columnOffset('body', column);\n      let oy = this.rowOffset('column-header', row);\n\n      // Fetch the cell width and height.\n      let width = this.columnSize('body', column);\n      let height = this.rowSize('column-header', row);\n\n      // Compute the leading and trailing positions.\n      let x = vx - ox;\n      let y = vy - oy;\n\n      // Return the hit test result.\n      return { region: 'column-header', row, column, x, y, width, height };\n    }\n\n    // Check for a row header hit.\n    if (lx >= 0 && lx < hw && ly >= 0 && ly < hh + bh) {\n      // Convert to unscrolled virtual coordinates.\n      let vx = lx;\n      let vy = ly + this._scrollY - hh;\n\n      // Fetch the row and column index.\n      let row = this.rowAt('body', vy);\n      let column = this.columnAt('row-header', vx);\n\n      // Fetch the cell offset position.\n      let ox = this.columnOffset('row-header', column);\n      let oy = this.rowOffset('body', row);\n\n      // Fetch the cell width and height.\n      let width = this.columnSize('row-header', column);\n      let height = this.rowSize('body', row);\n\n      // Compute the leading and trailing positions.\n      let x = vx - ox;\n      let y = vy - oy;\n\n      // Return the hit test result.\n      return { region: 'row-header', row, column, x, y, width, height };\n    }\n\n    // Check for a body hit.\n    if (lx >= hw && lx < hw + bw && ly >= hh && ly < hh + bh) {\n      // Convert to unscrolled virtual coordinates.\n      let vx = lx + this._scrollX - hw;\n      let vy = ly + this._scrollY - hh;\n\n      // Fetch the row and column index.\n      let row = this.rowAt('body', vy);\n      let column = this.columnAt('body', vx);\n\n      // Fetch the cell offset position.\n      let ox = this.columnOffset('body', column);\n      let oy = this.rowOffset('body', row);\n\n      // Fetch the cell width and height.\n      let width = this.columnSize('body', column);\n      let height = this.rowSize('body', row);\n\n      // Compute the part coordinates.\n      let x = vx - ox;\n      let y = vy - oy;\n\n      // Return the result.\n      return { region: 'body', row, column, x, y, width, height };\n    }\n\n    // Otherwise, it's a void space hit.\n    let row = -1;\n    let column = -1;\n    let x = -1;\n    let y = -1;\n    let width = -1;\n    let height = -1;\n\n    // Return the hit test result.\n    return { region: 'void', row, column, x, y, width, height };\n  }\n\n  /**\n   * Copy the current selection to the system clipboard.\n   *\n   * #### Notes\n   * The grid must have a data model and a selection model.\n   *\n   * The behavior can be configured via `DataGrid.copyConfig`.\n   */\n  copyToClipboard(): void {\n    // Fetch the data model.\n    let dataModel = this._dataModel;\n\n    // Bail early if there is no data model.\n    if (!dataModel) {\n      return;\n    }\n\n    // Fetch the selection model.\n    let selectionModel = this._selectionModel;\n\n    // Bail early if there is no selection model.\n    if (!selectionModel) {\n      return;\n    }\n\n    // Coerce the selections to an array.\n    let selections = Array.from(selectionModel.selections());\n\n    // Bail early if there are no selections.\n    if (selections.length === 0) {\n      return;\n    }\n\n    // Alert that multiple selections cannot be copied.\n    if (selections.length > 1) {\n      alert('Cannot copy multiple grid selections.');\n      return;\n    }\n\n    // Fetch the model counts.\n    let br = dataModel.rowCount('body');\n    let bc = dataModel.columnCount('body');\n\n    // Bail early if there is nothing to copy.\n    if (br === 0 || bc === 0) {\n      return;\n    }\n\n    // Unpack the selection.\n    let { r1, c1, r2, c2 } = selections[0];\n\n    // Clamp the selection to the model bounds.\n    r1 = Math.max(0, Math.min(r1, br - 1));\n    c1 = Math.max(0, Math.min(c1, bc - 1));\n    r2 = Math.max(0, Math.min(r2, br - 1));\n    c2 = Math.max(0, Math.min(c2, bc - 1));\n\n    // Ensure the limits are well-orderd.\n    if (r2 < r1) [r1, r2] = [r2, r1];\n    if (c2 < c1) [c1, c2] = [c2, c1];\n\n    // Fetch the header counts.\n    let rhc = dataModel.columnCount('row-header');\n    let chr = dataModel.rowCount('column-header');\n\n    // Unpack the copy config.\n    let separator = this._copyConfig.separator;\n    let format = this._copyConfig.format;\n    let headers = this._copyConfig.headers;\n    let warningThreshold = this._copyConfig.warningThreshold;\n\n    // Compute the number of cells to be copied.\n    let rowCount = r2 - r1 + 1;\n    let colCount = c2 - c1 + 1;\n    switch (headers) {\n      case 'none':\n        rhc = 0;\n        chr = 0;\n        break;\n      case 'row':\n        chr = 0;\n        colCount += rhc;\n        break;\n      case 'column':\n        rhc = 0;\n        rowCount += chr;\n        break;\n      case 'all':\n        rowCount += chr;\n        colCount += rhc;\n        break;\n      default:\n        throw 'unreachable';\n    }\n\n    // Compute the total cell count.\n    let cellCount = rowCount * colCount;\n\n    // Allow the user to cancel a large copy request.\n    if (cellCount > warningThreshold) {\n      let msg = `Copying ${cellCount} cells may take a while. Continue?`;\n      if (!window.confirm(msg)) {\n        return;\n      }\n    }\n\n    // Set up the format args.\n    let args = {\n      region: 'body' as DataModel.CellRegion,\n      row: 0,\n      column: 0,\n      value: null as any,\n      metadata: {} as DataModel.Metadata\n    };\n\n    // Allocate the array of rows.\n    let rows = new Array<string[]>(rowCount);\n\n    // Iterate over the rows.\n    for (let j = 0; j < rowCount; ++j) {\n      // Allocate the array of cells.\n      let cells = new Array<string>(colCount);\n\n      // Iterate over the columns.\n      for (let i = 0; i < colCount; ++i) {\n        // Set up the format variables.\n        let region: DataModel.CellRegion;\n        let row: number;\n        let column: number;\n\n        // Populate the format variables.\n        if (j < chr && i < rhc) {\n          region = 'corner-header';\n          row = j;\n          column = i;\n        } else if (j < chr) {\n          region = 'column-header';\n          row = j;\n          column = i - rhc + c1;\n        } else if (i < rhc) {\n          region = 'row-header';\n          row = j - chr + r1;\n          column = i;\n        } else {\n          region = 'body';\n          row = j - chr + r1;\n          column = i - rhc + c1;\n        }\n\n        // Populate the format args.\n        args.region = region;\n        args.row = row;\n        args.column = column;\n        args.value = dataModel.data(region, row, column);\n        args.metadata = dataModel.metadata(region, row, column);\n\n        // Format the cell.\n        cells[i] = format(args);\n      }\n\n      // Save the row of cells.\n      rows[j] = cells;\n    }\n\n    // Convert the cells into lines.\n    let lines = rows.map(cells => cells.join(separator));\n\n    // Convert the lines into text.\n    let text = lines.join('\\n');\n\n    // Copy the text to the clipboard.\n    ClipboardExt.copyText(text);\n  }\n\n  /**\n   * Process a message sent to the widget.\n   *\n   * @param msg - The message sent to the widget.\n   */\n  processMessage(msg: Message): void {\n    // Ignore child show/hide messages. The data grid controls the\n    // visibility of its children, and will manually dispatch the\n    // fit-request messages as a result of visibility change.\n    if (msg.type === 'child-shown' || msg.type === 'child-hidden') {\n      return;\n    }\n\n    // Recompute the scroll bar minimums before the layout refits.\n    if (msg.type === 'fit-request') {\n      let vsbLimits = ElementExt.sizeLimits(this._vScrollBar.node);\n      let hsbLimits = ElementExt.sizeLimits(this._hScrollBar.node);\n      this._vScrollBarMinWidth = vsbLimits.minWidth;\n      this._hScrollBarMinHeight = hsbLimits.minHeight;\n    }\n\n    // Process all other messages as normal.\n    super.processMessage(msg);\n  }\n\n  /**\n   * Intercept a message sent to a message handler.\n   *\n   * @param handler - The target handler of the message.\n   *\n   * @param msg - The message to be sent to the handler.\n   *\n   * @returns `true` if the message should continue to be processed\n   *   as normal, or `false` if processing should cease immediately.\n   */\n  messageHook(handler: IMessageHandler, msg: Message): boolean {\n    // Process viewport messages.\n    if (handler === this._viewport) {\n      this._processViewportMessage(msg);\n      return true;\n    }\n\n    // Process horizontal scroll bar messages.\n    if (handler === this._hScrollBar && msg.type === 'activate-request') {\n      this.activate();\n      return false;\n    }\n\n    // Process vertical scroll bar messages.\n    if (handler === this._vScrollBar && msg.type === 'activate-request') {\n      this.activate();\n      return false;\n    }\n\n    // Ignore all other messages.\n    return true;\n  }\n\n  /**\n   * Handle the DOM events for the data grid.\n   *\n   * @param event - The DOM event sent to the data grid.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the data grid's DOM node. It\n   * should not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'keydown':\n        this._evtKeyDown(event as KeyboardEvent);\n        break;\n      case 'mousedown':\n        this._evtMouseDown(event as MouseEvent);\n        break;\n      case 'mousemove':\n        this._evtMouseMove(event as MouseEvent);\n        break;\n      case 'mouseup':\n        this._evtMouseUp(event as MouseEvent);\n        break;\n      case 'dblclick':\n        this._evtMouseDoubleClick(event as MouseEvent);\n        break;\n      case 'mouseleave':\n        this._evtMouseLeave(event as MouseEvent);\n        break;\n      case 'contextmenu':\n        this._evtContextMenu(event as MouseEvent);\n        break;\n      case 'wheel':\n        this._evtWheel(event as WheelEvent);\n        break;\n      case 'resize':\n        this._refreshDPI();\n        break;\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'activate-request'` message.\n   */\n  protected onActivateRequest(msg: Message): void {\n    this.viewport.node.focus({ preventScroll: true });\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    window.addEventListener('resize', this);\n    this.node.addEventListener('wheel', this);\n    this._viewport.node.addEventListener('keydown', this);\n    this._viewport.node.addEventListener('mousedown', this);\n    this._viewport.node.addEventListener('mousemove', this);\n    this._viewport.node.addEventListener('dblclick', this);\n    this._viewport.node.addEventListener('mouseleave', this);\n    this._viewport.node.addEventListener('contextmenu', this);\n    this.repaintContent();\n    this.repaintOverlay();\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    window.removeEventListener('resize', this);\n    this.node.removeEventListener('wheel', this);\n    this._viewport.node.removeEventListener('keydown', this);\n    this._viewport.node.removeEventListener('mousedown', this);\n    this._viewport.node.removeEventListener('mousemove', this);\n    this._viewport.node.removeEventListener('mouseleave', this);\n    this._viewport.node.removeEventListener('dblclick', this);\n    this._viewport.node.removeEventListener('contextmenu', this);\n    this._releaseMouse();\n  }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   */\n  protected onBeforeShow(msg: Message): void {\n    this.repaintContent();\n    this.repaintOverlay();\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    if (this._editorController) {\n      this._editorController.cancel();\n    }\n\n    this._syncScrollState();\n  }\n\n  /**\n   * Schedule a repaint of all of the grid content.\n   */\n  protected repaintContent(): void {\n    let msg = new Private.PaintRequest('all', 0, 0, 0, 0);\n    MessageLoop.postMessage(this._viewport, msg);\n  }\n\n  /**\n   * Schedule a repaint of specific grid content.\n   */\n  protected repaintRegion(\n    region: DataModel.CellRegion,\n    r1: number,\n    c1: number,\n    r2: number,\n    c2: number\n  ): void {\n    let msg = new Private.PaintRequest(region, r1, c1, r2, c2);\n    MessageLoop.postMessage(this._viewport, msg);\n  }\n\n  /**\n   * Schedule a repaint of the overlay.\n   */\n  protected repaintOverlay(): void {\n    MessageLoop.postMessage(this._viewport, Private.OverlayPaintRequest);\n  }\n\n  private _getMaxWidthInColumn(\n    index: number,\n    columnRegion: 'row-header' | 'body'\n  ): number | null {\n    const dataModel = this.dataModel;\n\n    if (!dataModel) {\n      return null;\n    }\n\n    const columnHeaderRegion =\n      columnRegion == 'row-header' ? 'corner-header' : 'column-header';\n\n    return Math.max(\n      this._getMaxWidthInArea(\n        dataModel,\n        index,\n        columnHeaderRegion,\n        'column-header'\n      ),\n      this._getMaxWidthInArea(dataModel, index, columnRegion, 'body')\n    );\n  }\n\n  private _getMaxWidthInArea(\n    dataModel: DataModel,\n    index: number,\n    region: DataModel.CellRegion,\n    rowRegion: DataModel.RowRegion\n  ): number {\n    const numRows = dataModel.rowCount(rowRegion);\n    // Will only allocate up to 1_000_000 elements otherwise performance can tank.\n    const configs = Array.from(\n      { length: Math.min(numRows, 1_000_000) },\n      (_val, idx) => DataGrid._getConfig(dataModel, idx, index, region)\n    );\n\n    // Heuristic: Sort by the length of the text to render and only fully calculate the text width\n    // for the top 100_000 rows by text length\n    if (numRows > 100_000) {\n      // Sort by descending length\n      configs.sort(x => -this._getTextToRender(x).length);\n    }\n\n    let maxWidth = 0;\n    for (let i = 0; i < numRows && i < 100_000; ++i) {\n      const textWidth = this._getCellTextWidth(configs[i]);\n      maxWidth = Math.max(maxWidth, textWidth);\n    }\n\n    return maxWidth;\n  }\n\n  private static _getConfig(\n    dataModel: DataModel,\n    row: number,\n    col: number,\n    location: DataModel.CellRegion\n  ): CellRenderer.CellConfig {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      region: location,\n      row: row,\n      column: col,\n      value: DataGrid._getCellValue(dataModel, location, row, col),\n      metadata: DataGrid._getCellMetadata(dataModel, location, row, col)\n    };\n  }\n\n  private _getTextToRender(config: CellRenderer.CellConfig): string {\n    const renderer = this.cellRenderers.get(config) as TextRenderer;\n    return renderer.getText(config);\n  }\n\n  private _getCellTextWidth(config: CellRenderer.CellConfig): number {\n    // Get the renderer for the given cell.\n    const renderer = this.cellRenderers.get(config) as TextRenderer;\n\n    // Use the canvas context to measure the cell's text width\n    const gc = this.canvasGC;\n    gc.font = CellRenderer.resolveOption(renderer.font, config);\n    gc.fillStyle = CellRenderer.resolveOption(renderer.textColor, config);\n    gc.textAlign = CellRenderer.resolveOption(\n      renderer.horizontalAlignment,\n      config\n    );\n    gc.textBaseline = 'bottom';\n\n    const text = this._getTextToRender(config);\n\n    return gc.measureText(text).width + 2 * renderer.horizontalPadding;\n  }\n\n  /**\n   * Ensure the canvas is at least the specified size.\n   *\n   * This method will retain the valid canvas content.\n   */\n  private _resizeCanvasIfNeeded(width: number, height: number): void {\n    // Scale the size by the dpi ratio.\n    width = width * this._dpiRatio;\n    height = height * this._dpiRatio;\n\n    // Compute the maximum canvas size for the given width and height.\n    let maxW = (Math.ceil((width + 1) / 512) + 1) * 512;\n    let maxH = (Math.ceil((height + 1) / 512) + 1) * 512;\n\n    // Get the current size of the canvas.\n    let curW = this._canvas.width;\n    let curH = this._canvas.height;\n\n    // Bail early if the canvas size is within bounds.\n    if (curW >= width && curH >= height && curW <= maxW && curH <= maxH) {\n      return;\n    }\n\n    // Compute the expanded canvas size.\n    let expW = maxW - 512;\n    let expH = maxH - 512;\n\n    // Set the transforms to the identity matrix.\n    this._canvasGC.setTransform(1, 0, 0, 1, 0, 0);\n    this._bufferGC.setTransform(1, 0, 0, 1, 0, 0);\n    this._overlayGC.setTransform(1, 0, 0, 1, 0, 0);\n\n    // Resize the buffer if needed.\n    if (curW < width) {\n      this._buffer.width = expW;\n    } else if (curW > maxW) {\n      this._buffer.width = maxW;\n    }\n\n    // Resize the buffer height if needed.\n    if (curH < height) {\n      this._buffer.height = expH;\n    } else if (curH > maxH) {\n      this._buffer.height = maxH;\n    }\n\n    // Test whether there is content to blit.\n    let needBlit = curW > 0 && curH > 0 && width > 0 && height > 0;\n\n    // Copy the valid canvas content into the buffer if needed.\n    if (needBlit) {\n      this._bufferGC.drawImage(this._canvas, 0, 0);\n    }\n\n    // Resize the canvas width if needed.\n    if (curW < width) {\n      this._canvas.width = expW;\n      this._canvas.style.width = `${expW / this._dpiRatio}px`;\n    } else if (curW > maxW) {\n      this._canvas.width = maxW;\n      this._canvas.style.width = `${maxW / this._dpiRatio}px`;\n    }\n\n    // Resize the canvas height if needed.\n    if (curH < height) {\n      this._canvas.height = expH;\n      this._canvas.style.height = `${expH / this._dpiRatio}px`;\n    } else if (curH > maxH) {\n      this._canvas.height = maxH;\n      this._canvas.style.height = `${maxH / this._dpiRatio}px`;\n    }\n\n    // Copy the valid canvas content from the buffer if needed.\n    if (needBlit) {\n      this._canvasGC.drawImage(this._buffer, 0, 0);\n    }\n\n    // Copy the valid overlay content into the buffer if needed.\n    if (needBlit) {\n      this._bufferGC.drawImage(this._overlay, 0, 0);\n    }\n\n    // Resize the overlay width if needed.\n    if (curW < width) {\n      this._overlay.width = expW;\n      this._overlay.style.width = `${expW / this._dpiRatio}px`;\n    } else if (curW > maxW) {\n      this._overlay.width = maxW;\n      this._overlay.style.width = `${maxW / this._dpiRatio}px`;\n    }\n\n    // Resize the overlay height if needed.\n    if (curH < height) {\n      this._overlay.height = expH;\n      this._overlay.style.height = `${expH / this._dpiRatio}px`;\n    } else if (curH > maxH) {\n      this._overlay.height = maxH;\n      this._overlay.style.height = `${maxH / this._dpiRatio}px`;\n    }\n\n    // Copy the valid overlay content from the buffer if needed.\n    if (needBlit) {\n      this._overlayGC.drawImage(this._buffer, 0, 0);\n    }\n  }\n\n  /**\n   * Sync the scroll bars and scroll state with the viewport.\n   *\n   * #### Notes\n   * If the visibility of either scroll bar changes, a synchronous\n   * fit-request will be dispatched to the data grid to immediately\n   * resize the viewport.\n   */\n  private _syncScrollState(): void {\n    // Fetch the viewport dimensions.\n    let bw = this.bodyWidth;\n    let bh = this.bodyHeight;\n    let pw = this.pageWidth;\n    let ph = this.pageHeight;\n\n    // Get the current scroll bar visibility.\n    let hasVScroll = !this._vScrollBar.isHidden;\n    let hasHScroll = !this._hScrollBar.isHidden;\n\n    // Get the minimum sizes of the scroll bars.\n    let vsw = this._vScrollBarMinWidth;\n    let hsh = this._hScrollBarMinHeight;\n\n    // Get the page size as if no scroll bars are visible.\n    let apw = pw + (hasVScroll ? vsw : 0);\n    let aph = ph + (hasHScroll ? hsh : 0);\n\n    // Test whether scroll bars are needed for the adjusted size.\n    let needVScroll = aph < bh - 1;\n    let needHScroll = apw < bw - 1;\n\n    // Re-test the horizontal scroll if a vertical scroll is needed.\n    if (needVScroll && !needHScroll) {\n      needHScroll = apw - vsw < bw - 1;\n    }\n\n    // Re-test the vertical scroll if a horizontal scroll is needed.\n    if (needHScroll && !needVScroll) {\n      needVScroll = aph - hsh < bh - 1;\n    }\n\n    // If the visibility changes, immediately refit the grid.\n    if (needVScroll !== hasVScroll || needHScroll !== hasHScroll) {\n      this._vScrollBar.setHidden(!needVScroll);\n      this._hScrollBar.setHidden(!needHScroll);\n      this._scrollCorner.setHidden(!needVScroll || !needHScroll);\n      MessageLoop.sendMessage(this, Widget.Msg.FitRequest);\n    }\n\n    // Update the scroll bar limits.\n    this._vScrollBar.maximum = this.maxScrollY;\n    this._vScrollBar.page = this.pageHeight;\n    this._hScrollBar.maximum = this.maxScrollX;\n    this._hScrollBar.page = this.pageWidth;\n\n    // Re-clamp the scroll position.\n    this._scrollTo(this._scrollX, this._scrollY);\n  }\n\n  /**\n   * Sync the viewport to the given scroll position.\n   *\n   * #### Notes\n   * This schedules a full repaint and syncs the scroll state.\n   */\n  private _syncViewport(): void {\n    this.repaintContent();\n    this.repaintOverlay();\n    this._syncScrollState();\n  }\n\n  /**\n   * Process a message sent to the viewport\n   */\n  private _processViewportMessage(msg: Message): void {\n    switch (msg.type) {\n      case 'resize':\n        this._onViewportResize(msg as Widget.ResizeMessage);\n        break;\n      case 'scroll-request':\n        this._onViewportScrollRequest(msg);\n        break;\n      case 'paint-request':\n        this._onViewportPaintRequest(msg as Private.PaintRequest);\n        break;\n      case 'overlay-paint-request':\n        this._onViewportOverlayPaintRequest(msg);\n        break;\n      case 'row-resize-request':\n        this._onViewportRowResizeRequest(msg as Private.RowResizeRequest);\n        break;\n      case 'column-resize-request':\n        this._onViewportColumnResizeRequest(msg as Private.ColumnResizeRequest);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * A message hook invoked on a viewport `'resize'` message.\n   */\n  private _onViewportResize(msg: Widget.ResizeMessage): void {\n    // Bail early if the viewport is not visible.\n    if (!this._viewport.isVisible) {\n      return;\n    }\n\n    // Unpack the message data.\n    let { width, height } = msg;\n\n    // Measure the viewport node if the dimensions are unknown.\n    if (width === -1) {\n      width = this._viewport.node.offsetWidth;\n    }\n    if (height === -1) {\n      height = this._viewport.node.offsetHeight;\n    }\n\n    // Round the dimensions to the nearest pixel.\n    width = Math.round(width);\n    height = Math.round(height);\n\n    // Get the current size of the viewport.\n    let oldWidth = this._viewportWidth;\n    let oldHeight = this._viewportHeight;\n\n    // Updated internal viewport size.\n    this._viewportWidth = width;\n    this._viewportHeight = height;\n\n    // Resize the canvas if needed.\n    this._resizeCanvasIfNeeded(width, height);\n\n    // Bail early if there is nothing to paint.\n    if (width === 0 || height === 0) {\n      return;\n    }\n\n    // Paint the whole grid if the old size was zero.\n    if (oldWidth === 0 || oldHeight === 0) {\n      this.paintContent(0, 0, width, height);\n      this._paintOverlay();\n      return;\n    }\n\n    // Paint the right edge as needed.\n    if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n      let bx = this._columnSections.offsetOf(this._columnSections.count - 1);\n      let x = Math.min(this.headerWidth + bx, oldWidth);\n      this.paintContent(x, 0, width - x, height);\n    } else if (width > oldWidth) {\n      this.paintContent(oldWidth, 0, width - oldWidth + 1, height);\n    }\n\n    // Paint the bottom edge as needed.\n    if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n      let by = this._rowSections.offsetOf(this._rowSections.count - 1);\n      let y = Math.min(this.headerHeight + by, oldHeight);\n      this.paintContent(0, y, width, height - y);\n    } else if (height > oldHeight) {\n      this.paintContent(0, oldHeight, width, height - oldHeight + 1);\n    }\n\n    // Paint the overlay.\n    this._paintOverlay();\n  }\n\n  /**\n   * A message hook invoked on a viewport `'scroll-request'` message.\n   */\n  private _onViewportScrollRequest(msg: Message): void {\n    this._scrollTo(this._hScrollBar.value, this._vScrollBar.value);\n  }\n\n  /**\n   * A message hook invoked on a viewport `'paint-request'` message.\n   */\n  private _onViewportPaintRequest(msg: Private.PaintRequest): void {\n    // Bail early if the viewport is not visible.\n    if (!this._viewport.isVisible) {\n      return;\n    }\n\n    // Bail early if the viewport has zero area.\n    if (this._viewportWidth === 0 || this._viewportHeight === 0) {\n      return;\n    }\n\n    // Set up the paint limits.\n    let xMin = 0;\n    let yMin = 0;\n    let xMax = this._viewportWidth - 1;\n    let yMax = this._viewportHeight - 1;\n\n    // Fetch the scroll position.\n    let sx = this._scrollX;\n    let sy = this._scrollY;\n\n    // Fetch the header dimensions.\n    let hw = this.headerWidth;\n    let hh = this.headerHeight;\n\n    // Fetch the section lists.\n    let rs = this._rowSections;\n    let cs = this._columnSections;\n    let rhs = this._rowHeaderSections;\n    let chs = this._columnHeaderSections;\n\n    // Unpack the message data.\n    let { region, r1, c1, r2, c2 } = msg;\n\n    // Set up the paint variables.\n    let x1: number;\n    let y1: number;\n    let x2: number;\n    let y2: number;\n\n    // Fill the paint variables based on the paint region.\n    switch (region) {\n      case 'all':\n        x1 = xMin;\n        y1 = yMin;\n        x2 = xMax;\n        y2 = yMax;\n        break;\n      case 'body':\n        r1 = Math.max(0, Math.min(r1, rs.count));\n        c1 = Math.max(0, Math.min(c1, cs.count));\n        r2 = Math.max(0, Math.min(r2, rs.count));\n        c2 = Math.max(0, Math.min(c2, cs.count));\n        x1 = cs.offsetOf(c1) - sx + hw;\n        y1 = rs.offsetOf(r1) - sy + hh;\n        x2 = cs.extentOf(c2) - sx + hw;\n        y2 = rs.extentOf(r2) - sy + hh;\n        break;\n      case 'row-header':\n        r1 = Math.max(0, Math.min(r1, rs.count));\n        c1 = Math.max(0, Math.min(c1, rhs.count));\n        r2 = Math.max(0, Math.min(r2, rs.count));\n        c2 = Math.max(0, Math.min(c2, rhs.count));\n        x1 = rhs.offsetOf(c1);\n        y1 = rs.offsetOf(r1) - sy + hh;\n        x2 = rhs.extentOf(c2);\n        y2 = rs.extentOf(r2) - sy + hh;\n        break;\n      case 'column-header':\n        r1 = Math.max(0, Math.min(r1, chs.count));\n        c1 = Math.max(0, Math.min(c1, cs.count));\n        r2 = Math.max(0, Math.min(r2, chs.count));\n        c2 = Math.max(0, Math.min(c2, cs.count));\n        x1 = cs.offsetOf(c1) - sx + hw;\n        y1 = chs.offsetOf(r1);\n        x2 = cs.extentOf(c2) - sx + hw;\n        y2 = chs.extentOf(r2);\n        break;\n      case 'corner-header':\n        r1 = Math.max(0, Math.min(r1, chs.count));\n        c1 = Math.max(0, Math.min(c1, rhs.count));\n        r2 = Math.max(0, Math.min(r2, chs.count));\n        c2 = Math.max(0, Math.min(c2, rhs.count));\n        x1 = rhs.offsetOf(c1);\n        y1 = chs.offsetOf(r1);\n        x2 = rhs.extentOf(c2);\n        y2 = chs.extentOf(r2);\n        break;\n      default:\n        throw 'unreachable';\n    }\n\n    // Bail early if the dirty rect is outside the bounds.\n    if (x2 < xMin || y2 < yMin || x1 > xMax || y1 > yMax) {\n      return;\n    }\n\n    // Clamp the dirty rect to the paint bounds.\n    x1 = Math.max(xMin, Math.min(x1, xMax));\n    y1 = Math.max(yMin, Math.min(y1, yMax));\n    x2 = Math.max(xMin, Math.min(x2, xMax));\n    y2 = Math.max(yMin, Math.min(y2, yMax));\n\n    // Paint the content of the dirty rect.\n    this.paintContent(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n  }\n\n  /**\n   * A message hook invoked on a viewport `'overlay-paint-request'` message.\n   */\n  private _onViewportOverlayPaintRequest(msg: Message): void {\n    // Bail early if the viewport is not visible.\n    if (!this._viewport.isVisible) {\n      return;\n    }\n\n    // Bail early if the viewport has zero area.\n    if (this._viewportWidth === 0 || this._viewportHeight === 0) {\n      return;\n    }\n\n    // Paint the content of the overlay.\n    this._paintOverlay();\n  }\n\n  /**\n   * A message hook invoked on a viewport `'row-resize-request'` message.\n   */\n  private _onViewportRowResizeRequest(msg: Private.RowResizeRequest): void {\n    if (msg.region === 'body') {\n      this._resizeRow(msg.index, msg.size);\n    } else {\n      this._resizeColumnHeader(msg.index, msg.size);\n    }\n  }\n\n  /**\n   * A message hook invoked on a viewport `'column-resize-request'` message.\n   */\n  private _onViewportColumnResizeRequest(\n    msg: Private.ColumnResizeRequest\n  ): void {\n    if (msg.region === 'body') {\n      this._resizeColumn(msg.index, msg.size);\n    } else {\n      this._resizeRowHeader(msg.index, msg.size);\n    }\n  }\n\n  /**\n   * Handle the `thumbMoved` signal from a scroll bar.\n   */\n  private _onThumbMoved(sender: ScrollBar): void {\n    MessageLoop.postMessage(this._viewport, Private.ScrollRequest);\n  }\n\n  /**\n   * Handle the `pageRequested` signal from a scroll bar.\n   */\n  private _onPageRequested(\n    sender: ScrollBar,\n    dir: 'decrement' | 'increment'\n  ): void {\n    if (sender === this._vScrollBar) {\n      this.scrollByPage(dir === 'decrement' ? 'up' : 'down');\n    } else {\n      this.scrollByPage(dir === 'decrement' ? 'left' : 'right');\n    }\n  }\n\n  /**\n   * Handle the `stepRequested` signal from a scroll bar.\n   */\n  private _onStepRequested(\n    sender: ScrollBar,\n    dir: 'decrement' | 'increment'\n  ): void {\n    if (sender === this._vScrollBar) {\n      this.scrollByStep(dir === 'decrement' ? 'up' : 'down');\n    } else {\n      this.scrollByStep(dir === 'decrement' ? 'left' : 'right');\n    }\n  }\n\n  /**\n   * A signal handler for the data model `changed` signal.\n   */\n  private _onDataModelChanged(\n    sender: DataModel,\n    args: DataModel.ChangedArgs\n  ): void {\n    switch (args.type) {\n      case 'rows-inserted':\n        this._onRowsInserted(args);\n        break;\n      case 'columns-inserted':\n        this._onColumnsInserted(args);\n        break;\n      case 'rows-removed':\n        this._onRowsRemoved(args);\n        break;\n      case 'columns-removed':\n        this._onColumnsRemoved(args);\n        break;\n      case 'rows-moved':\n        this._onRowsMoved(args);\n        break;\n      case 'columns-moved':\n        this._onColumnsMoved(args);\n        break;\n      case 'cells-changed':\n        this._onCellsChanged(args);\n        break;\n      case 'model-reset':\n        this._onModelReset(args);\n        break;\n      default:\n        throw 'unreachable';\n    }\n  }\n\n  /**\n   * A signal handler for the selection model `changed` signal.\n   */\n  private _onSelectionsChanged(sender: SelectionModel): void {\n    this.repaintOverlay();\n  }\n\n  /**\n   * Handle rows being inserted in the data model.\n   */\n  private _onRowsInserted(args: DataModel.RowsChangedArgs): void {\n    // Unpack the arg data.\n    let { region, index, span } = args;\n\n    // Bail early if there are no sections to insert.\n    if (span <= 0) {\n      return;\n    }\n\n    // Look up the relevant section list.\n    let list: SectionList;\n    if (region === 'body') {\n      list = this._rowSections;\n    } else {\n      list = this._columnHeaderSections;\n    }\n\n    // Insert the span, maintaining the scroll position as needed.\n    if (this._scrollY === this.maxScrollY && this.maxScrollY > 0) {\n      list.insert(index, span);\n      this._scrollY = this.maxScrollY;\n    } else {\n      list.insert(index, span);\n    }\n\n    // Sync the viewport.\n    this._syncViewport();\n  }\n\n  /**\n   * Handle columns being inserted into the data model.\n   */\n  private _onColumnsInserted(args: DataModel.ColumnsChangedArgs): void {\n    // Unpack the arg data.\n    let { region, index, span } = args;\n\n    // Bail early if there are no sections to insert.\n    if (span <= 0) {\n      return;\n    }\n\n    // Look up the relevant section list.\n    let list: SectionList;\n    if (region === 'body') {\n      list = this._columnSections;\n    } else {\n      list = this._rowHeaderSections;\n    }\n\n    // Insert the span, maintaining the scroll position as needed.\n    if (this._scrollX === this.maxScrollX && this.maxScrollX > 0) {\n      list.insert(index, span);\n      this._scrollX = this.maxScrollX;\n    } else {\n      list.insert(index, span);\n    }\n\n    // Sync the viewport.\n    this._syncViewport();\n  }\n\n  /**\n   * Handle rows being removed from the data model.\n   */\n  private _onRowsRemoved(args: DataModel.RowsChangedArgs): void {\n    // Unpack the arg data.\n    let { region, index, span } = args;\n\n    // Bail early if there are no sections to remove.\n    if (span <= 0) {\n      return;\n    }\n\n    // Look up the relevant section list.\n    let list: SectionList;\n    if (region === 'body') {\n      list = this._rowSections;\n    } else {\n      list = this._columnHeaderSections;\n    }\n\n    // Bail if the index or is invalid\n    if (index < 0 || index >= list.count) {\n      return;\n    }\n\n    // Remove the span, maintaining the scroll position as needed.\n    if (this._scrollY === this.maxScrollY && this.maxScrollY > 0) {\n      list.remove(index, span);\n      this._scrollY = this.maxScrollY;\n    } else {\n      list.remove(index, span);\n    }\n\n    // Sync the viewport.\n    this._syncViewport();\n  }\n\n  /**\n   * Handle columns being removed from the data model.\n   */\n  private _onColumnsRemoved(args: DataModel.ColumnsChangedArgs): void {\n    // Unpack the arg data.\n    let { region, index, span } = args;\n\n    // Bail early if there are no sections to remove.\n    if (span <= 0) {\n      return;\n    }\n\n    // Look up the relevant section list.\n    let list: SectionList;\n    if (region === 'body') {\n      list = this._columnSections;\n    } else {\n      list = this._rowHeaderSections;\n    }\n\n    // Bail if the index or is invalid\n    if (index < 0 || index >= list.count) {\n      return;\n    }\n\n    // Remove the span, maintaining the scroll position as needed.\n    if (this._scrollX === this.maxScrollX && this.maxScrollX > 0) {\n      list.remove(index, span);\n      this._scrollX = this.maxScrollX;\n    } else {\n      list.remove(index, span);\n    }\n\n    // Sync the viewport.\n    this._syncViewport();\n  }\n\n  /**\n   * Handle rows moving in the data model.\n   */\n  private _onRowsMoved(args: DataModel.RowsMovedArgs): void {\n    // Unpack the arg data.\n    let { region, index, span, destination } = args;\n\n    // Bail early if there are no sections to move.\n    if (span <= 0) {\n      return;\n    }\n\n    // Look up the relevant section list.\n    let list: SectionList;\n    if (region === 'body') {\n      list = this._rowSections;\n    } else {\n      list = this._columnHeaderSections;\n    }\n\n    // Bail early if the index is out of range.\n    if (index < 0 || index >= list.count) {\n      return;\n    }\n\n    // Clamp the move span to the limit.\n    span = Math.min(span, list.count - index);\n\n    // Clamp the destination index to the limit.\n    destination = Math.min(Math.max(0, destination), list.count - span);\n\n    // Bail early if there is no effective move.\n    if (index === destination) {\n      return;\n    }\n\n    // Compute the first affected index.\n    let r1 = Math.min(index, destination);\n\n    // Compute the last affected index.\n    let r2 = Math.max(index + span - 1, destination + span - 1);\n\n    // Move the sections in the list.\n    list.move(index, span, destination);\n\n    // Schedule a repaint of the dirty cells.\n    if (region === 'body') {\n      this.repaintRegion('body', r1, 0, r2, Infinity);\n      this.repaintRegion('row-header', r1, 0, r2, Infinity);\n    } else {\n      this.repaintRegion('column-header', r1, 0, r2, Infinity);\n      this.repaintRegion('corner-header', r1, 0, r2, Infinity);\n    }\n\n    // Sync the viewport.\n    this._syncViewport();\n  }\n\n  /**\n   * Handle columns moving in the data model.\n   */\n  private _onColumnsMoved(args: DataModel.ColumnsMovedArgs): void {\n    // Unpack the arg data.\n    let { region, index, span, destination } = args;\n\n    // Bail early if there are no sections to move.\n    if (span <= 0) {\n      return;\n    }\n\n    // Look up the relevant section list.\n    let list: SectionList;\n    if (region === 'body') {\n      list = this._columnSections;\n    } else {\n      list = this._rowHeaderSections;\n    }\n\n    // Bail early if the index is out of range.\n    if (index < 0 || index >= list.count) {\n      return;\n    }\n\n    // Clamp the move span to the limit.\n    span = Math.min(span, list.count - index);\n\n    // Clamp the destination index to the limit.\n    destination = Math.min(Math.max(0, destination), list.count - span);\n\n    // Bail early if there is no effective move.\n    if (index === destination) {\n      return;\n    }\n\n    // Move the sections in the list.\n    list.move(index, span, destination);\n\n    // Compute the first affected index.\n    let c1 = Math.min(index, destination);\n\n    // Compute the last affected index.\n    let c2 = Math.max(index + span - 1, destination + span - 1);\n\n    // Schedule a repaint of the dirty cells.\n    if (region === 'body') {\n      this.repaintRegion('body', 0, c1, Infinity, c2);\n      this.repaintRegion('column-header', 0, c1, Infinity, c2);\n    } else {\n      this.repaintRegion('row-header', 0, c1, Infinity, c2);\n      this.repaintRegion('corner-header', 0, c1, Infinity, c2);\n    }\n\n    // Sync the viewport.\n    this._syncViewport();\n  }\n\n  /**\n   * Handle cells changing in the data model.\n   */\n  private _onCellsChanged(args: DataModel.CellsChangedArgs): void {\n    // Unpack the arg data.\n    let { region, row, column, rowSpan, columnSpan } = args;\n\n    // Bail early if there are no cells to modify.\n    if (rowSpan <= 0 && columnSpan <= 0) {\n      return;\n    }\n\n    // Compute the changed cell bounds.\n    let r1 = row;\n    let c1 = column;\n    let r2 = r1 + rowSpan - 1;\n    let c2 = c1 + columnSpan - 1;\n\n    // Schedule a repaint of the cell content.\n    this.repaintRegion(region, r1, c1, r2, c2);\n  }\n\n  /**\n   * Handle a full data model reset.\n   */\n  private _onModelReset(args: DataModel.ModelResetArgs): void {\n    // Look up the various current section counts.\n    let nr = this._rowSections.count;\n    let nc = this._columnSections.count;\n    let nrh = this._rowHeaderSections.count;\n    let nch = this._columnHeaderSections.count;\n\n    // Compute the delta count for each region.\n    let dr = this._dataModel!.rowCount('body') - nr;\n    let dc = this._dataModel!.columnCount('body') - nc;\n    let drh = this._dataModel!.columnCount('row-header') - nrh;\n    let dch = this._dataModel!.rowCount('column-header') - nch;\n\n    // Update the row sections, if needed.\n    if (dr > 0) {\n      this._rowSections.insert(nr, dr);\n    } else if (dr < 0) {\n      this._rowSections.remove(nr + dr, -dr);\n    }\n\n    // Update the column sections, if needed.\n    if (dc > 0) {\n      this._columnSections.insert(nc, dc);\n    } else if (dc < 0) {\n      this._columnSections.remove(nc + dc, -dc);\n    }\n\n    // Update the row header sections, if needed.\n    if (drh > 0) {\n      this._rowHeaderSections.insert(nrh, drh);\n    } else if (drh < 0) {\n      this._rowHeaderSections.remove(nrh + drh, -drh);\n    }\n\n    // Update the column header sections, if needed.\n    if (dch > 0) {\n      this._columnHeaderSections.insert(nch, dch);\n    } else if (dch < 0) {\n      this._columnHeaderSections.remove(nch + dch, -dch);\n    }\n\n    // Sync the viewport.\n    this._syncViewport();\n  }\n\n  /**\n   * A signal handler for the renderer map `changed` signal.\n   */\n  private _onRenderersChanged(): void {\n    this.repaintContent();\n  }\n\n  /**\n   * Handle the `'keydown'` event for the data grid.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    if (this._mousedown) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else if (this._keyHandler) {\n      this._keyHandler.onKeyDown(this, event);\n    }\n  }\n\n  /**\n   * Handle the `'mousedown'` event for the data grid.\n   */\n  private _evtMouseDown(event: MouseEvent): void {\n    // Ignore everything except the left mouse button.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Activate the grid.\n    this.activate();\n\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Add the extra document listeners.\n    document.addEventListener('keydown', this, true);\n    document.addEventListener('mouseup', this, true);\n    document.addEventListener('mousedown', this, true);\n    document.addEventListener('mousemove', this, true);\n    document.addEventListener('contextmenu', this, true);\n\n    // Flip the mousedown flag.\n    this._mousedown = true;\n\n    // Dispatch to the mouse handler.\n    if (this._mouseHandler) {\n      this._mouseHandler.onMouseDown(this, event);\n    }\n  }\n\n  /**\n   * Handle the `'mousemove'` event for the data grid.\n   */\n  private _evtMouseMove(event: MouseEvent): void {\n    // Stop the event propagation if the mouse is down.\n    if (this._mousedown) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    // Bail if there is no mouse handler.\n    if (!this._mouseHandler) {\n      return;\n    }\n\n    // Dispatch to the mouse handler.\n    if (this._mousedown) {\n      this._mouseHandler.onMouseMove(this, event);\n    } else {\n      this._mouseHandler.onMouseHover(this, event);\n    }\n  }\n\n  /**\n   * Handle the `'mouseup'` event for the data grid.\n   */\n  private _evtMouseUp(event: MouseEvent): void {\n    // Ignore everything except the left mouse button.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Dispatch to the mouse handler.\n    if (this._mouseHandler) {\n      this._mouseHandler.onMouseUp(this, event);\n    }\n\n    // Release the mouse.\n    this._releaseMouse();\n  }\n\n  /**\n   * Handle the `'dblclick'` event for the data grid.\n   */\n  private _evtMouseDoubleClick(event: MouseEvent): void {\n    // Ignore everything except the left mouse button.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Dispatch to the mouse handler.\n    if (this._mouseHandler) {\n      this._mouseHandler.onMouseDoubleClick(this, event);\n    }\n\n    // Release the mouse.\n    this._releaseMouse();\n  }\n\n  /**\n   * Handle the `'mouseleave'` event for the data grid.\n   */\n  private _evtMouseLeave(event: MouseEvent): void {\n    if (this._mousedown) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else if (this._mouseHandler) {\n      this._mouseHandler.onMouseLeave(this, event);\n    }\n  }\n\n  /**\n   * Handle the `'contextmenu'` event for the data grid.\n   */\n  private _evtContextMenu(event: MouseEvent): void {\n    if (this._mousedown) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else if (this._mouseHandler) {\n      this._mouseHandler.onContextMenu(this, event);\n    }\n  }\n\n  /**\n   * Handle the `'wheel'` event for the data grid.\n   */\n  private _evtWheel(event: WheelEvent): void {\n    // Ignore the event if `accel` is held.\n    if (Platform.accelKey(event)) {\n      return;\n    }\n\n    // Bail early if there is no mouse handler.\n    if (!this._mouseHandler) {\n      return;\n    }\n\n    // Dispatch to the mouse handler.\n    this._mouseHandler.onWheel(this, event);\n  }\n\n  /**\n   * Release the mouse grab.\n   */\n  private _releaseMouse(): void {\n    // Clear the mousedown flag.\n    this._mousedown = false;\n\n    // Relase the mouse handler.\n    if (this._mouseHandler) {\n      this._mouseHandler.release();\n    }\n\n    // Remove the document listeners.\n    document.removeEventListener('keydown', this, true);\n    document.removeEventListener('mouseup', this, true);\n    document.removeEventListener('mousedown', this, true);\n    document.removeEventListener('mousemove', this, true);\n    document.removeEventListener('contextmenu', this, true);\n  }\n\n  /**\n   * Refresh the dpi ratio.\n   */\n  private _refreshDPI(): void {\n    // Get the best integral value for the dpi ratio.\n    let dpiRatio = Math.ceil(window.devicePixelRatio);\n\n    // Bail early if the computed dpi ratio has not changed.\n    if (this._dpiRatio === dpiRatio) {\n      return;\n    }\n\n    // Update the internal dpi ratio.\n    this._dpiRatio = dpiRatio;\n\n    // Schedule a repaint of the content.\n    this.repaintContent();\n\n    // Schedule a repaint of the overlay.\n    this.repaintOverlay();\n\n    // Update the canvas size for the new dpi ratio.\n    this._resizeCanvasIfNeeded(this._viewportWidth, this._viewportHeight);\n\n    // Ensure the canvas style is scaled for the new ratio.\n    this._canvas.style.width = `${this._canvas.width / this._dpiRatio}px`;\n    this._canvas.style.height = `${this._canvas.height / this._dpiRatio}px`;\n\n    // Ensure the overlay style is scaled for the new ratio.\n    this._overlay.style.width = `${this._overlay.width / this._dpiRatio}px`;\n    this._overlay.style.height = `${this._overlay.height / this._dpiRatio}px`;\n  }\n\n  /**\n   * Resize a row section immediately.\n   */\n  private _resizeRow(index: number, size: number): void {\n    // Look up the target section list.\n    let list = this._rowSections;\n\n    // Bail early if the index is out of range.\n    if (index < 0 || index >= list.count) {\n      return;\n    }\n\n    // Look up the old size of the section.\n    let oldSize = list.sizeOf(index);\n\n    // Normalize the new size of the section.\n    let newSize = list.clampSize(size);\n\n    // Bail early if the size does not change.\n    if (oldSize === newSize) {\n      return;\n    }\n\n    // Resize the section in the list.\n    list.resize(index, newSize);\n\n    // Get the current size of the viewport.\n    let vw = this._viewportWidth;\n    let vh = this._viewportHeight;\n\n    // If there is nothing to paint, sync the scroll state.\n    if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n      this._syncScrollState();\n      return;\n    }\n\n    // Compute the size delta.\n    let delta = newSize - oldSize;\n\n    // Look up the column header height.\n    let hh = this.headerHeight;\n\n    // Compute the viewport offset of the section.\n    let offset = list.offsetOf(index) + hh - this._scrollY;\n\n    // Bail early if there is nothing to paint.\n    if (hh >= vh || offset >= vh) {\n      this._syncScrollState();\n      return;\n    }\n\n    // Update the scroll position if the section is not visible.\n    if (offset + oldSize <= hh) {\n      this._scrollY += delta;\n      this._syncScrollState();\n      return;\n    }\n\n    // Compute the paint origin of the section.\n    let pos = Math.max(hh, offset);\n\n    // Paint from the section onward if it spans the viewport.\n    if (offset + oldSize >= vh || offset + newSize >= vh) {\n      this.paintContent(0, pos, vw, vh - pos);\n      this._paintOverlay();\n      this._syncScrollState();\n      return;\n    }\n\n    // Compute the X blit dimensions.\n    let sx = 0;\n    let sw = vw;\n    let dx = 0;\n\n    // Compute the Y blit dimensions.\n    let sy: number;\n    let sh: number;\n    let dy: number;\n    if (offset + newSize <= hh) {\n      sy = hh - delta;\n      sh = vh - sy;\n      dy = hh;\n    } else {\n      sy = offset + oldSize;\n      sh = vh - sy;\n      dy = sy + delta;\n    }\n\n    // Blit the valid content to the destination.\n    this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n\n    // Repaint the section if needed.\n    if (newSize > 0 && offset + newSize > hh) {\n      this.paintContent(0, pos, vw, offset + newSize - pos);\n    }\n\n    // Paint the trailing space as needed.\n    if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n      let r = this._rowSections.count - 1;\n      let y = hh + this._rowSections.offsetOf(r);\n      this.paintContent(0, y, vw, vh - y);\n    } else if (delta < 0) {\n      this.paintContent(0, vh + delta, vw, -delta);\n    }\n\n    // Repaint merged cells that are intersected by the resized row\n    // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n    for (const rgn of ['body', 'row-header'] as DataModel.CellRegion[]) {\n      const cellGroups = CellGroup.getCellGroupsAtRow(\n        this.dataModel!,\n        rgn,\n        index\n      );\n\n      let paintRgn = {\n        region: rgn,\n        xMin: 0,\n        xMax: 0,\n        yMin: 0,\n        yMax: 0\n      };\n\n      let backgroundColor = undefined;\n\n      switch (rgn) {\n        case 'body':\n          paintRgn.xMin = this.headerWidth;\n          paintRgn.xMax = this.headerWidth + this.bodyWidth;\n          paintRgn.yMin = this.headerHeight;\n          paintRgn.yMax = this.headerHeight + this.bodyHeight;\n\n          backgroundColor = this._style.backgroundColor;\n          break;\n        case 'row-header':\n          paintRgn.xMin = 0;\n          paintRgn.xMax = this.headerWidth;\n          paintRgn.yMin = this.headerHeight;\n          paintRgn.yMax = this.headerHeight + this.bodyHeight;\n\n          backgroundColor = this._style.headerBackgroundColor;\n          break;\n      }\n\n      this._paintMergedCells(cellGroups, paintRgn, backgroundColor);\n    }\n\n    // Paint the overlay.\n    this._paintOverlay();\n\n    // Sync the scroll state.\n    this._syncScrollState();\n  }\n\n  /**\n   * Resize a column section immediately.\n   */\n  private _resizeColumn(index: number, size: number | null): void {\n    // Look up the target section list.\n    let list = this._columnSections;\n\n    // Bail early if the index is out of range.\n    if (index < 0 || index >= list.count) {\n      return;\n    }\n\n    const adjustedSize = size ?? this._getMaxWidthInColumn(index, 'body');\n\n    if (!adjustedSize || adjustedSize == 0) {\n      return;\n    }\n\n    // Look up the old size of the section.\n    let oldSize = list.sizeOf(index);\n\n    // Normalize the new size of the section.\n    let newSize = list.clampSize(adjustedSize);\n\n    // Bail early if the size does not change.\n    if (oldSize === newSize) {\n      return;\n    }\n\n    // Resize the section in the list.\n    list.resize(index, newSize);\n\n    // Get the current size of the viewport.\n    let vw = this._viewportWidth;\n    let vh = this._viewportHeight;\n\n    // If there is nothing to paint, sync the scroll state.\n    if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n      this._syncScrollState();\n      return;\n    }\n\n    // Compute the size delta.\n    let delta = newSize - oldSize;\n\n    // Look up the row header width.\n    let hw = this.headerWidth;\n\n    // Compute the viewport offset of the section.\n    let offset = list.offsetOf(index) + hw - this._scrollX;\n\n    // Bail early if there is nothing to paint.\n    if (hw >= vw || offset >= vw) {\n      this._syncScrollState();\n      return;\n    }\n\n    // Update the scroll position if the section is not visible.\n    if (offset + oldSize <= hw) {\n      this._scrollX += delta;\n      this._syncScrollState();\n      return;\n    }\n\n    // Compute the paint origin of the section.\n    let pos = Math.max(hw, offset);\n\n    // Paint from the section onward if it spans the viewport.\n    if (offset + oldSize >= vw || offset + newSize >= vw) {\n      this.paintContent(pos, 0, vw - pos, vh);\n      this._paintOverlay();\n      this._syncScrollState();\n      return;\n    }\n\n    // Compute the Y blit dimensions.\n    let sy = 0;\n    let sh = vh;\n    let dy = 0;\n\n    // Compute the X blit dimensions.\n    let sx: number;\n    let sw: number;\n    let dx: number;\n    if (offset + newSize <= hw) {\n      sx = hw - delta;\n      sw = vw - sx;\n      dx = hw;\n    } else {\n      sx = offset + oldSize;\n      sw = vw - sx;\n      dx = sx + delta;\n    }\n\n    // Blit the valid content to the destination.\n    this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n\n    // Repaint the section if needed.\n    if (newSize > 0 && offset + newSize > hw) {\n      this.paintContent(pos, 0, offset + newSize - pos, vh);\n    }\n\n    // Paint the trailing space as needed.\n    if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n      let c = this._columnSections.count - 1;\n      let x = hw + this._columnSections.offsetOf(c);\n      this.paintContent(x, 0, vw - x, vh);\n    } else if (delta < 0) {\n      this.paintContent(vw + delta, 0, -delta, vh);\n    }\n\n    // Repaint merged cells that are intersected by the resized column\n    // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n    for (const rgn of ['body', 'column-header'] as DataModel.CellRegion[]) {\n      const cellGroups = CellGroup.getCellGroupsAtColumn(\n        this.dataModel!,\n        rgn,\n        index\n      );\n\n      let paintRgn = {\n        region: rgn,\n        xMin: 0,\n        xMax: 0,\n        yMin: 0,\n        yMax: 0\n      };\n\n      let backgroundColor = undefined;\n\n      switch (rgn) {\n        case 'body':\n          paintRgn.xMin = this.headerWidth;\n          paintRgn.xMax = this.headerWidth + this.bodyWidth;\n          paintRgn.yMin = this.headerHeight;\n          paintRgn.yMax = this.headerHeight + this.bodyHeight;\n\n          backgroundColor = this._style.backgroundColor;\n          break;\n        case 'column-header':\n          paintRgn.xMin = this.headerWidth;\n          paintRgn.xMax = this.headerWidth + this.bodyWidth;\n          paintRgn.yMin = 0;\n          paintRgn.yMax = this.headerHeight;\n\n          backgroundColor = this._style.headerBackgroundColor;\n          break;\n      }\n\n      this._paintMergedCells(cellGroups, paintRgn, backgroundColor);\n    }\n\n    // Paint the overlay.\n    this._paintOverlay();\n\n    // Sync the scroll state after painting.\n    this._syncScrollState();\n  }\n\n  /**\n   * Resize a row header section immediately.\n   */\n  private _resizeRowHeader(index: number, size: number | null): void {\n    // Look up the target section list.\n    let list = this._rowHeaderSections;\n\n    // Bail early if the index is out of range.\n    if (index < 0 || index >= list.count) {\n      return;\n    }\n\n    const adjustedSize = size ?? this._getMaxWidthInColumn(index, 'row-header');\n\n    if (!adjustedSize || adjustedSize == 0) {\n      return;\n    }\n\n    // Look up the old size of the section.\n    let oldSize = list.sizeOf(index);\n\n    // Normalize the new size of the section.\n    let newSize = list.clampSize(adjustedSize);\n\n    // Bail early if the size does not change.\n    if (oldSize === newSize) {\n      return;\n    }\n\n    // Resize the section in the list.\n    list.resize(index, newSize);\n\n    // Get the current size of the viewport.\n    let vw = this._viewportWidth;\n    let vh = this._viewportHeight;\n\n    // If there is nothing to paint, sync the scroll state.\n    if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n      this._syncScrollState();\n      return;\n    }\n\n    // Compute the size delta.\n    let delta = newSize - oldSize;\n\n    // Look up the offset of the section.\n    let offset = list.offsetOf(index);\n\n    // Bail early if the section is fully outside the viewport.\n    if (offset >= vw) {\n      this._syncScrollState();\n      return;\n    }\n\n    // Paint the entire tail if the section spans the viewport.\n    if (offset + oldSize >= vw || offset + newSize >= vw) {\n      this.paintContent(offset, 0, vw - offset, vh);\n      this._paintOverlay();\n      this._syncScrollState();\n      return;\n    }\n\n    // Compute the blit content dimensions.\n    let sx = offset + oldSize;\n    let sy = 0;\n    let sw = vw - sx;\n    let sh = vh;\n    let dx = sx + delta;\n    let dy = 0;\n\n    // Blit the valid content to the destination.\n    this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n\n    // Repaint the header section if needed.\n    if (newSize > 0) {\n      this.paintContent(offset, 0, newSize, vh);\n    }\n\n    // Paint the trailing space as needed.\n    if (this._stretchLastColumn && this.pageWidth > this.bodyWidth) {\n      let c = this._columnSections.count - 1;\n      let x = this.headerWidth + this._columnSections.offsetOf(c);\n      this.paintContent(x, 0, vw - x, vh);\n    } else if (delta < 0) {\n      this.paintContent(vw + delta, 0, -delta, vh);\n    }\n\n    // Repaint merged cells that are intersected by the resized row\n    // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n    for (const rgn of [\n      'corner-header',\n      'row-header'\n    ] as DataModel.CellRegion[]) {\n      const cellGroups = CellGroup.getCellGroupsAtColumn(\n        this.dataModel!,\n        rgn,\n        index\n      );\n\n      let paintRgn = {\n        region: rgn,\n        xMin: 0,\n        xMax: 0,\n        yMin: 0,\n        yMax: 0\n      };\n\n      switch (rgn) {\n        case 'corner-header':\n          paintRgn.xMin = 0;\n          paintRgn.xMax = this.headerWidth;\n          paintRgn.yMin = 0;\n          paintRgn.yMax = this.headerHeight;\n          break;\n        case 'row-header':\n          paintRgn.xMin = 0;\n          paintRgn.xMax = this.headerWidth;\n          paintRgn.yMin = this.headerHeight;\n          paintRgn.yMax = this.headerHeight + this.bodyHeight;\n          break;\n      }\n\n      this._paintMergedCells(\n        cellGroups,\n        paintRgn,\n        this._style.headerBackgroundColor\n      );\n    }\n\n    // Paint the overlay.\n    this._paintOverlay();\n\n    // Sync the scroll state after painting.\n    this._syncScrollState();\n  }\n\n  /**\n   * Resize a column header section immediately.\n   */\n  private _resizeColumnHeader(index: number, size: number): void {\n    // Look up the target section list.\n    let list = this._columnHeaderSections;\n\n    // Bail early if the index is out of range.\n    if (index < 0 || index >= list.count) {\n      return;\n    }\n\n    // Look up the old size of the section.\n    let oldSize = list.sizeOf(index);\n\n    // Normalize the new size of the section.\n    let newSize = list.clampSize(size);\n\n    // Bail early if the size does not change.\n    if (oldSize === newSize) {\n      return;\n    }\n\n    // Resize the section in the list.\n    list.resize(index, newSize);\n\n    // Get the current size of the viewport.\n    let vw = this._viewportWidth;\n    let vh = this._viewportHeight;\n\n    // If there is nothing to paint, sync the scroll state.\n    if (!this._viewport.isVisible || vw === 0 || vh === 0) {\n      this._syncScrollState();\n      return;\n    }\n\n    // Paint the overlay.\n    this._paintOverlay();\n\n    // Compute the size delta.\n    let delta = newSize - oldSize;\n\n    // Look up the offset of the section.\n    let offset = list.offsetOf(index);\n\n    // Bail early if the section is fully outside the viewport.\n    if (offset >= vh) {\n      this._syncScrollState();\n      return;\n    }\n\n    // Paint the entire tail if the section spans the viewport.\n    if (offset + oldSize >= vh || offset + newSize >= vh) {\n      this.paintContent(0, offset, vw, vh - offset);\n      this._paintOverlay();\n      this._syncScrollState();\n      return;\n    }\n\n    // Compute the blit content dimensions.\n    let sx = 0;\n    let sy = offset + oldSize;\n    let sw = vw;\n    let sh = vh - sy;\n    let dx = 0;\n    let dy = sy + delta;\n\n    // Blit the valid contents to the destination.\n    this._blitContent(this._canvas, sx, sy, sw, sh, dx, dy);\n\n    // Repaint the header section if needed.\n    if (newSize > 0) {\n      this.paintContent(0, offset, vw, newSize);\n    }\n\n    // Paint the trailing space as needed.\n    if (this._stretchLastRow && this.pageHeight > this.bodyHeight) {\n      let r = this._rowSections.count - 1;\n      let y = this.headerHeight + this._rowSections.offsetOf(r);\n      this.paintContent(0, y, vw, vh - y);\n    } else if (delta < 0) {\n      this.paintContent(0, vh + delta, vw, -delta);\n    }\n\n    // Repaint merged cells that are intersected by the resized row\n    // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n    for (const rgn of [\n      'corner-header',\n      'column-header'\n    ] as DataModel.CellRegion[]) {\n      const cellGroups = CellGroup.getCellGroupsAtRow(\n        this.dataModel!,\n        rgn,\n        index\n      );\n\n      let paintRgn = {\n        region: rgn,\n        xMin: 0,\n        xMax: 0,\n        yMin: 0,\n        yMax: 0\n      };\n\n      switch (rgn) {\n        case 'corner-header':\n          paintRgn.xMin = 0;\n          paintRgn.xMax = this.headerWidth;\n          paintRgn.yMin = 0;\n          paintRgn.yMax = this.headerHeight;\n          break;\n        case 'column-header':\n          paintRgn.xMin = this.headerWidth;\n          paintRgn.xMax = this.headerWidth + this.bodyWidth;\n          paintRgn.yMin = 0;\n          paintRgn.yMax = this.headerHeight;\n          break;\n      }\n\n      this._paintMergedCells(\n        cellGroups,\n        paintRgn,\n        this._style.headerBackgroundColor\n      );\n    }\n\n    // Paint the overlay.\n    this._paintOverlay();\n\n    // Sync the scroll state after painting.\n    this._syncScrollState();\n  }\n\n  /**\n   * Scroll immediately to the specified offset position.\n   */\n  private _scrollTo(x: number, y: number): void {\n    // Bail if no data model found.\n    if (!this.dataModel) {\n      return;\n    }\n\n    // Floor and clamp the position to the allowable range.\n    x = Math.max(0, Math.min(Math.floor(x), this.maxScrollX));\n    y = Math.max(0, Math.min(Math.floor(y), this.maxScrollY));\n\n    // Synchronize the scroll bar values.\n    this._hScrollBar.value = x;\n    this._vScrollBar.value = y;\n\n    // Compute the delta scroll amount.\n    let dx = x - this._scrollX;\n    let dy = y - this._scrollY;\n\n    // Bail early if there is no effective scroll.\n    if (dx === 0 && dy === 0) {\n      return;\n    }\n\n    // Bail early if the viewport is not visible.\n    if (!this._viewport.isVisible) {\n      this._scrollX = x;\n      this._scrollY = y;\n      return;\n    }\n\n    // Get the current size of the viewport.\n    let width = this._viewportWidth;\n    let height = this._viewportHeight;\n\n    // Bail early if the viewport is empty.\n    if (width === 0 || height === 0) {\n      this._scrollX = x;\n      this._scrollY = y;\n      return;\n    }\n\n    // Get the visible content origin.\n    let contentX = this.headerWidth;\n    let contentY = this.headerHeight;\n\n    // Get the visible content dimensions.\n    let contentWidth = width - contentX;\n    let contentHeight = height - contentY;\n\n    // Bail early if there is no content to draw.\n    if (contentWidth <= 0 && contentHeight <= 0) {\n      this._scrollX = x;\n      this._scrollY = y;\n      return;\n    }\n\n    // Compute the area which needs painting for the `dx` scroll.\n    let dxArea = 0;\n    if (dx !== 0 && contentWidth > 0) {\n      if (Math.abs(dx) >= contentWidth) {\n        dxArea = contentWidth * height;\n      } else {\n        dxArea = Math.abs(dx) * height;\n      }\n    }\n\n    // Compute the area which needs painting for the `dy` scroll.\n    let dyArea = 0;\n    if (dy !== 0 && contentHeight > 0) {\n      if (Math.abs(dy) >= contentHeight) {\n        dyArea = width * contentHeight;\n      } else {\n        dyArea = width * Math.abs(dy);\n      }\n    }\n\n    // If the area sum is larger than the total, paint everything.\n    if (dxArea + dyArea >= width * height) {\n      this._scrollX = x;\n      this._scrollY = y;\n      this.paintContent(0, 0, width, height);\n      this._paintOverlay();\n      return;\n    }\n\n    // Update the internal Y scroll position.\n    this._scrollY = y;\n\n    // Scroll the Y axis if needed. If the scroll distance exceeds\n    // the visible height, paint everything. Otherwise, blit the\n    // valid content and paint the dirty region.\n    if (dy !== 0 && contentHeight > 0) {\n      if (Math.abs(dy) >= contentHeight) {\n        this.paintContent(0, contentY, width, contentHeight);\n      } else {\n        const x = 0;\n        const y = dy < 0 ? contentY : contentY + dy;\n        const w = width;\n        const h = contentHeight - Math.abs(dy);\n        this._blitContent(this._canvas, x, y, w, h, x, y - dy);\n        this.paintContent(\n          0,\n          dy < 0 ? contentY : height - dy,\n          width,\n          Math.abs(dy)\n        );\n\n        // Repaint merged cells that are intersected by the scroll level\n        // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n        for (const rgn of ['body', 'row-header'] as DataModel.CellRegion[]) {\n          const cellgroups = CellGroup.getCellGroupsAtRegion(\n            this.dataModel,\n            rgn\n          );\n\n          let paintRgn = {\n            region: rgn,\n            xMin: 0,\n            xMax: 0,\n            yMin: 0,\n            yMax: 0\n          };\n\n          let backgroundColor = undefined;\n\n          switch (rgn) {\n            case 'body':\n              paintRgn.xMin = this.headerWidth;\n              paintRgn.xMax = this.headerWidth + this.bodyWidth;\n              paintRgn.yMin = this.headerHeight;\n              paintRgn.yMax = this.headerHeight + this.bodyHeight;\n\n              backgroundColor = this._style.backgroundColor;\n              break;\n            case 'row-header':\n              paintRgn.xMin = 0;\n              paintRgn.xMax = this.headerWidth;\n              paintRgn.yMin = this.headerHeight;\n              paintRgn.yMax = this.headerHeight + this.bodyHeight;\n\n              backgroundColor = this._style.headerBackgroundColor;\n              break;\n          }\n\n          this._paintMergedCells(cellgroups, paintRgn, backgroundColor);\n        }\n      }\n    }\n\n    // Update the internal X scroll position.\n    this._scrollX = x;\n\n    // Scroll the X axis if needed. If the scroll distance exceeds\n    // the visible width, paint everything. Otherwise, blit the\n    // valid content and paint the dirty region.\n    if (dx !== 0 && contentWidth > 0) {\n      if (Math.abs(dx) >= contentWidth) {\n        this.paintContent(contentX, 0, contentWidth, height);\n      } else {\n        const x = dx < 0 ? contentX : contentX + dx;\n        const y = 0;\n        const w = contentWidth - Math.abs(dx);\n        const h = height;\n        this._blitContent(this._canvas, x, y, w, h, x - dx, y);\n        this.paintContent(\n          dx < 0 ? contentX : width - dx,\n          0,\n          Math.abs(dx),\n          height\n        );\n\n        // Repaint merged cells that are intersected by the scroll level\n        // Otherwise it will be cut in two by the valid content, and drawn incorrectly\n        for (const rgn of ['body', 'column-header'] as DataModel.CellRegion[]) {\n          const cellGroups = CellGroup.getCellGroupsAtRegion(\n            this.dataModel,\n            rgn\n          );\n\n          let paintRgn = {\n            region: rgn,\n            xMin: 0,\n            xMax: 0,\n            yMin: 0,\n            yMax: 0\n          };\n\n          let backgroundColor = undefined;\n\n          switch (rgn) {\n            case 'body':\n              paintRgn.xMin = this.headerWidth;\n              paintRgn.xMax = this.headerWidth + this.bodyWidth;\n              paintRgn.yMin = this.headerHeight;\n              paintRgn.yMax = this.headerHeight + this.bodyHeight;\n\n              backgroundColor = this._style.backgroundColor;\n              break;\n            case 'column-header':\n              paintRgn.xMin = this.headerWidth;\n              paintRgn.xMax = this.headerWidth + this.bodyWidth;\n              paintRgn.yMin = 0;\n              paintRgn.yMax = this.headerHeight;\n\n              backgroundColor = this._style.headerBackgroundColor;\n              break;\n          }\n\n          this._paintMergedCells(cellGroups, paintRgn, backgroundColor);\n        }\n      }\n    }\n\n    // Paint the overlay.\n    this._paintOverlay();\n  }\n  /**\n   * Blit content into the on-screen grid canvas.\n   *\n   * The rect should be expressed in viewport coordinates.\n   *\n   * This automatically accounts for the dpi ratio.\n   */\n  private _blitContent(\n    source: HTMLCanvasElement,\n    x: number,\n    y: number,\n    w: number,\n    h: number,\n    dx: number,\n    dy: number\n  ): void {\n    // Scale the blit coordinates by the dpi ratio.\n    x *= this._dpiRatio;\n    y *= this._dpiRatio;\n    w *= this._dpiRatio;\n    h *= this._dpiRatio;\n    dx *= this._dpiRatio;\n    dy *= this._dpiRatio;\n\n    // Save the current gc state.\n    this._canvasGC.save();\n\n    // Set the transform to the identity matrix.\n    this._canvasGC.setTransform(1, 0, 0, 1, 0, 0);\n\n    // Draw the specified content.\n    this._canvasGC.drawImage(source, x, y, w, h, dx, dy, w, h);\n\n    // Restore the gc state.\n    this._canvasGC.restore();\n  }\n\n  /**\n   * Paint the grid content for the given dirty rect.\n   *\n   * The rect should be expressed in valid viewport coordinates.\n   *\n   * This is the primary paint entry point. The individual `_draw*`\n   * methods should not be invoked directly. This method dispatches\n   * to the drawing methods in the correct order.\n   */\n  protected paintContent(rx: number, ry: number, rw: number, rh: number): void {\n    // Scale the canvas and buffer GC for the dpi ratio.\n    this._canvasGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n    this._bufferGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n\n    // Clear the dirty rect of all content.\n    this._canvasGC.clearRect(rx, ry, rw, rh);\n\n    // Draw the void region.\n    this._drawVoidRegion(rx, ry, rw, rh);\n\n    // Draw the body region.\n    this._drawBodyRegion(rx, ry, rw, rh);\n\n    // Draw the row header region.\n    this._drawRowHeaderRegion(rx, ry, rw, rh);\n\n    // Draw the column header region.\n    this._drawColumnHeaderRegion(rx, ry, rw, rh);\n\n    // Draw the corner header region.\n    this.drawCornerHeaderRegion(rx, ry, rw, rh);\n  }\n\n  /**\n   * Resizes body column headers so their text fits\n   * without clipping or wrapping.\n   * @param dataModel\n   */\n  private _fitBodyColumnHeaders(\n    dataModel: DataModel,\n    padding: number,\n    numCols?: number\n  ): void {\n    // Get the body column count\n    const bodyColumnCount =\n      numCols === undefined ? dataModel.columnCount('body') : numCols;\n\n    for (let i = 0; i < bodyColumnCount; i++) {\n      /*\n        if we're working with nested column headers,\n        retrieve the nested levels and iterate on them.\n      */\n      const numRows = dataModel.rowCount('column-header');\n\n      /*\n        Calculate the maximum text width, across\n        all nested rows under a given column number.\n      */\n      let maxWidth = 0;\n      for (let j = 0; j < numRows; j++) {\n        const config = DataGrid._getConfig(dataModel, j, i, 'column-header');\n        const textWidth = this._getCellTextWidth(config);\n        // Update the maximum width for that column.\n        maxWidth = Math.max(maxWidth, textWidth);\n      }\n\n      /*\n        Send a resize message with new width for the given column.\n        Using a padding of 15 pixels to leave some room.\n      */\n      this.resizeColumn('body', i, maxWidth + padding);\n    }\n  }\n\n  /**\n   * Resizes row header columns so their text fits\n   * without clipping or wrapping.\n   * @param dataModel\n   */\n  private _fitRowColumnHeaders(\n    dataModel: DataModel,\n    padding: number,\n    numCols?: number\n  ): void {\n    /*\n      if we're working with nested row headers,\n      retrieve the nested levels and iterate on them.\n    */\n    const rowColumnCount =\n      numCols === undefined ? dataModel.columnCount('row-header') : numCols;\n\n    for (let i = 0; i < rowColumnCount; i++) {\n      const numCols = dataModel.rowCount('column-header');\n      /*\n        Calculate the maximum text width, across\n        all nested columns under a given row index.\n      */\n      let maxWidth = 0;\n      for (let j = 0; j < numCols; j++) {\n        const config = DataGrid._getConfig(dataModel, j, i, 'corner-header');\n        const textWidth = this._getCellTextWidth(config);\n        maxWidth = Math.max(maxWidth, textWidth);\n      }\n\n      /*\n        Send a resize message with new width for the given column.\n        Using a padding of 15 pixels to leave some room.\n      */\n      this.resizeColumn('row-header', i, maxWidth + padding);\n    }\n  }\n\n  /**\n   * Paint the overlay content for the entire grid.\n   *\n   * This is the primary overlay paint entry point. The individual\n   * `_draw*` methods should not be invoked directly. This method\n   * dispatches to the drawing methods in the correct order.\n   */\n  private _paintOverlay(): void {\n    // Scale the overlay GC for the dpi ratio.\n    this._overlayGC.setTransform(this._dpiRatio, 0, 0, this._dpiRatio, 0, 0);\n\n    // Clear the overlay of all content.\n    this._overlayGC.clearRect(0, 0, this._overlay.width, this._overlay.height);\n\n    // Draw the body selections.\n    this._drawBodySelections();\n\n    // Draw the row header selections.\n    this._drawRowHeaderSelections();\n\n    // Draw the column header selections.\n    this._drawColumnHeaderSelections();\n\n    // Draw the cursor.\n    this._drawCursor();\n\n    // Draw the shadows.\n    this._drawShadows();\n  }\n\n  /**\n   * Draw the void region for the dirty rect.\n   */\n  private _drawVoidRegion(\n    rx: number,\n    ry: number,\n    rw: number,\n    rh: number\n  ): void {\n    // Look up the void color.\n    let color = this._style.voidColor;\n\n    // Bail if there is no void color.\n    if (!color) {\n      return;\n    }\n\n    // Fill the dirty rect with the void color.\n    this._canvasGC.fillStyle = color;\n    this._canvasGC.fillRect(rx, ry, rw, rh);\n  }\n\n  /**\n   * Draw the body region which intersects the dirty rect.\n   */\n  private _drawBodyRegion(\n    rx: number,\n    ry: number,\n    rw: number,\n    rh: number\n  ): void {\n    // Get the visible content dimensions.\n    let contentW = this._columnSections.length - this._scrollX;\n    let contentH = this._rowSections.length - this._scrollY;\n\n    // Bail if there is no content to draw.\n    if (contentW <= 0 || contentH <= 0) {\n      return;\n    }\n\n    // Get the visible content origin.\n    let contentX = this.headerWidth;\n    let contentY = this.headerHeight;\n\n    // Bail if the dirty rect does not intersect the content area.\n    if (rx + rw <= contentX) {\n      return;\n    }\n    if (ry + rh <= contentY) {\n      return;\n    }\n    if (rx >= contentX + contentW) {\n      return;\n    }\n    if (ry >= contentY + contentH) {\n      return;\n    }\n\n    // Fetch the geometry.\n    let bh = this.bodyHeight;\n    let bw = this.bodyWidth;\n    let ph = this.pageHeight;\n    let pw = this.pageWidth;\n\n    // Get the upper and lower bounds of the dirty content area.\n    let x1 = Math.max(rx, contentX);\n    let y1 = Math.max(ry, contentY);\n    let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n    let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n\n    // Convert the dirty content bounds into cell bounds.\n    let r1 = this._rowSections.indexOf(y1 - contentY + this._scrollY);\n    let c1 = this._columnSections.indexOf(x1 - contentX + this._scrollX);\n    let r2 = this._rowSections.indexOf(y2 - contentY + this._scrollY);\n    let c2 = this._columnSections.indexOf(x2 - contentX + this._scrollX);\n\n    // Fetch the max row and column.\n    let maxRow = this._rowSections.count - 1;\n    let maxColumn = this._columnSections.count - 1;\n\n    // Handle a dirty content area larger than the cell count.\n    if (r2 < 0) {\n      r2 = maxRow;\n    }\n    if (c2 < 0) {\n      c2 = maxColumn;\n    }\n\n    // Convert the cell bounds back to visible coordinates.\n    let x = this._columnSections.offsetOf(c1) + contentX - this._scrollX;\n    let y = this._rowSections.offsetOf(r1) + contentY - this._scrollY;\n\n    // Set up the paint region size variables.\n    let width = 0;\n    let height = 0;\n\n    // Allocate the section sizes arrays.\n    let rowSizes = new Array<number>(r2 - r1 + 1);\n    let columnSizes = new Array<number>(c2 - c1 + 1);\n\n    // Get the row sizes for the region.\n    for (let j = r1; j <= r2; ++j) {\n      let size = this._rowSections.sizeOf(j);\n      rowSizes[j - r1] = size;\n      height += size;\n    }\n\n    // Get the column sizes for the region.\n    for (let i = c1; i <= c2; ++i) {\n      let size = this._columnSections.sizeOf(i);\n      columnSizes[i - c1] = size;\n      width += size;\n    }\n\n    // Adjust the geometry if the last row is streched.\n    if (this._stretchLastRow && ph > bh && r2 === maxRow) {\n      let dh = this.pageHeight - this.bodyHeight;\n      rowSizes[rowSizes.length - 1] += dh;\n      height += dh;\n      y2 += dh;\n    }\n\n    // Adjust the geometry if the last column is streched.\n    if (this._stretchLastColumn && pw > bw && c2 === maxColumn) {\n      let dw = this.pageWidth - this.bodyWidth;\n      columnSizes[columnSizes.length - 1] += dw;\n      width += dw;\n      x2 += dw;\n    }\n\n    // Create the paint region object.\n    let rgn: Private.PaintRegion = {\n      region: 'body',\n      xMin: x1,\n      yMin: y1,\n      xMax: x2,\n      yMax: y2,\n      x,\n      y,\n      width,\n      height,\n      row: r1,\n      column: c1,\n      rowSizes,\n      columnSizes\n    };\n\n    // Draw the background.\n    this._drawBackground(rgn, this._style.backgroundColor);\n\n    // Draw the row background.\n    this._drawRowBackground(rgn, this._style.rowBackgroundColor);\n\n    // Draw the column background.\n    this._drawColumnBackground(rgn, this._style.columnBackgroundColor);\n\n    // Draw the cell content for the paint region.\n    this._drawCells(rgn);\n\n    // Draw the horizontal grid lines.\n    this._drawHorizontalGridLines(\n      rgn,\n      this._style.horizontalGridLineColor || this._style.gridLineColor\n    );\n\n    // Draw the vertical grid lines.\n    this._drawVerticalGridLines(\n      rgn,\n      this._style.verticalGridLineColor || this._style.gridLineColor\n    );\n\n    // Get the cellgroups from the cell-region that intersects with the paint region\n    const cellGroups = CellGroup.getCellGroupsAtRegion(\n      this.dataModel!,\n      rgn.region\n    ).filter(group => {\n      return this.cellGroupInteresectsRegion(group, rgn);\n    });\n\n    // Draw merged cells\n    this._paintMergedCells(cellGroups, rgn, this._style.backgroundColor);\n  }\n\n  /**\n   * Draw the row header region which intersects the dirty rect.\n   */\n  private _drawRowHeaderRegion(\n    rx: number,\n    ry: number,\n    rw: number,\n    rh: number\n  ): void {\n    // Get the visible content dimensions.\n    let contentW = this.headerWidth;\n    let contentH = this.bodyHeight - this._scrollY;\n\n    // Bail if there is no content to draw.\n    if (contentW <= 0 || contentH <= 0) {\n      return;\n    }\n\n    // Get the visible content origin.\n    let contentX = 0;\n    let contentY = this.headerHeight;\n\n    // Bail if the dirty rect does not intersect the content area.\n    if (rx + rw <= contentX) {\n      return;\n    }\n    if (ry + rh <= contentY) {\n      return;\n    }\n    if (rx >= contentX + contentW) {\n      return;\n    }\n    if (ry >= contentY + contentH) {\n      return;\n    }\n\n    // Fetch the geometry.\n    let bh = this.bodyHeight;\n    let ph = this.pageHeight;\n\n    // Get the upper and lower bounds of the dirty content area.\n    let x1 = rx;\n    let y1 = Math.max(ry, contentY);\n    let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n    let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n\n    // Convert the dirty content bounds into cell bounds.\n    let r1 = this._rowSections.indexOf(y1 - contentY + this._scrollY);\n    let c1 = this._rowHeaderSections.indexOf(x1);\n    let r2 = this._rowSections.indexOf(y2 - contentY + this._scrollY);\n    let c2 = this._rowHeaderSections.indexOf(x2);\n\n    // Fetch max row and column.\n    let maxRow = this._rowSections.count - 1;\n    let maxColumn = this._rowHeaderSections.count - 1;\n\n    // Handle a dirty content area larger than the cell count.\n    if (r2 < 0) {\n      r2 = maxRow;\n    }\n    if (c2 < 0) {\n      c2 = maxColumn;\n    }\n\n    // Convert the cell bounds back to visible coordinates.\n    let x = this._rowHeaderSections.offsetOf(c1);\n    let y = this._rowSections.offsetOf(r1) + contentY - this._scrollY;\n\n    // Set up the paint region size variables.\n    let width = 0;\n    let height = 0;\n\n    // Allocate the section sizes arrays.\n    let rowSizes = new Array<number>(r2 - r1 + 1);\n    let columnSizes = new Array<number>(c2 - c1 + 1);\n\n    // Get the row sizes for the region.\n    for (let j = r1; j <= r2; ++j) {\n      let size = this._rowSections.sizeOf(j);\n      rowSizes[j - r1] = size;\n      height += size;\n    }\n\n    // Get the column sizes for the region.\n    for (let i = c1; i <= c2; ++i) {\n      let size = this._rowHeaderSections.sizeOf(i);\n      columnSizes[i - c1] = size;\n      width += size;\n    }\n\n    // Adjust the geometry if the last row is stretched.\n    if (this._stretchLastRow && ph > bh && r2 === maxRow) {\n      let dh = this.pageHeight - this.bodyHeight;\n      rowSizes[rowSizes.length - 1] += dh;\n      height += dh;\n      y2 += dh;\n    }\n\n    // Create the paint region object.\n    let rgn: Private.PaintRegion = {\n      region: 'row-header',\n      xMin: x1,\n      yMin: y1,\n      xMax: x2,\n      yMax: y2,\n      x,\n      y,\n      width,\n      height,\n      row: r1,\n      column: c1,\n      rowSizes,\n      columnSizes\n    };\n\n    // Draw the background.\n    this._drawBackground(rgn, this._style.headerBackgroundColor);\n\n    // Draw the cell content for the paint region.\n    this._drawCells(rgn);\n\n    // Draw the horizontal grid lines.\n    this._drawHorizontalGridLines(\n      rgn,\n      this._style.headerHorizontalGridLineColor ||\n        this._style.headerGridLineColor\n    );\n\n    // Draw the vertical grid lines.\n    this._drawVerticalGridLines(\n      rgn,\n      this._style.headerVerticalGridLineColor || this._style.headerGridLineColor\n    );\n\n    // Get the cellgroups from the cell-region that intersects with the paint region\n    const cellGroups = CellGroup.getCellGroupsAtRegion(\n      this.dataModel!,\n      rgn.region\n    ).filter(group => {\n      return this.cellGroupInteresectsRegion(group, rgn);\n    });\n\n    // Draw merged cells\n    this._paintMergedCells(cellGroups, rgn, this._style.headerBackgroundColor);\n  }\n\n  /**\n   * Draw the column header region which intersects the dirty rect.\n   */\n  private _drawColumnHeaderRegion(\n    rx: number,\n    ry: number,\n    rw: number,\n    rh: number\n  ): void {\n    // Get the visible content dimensions.\n    let contentW = this.bodyWidth - this._scrollX;\n    let contentH = this.headerHeight;\n\n    // Bail if there is no content to draw.\n    if (contentW <= 0 || contentH <= 0) {\n      return;\n    }\n\n    // Get the visible content origin.\n    let contentX = this.headerWidth;\n    let contentY = 0;\n\n    // Bail if the dirty rect does not intersect the content area.\n    if (rx + rw <= contentX) {\n      return;\n    }\n    if (ry + rh <= contentY) {\n      return;\n    }\n    if (rx >= contentX + contentW) {\n      return;\n    }\n    if (ry >= contentY + contentH) {\n      return;\n    }\n\n    // Fetch the geometry.\n    let bw = this.bodyWidth;\n    let pw = this.pageWidth;\n\n    // Get the upper and lower bounds of the dirty content area.\n    let x1 = Math.max(rx, contentX);\n    let y1 = ry;\n    let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n    let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n\n    // Convert the dirty content bounds into cell bounds.\n    let r1 = this._columnHeaderSections.indexOf(y1);\n    let c1 = this._columnSections.indexOf(x1 - contentX + this._scrollX);\n    let r2 = this._columnHeaderSections.indexOf(y2);\n    let c2 = this._columnSections.indexOf(x2 - contentX + this._scrollX);\n\n    // Fetch the max row and column.\n    let maxRow = this._columnHeaderSections.count - 1;\n    let maxColumn = this._columnSections.count - 1;\n\n    // Handle a dirty content area larger than the cell count.\n    if (r2 < 0) {\n      r2 = maxRow;\n    }\n    if (c2 < 0) {\n      c2 = maxColumn;\n    }\n\n    // Convert the cell bounds back to visible coordinates.\n    let x = this._columnSections.offsetOf(c1) + contentX - this._scrollX;\n    let y = this._columnHeaderSections.offsetOf(r1);\n\n    // Set up the paint region size variables.\n    let width = 0;\n    let height = 0;\n\n    // Allocate the section sizes arrays.\n    let rowSizes = new Array<number>(r2 - r1 + 1);\n    let columnSizes = new Array<number>(c2 - c1 + 1);\n\n    // Get the row sizes for the region.\n    for (let j = r1; j <= r2; ++j) {\n      let size = this._columnHeaderSections.sizeOf(j);\n      rowSizes[j - r1] = size;\n      height += size;\n    }\n\n    // Get the column sizes for the region.\n    for (let i = c1; i <= c2; ++i) {\n      let size = this._columnSections.sizeOf(i);\n      columnSizes[i - c1] = size;\n      width += size;\n    }\n\n    // Adjust the geometry if the last column is stretched.\n    if (this._stretchLastColumn && pw > bw && c2 === maxColumn) {\n      let dw = this.pageWidth - this.bodyWidth;\n      columnSizes[columnSizes.length - 1] += dw;\n      width += dw;\n      x2 += dw;\n    }\n\n    // Create the paint region object.\n    let rgn: Private.PaintRegion = {\n      region: 'column-header',\n      xMin: x1,\n      yMin: y1,\n      xMax: x2,\n      yMax: y2,\n      x,\n      y,\n      width,\n      height,\n      row: r1,\n      column: c1,\n      rowSizes,\n      columnSizes\n    };\n\n    // Draw the background.\n    this._drawBackground(rgn, this._style.headerBackgroundColor);\n\n    // Draw the cell content for the paint region.\n    this._drawCells(rgn);\n\n    // Draw the horizontal grid lines.\n    this._drawHorizontalGridLines(\n      rgn,\n      this._style.headerHorizontalGridLineColor ||\n        this._style.headerGridLineColor\n    );\n\n    // Draw the vertical grid lines.\n    this._drawVerticalGridLines(\n      rgn,\n      this._style.headerVerticalGridLineColor || this._style.headerGridLineColor\n    );\n\n    // Get the cellgroups from the cell-region that intersects with the paint region\n    const cellGroups = CellGroup.getCellGroupsAtRegion(\n      this.dataModel!,\n      rgn.region\n    ).filter(group => {\n      return this.cellGroupInteresectsRegion(group, rgn);\n    });\n\n    // Draw merged cells\n    this._paintMergedCells(cellGroups, rgn, this._style.headerBackgroundColor);\n  }\n\n  /**\n   * Draw the corner header region which intersects the dirty rect.\n   */\n  protected drawCornerHeaderRegion(\n    rx: number,\n    ry: number,\n    rw: number,\n    rh: number\n  ): void {\n    // Get the visible content dimensions.\n    let contentW = this.headerWidth;\n    let contentH = this.headerHeight;\n\n    // Bail if there is no content to draw.\n    if (contentW <= 0 || contentH <= 0) {\n      return;\n    }\n\n    // Get the visible content origin.\n    let contentX = 0;\n    let contentY = 0;\n\n    // Bail if the dirty rect does not intersect the content area.\n    if (rx + rw <= contentX) {\n      return;\n    }\n    if (ry + rh <= contentY) {\n      return;\n    }\n    if (rx >= contentX + contentW) {\n      return;\n    }\n    if (ry >= contentY + contentH) {\n      return;\n    }\n\n    // Get the upper and lower bounds of the dirty content area.\n    let x1 = rx;\n    let y1 = ry;\n    let x2 = Math.min(rx + rw - 1, contentX + contentW - 1);\n    let y2 = Math.min(ry + rh - 1, contentY + contentH - 1);\n\n    // Convert the dirty content bounds into cell bounds.\n    let r1 = this._columnHeaderSections.indexOf(y1);\n    let c1 = this._rowHeaderSections.indexOf(x1);\n    let r2 = this._columnHeaderSections.indexOf(y2);\n    let c2 = this._rowHeaderSections.indexOf(x2);\n\n    // Handle a dirty content area larger than the cell count.\n    if (r2 < 0) {\n      r2 = this._columnHeaderSections.count - 1;\n    }\n    if (c2 < 0) {\n      c2 = this._rowHeaderSections.count - 1;\n    }\n\n    // Convert the cell bounds back to visible coordinates.\n    let x = this._rowHeaderSections.offsetOf(c1);\n    let y = this._columnHeaderSections.offsetOf(r1);\n\n    // Set up the paint region size variables.\n    let width = 0;\n    let height = 0;\n\n    // Allocate the section sizes arrays.\n    let rowSizes = new Array<number>(r2 - r1 + 1);\n    let columnSizes = new Array<number>(c2 - c1 + 1);\n\n    // Get the row sizes for the region.\n    for (let j = r1; j <= r2; ++j) {\n      let size = this._columnHeaderSections.sizeOf(j);\n      rowSizes[j - r1] = size;\n      height += size;\n    }\n\n    // Get the column sizes for the region.\n    for (let i = c1; i <= c2; ++i) {\n      let size = this._rowHeaderSections.sizeOf(i);\n      columnSizes[i - c1] = size;\n      width += size;\n    }\n\n    // Create the paint region object.\n    let rgn: Private.PaintRegion = {\n      region: 'corner-header',\n      xMin: x1,\n      yMin: y1,\n      xMax: x2,\n      yMax: y2,\n      x,\n      y,\n      width,\n      height,\n      row: r1,\n      column: c1,\n      rowSizes,\n      columnSizes\n    };\n\n    // Draw the background.\n    this._drawBackground(rgn, this._style.headerBackgroundColor);\n\n    // Draw the cell content for the paint region.\n    this._drawCells(rgn);\n\n    // Draw the horizontal grid lines.\n    this._drawHorizontalGridLines(\n      rgn,\n      this._style.headerHorizontalGridLineColor ||\n        this._style.headerGridLineColor\n    );\n\n    // Draw the vertical grid lines.\n    this._drawVerticalGridLines(\n      rgn,\n      this._style.headerVerticalGridLineColor || this._style.headerGridLineColor\n    );\n\n    // Get the cellgroups from the cell-region that intersects with the paint region\n    const cellGroups = CellGroup.getCellGroupsAtRegion(\n      this.dataModel!,\n      rgn.region\n    ).filter(group => {\n      return this.cellGroupInteresectsRegion(group, rgn);\n    });\n\n    // Draw merged cells\n    this._paintMergedCells(cellGroups, rgn, this._style.headerBackgroundColor);\n  }\n\n  /**\n   * Draw the background for the given paint region.\n   */\n  private _drawBackground(\n    rgn: Private.PaintRegion,\n    color: string | undefined\n  ): void {\n    // Bail if there is no color to draw.\n    if (!color) {\n      return;\n    }\n\n    // Unpack the region.\n    let { xMin, yMin, xMax, yMax } = rgn;\n\n    // Fill the region with the specified color.\n    this._canvasGC.fillStyle = color;\n    this._canvasGC.fillRect(xMin, yMin, xMax - xMin + 1, yMax - yMin + 1);\n  }\n\n  /**\n   * Draw the row background for the given paint region.\n   */\n  private _drawRowBackground(\n    rgn: Private.PaintRegion,\n    colorFn: ((i: number) => string) | undefined\n  ): void {\n    // Bail if there is no color function.\n    if (!colorFn) {\n      return;\n    }\n\n    // Compute the X bounds for the row.\n    let x1 = Math.max(rgn.xMin, rgn.x);\n    let x2 = Math.min(rgn.x + rgn.width - 1, rgn.xMax);\n\n    // Draw the background for the rows in the region.\n    for (let y = rgn.y, j = 0, n = rgn.rowSizes.length; j < n; ++j) {\n      // Fetch the size of the row.\n      let size = rgn.rowSizes[j];\n\n      // Skip zero sized rows.\n      if (size === 0) {\n        continue;\n      }\n\n      // Get the background color for the row.\n      let color = colorFn(rgn.row + j);\n\n      // Fill the row with the background color if needed.\n      if (color) {\n        let y1 = Math.max(rgn.yMin, y);\n        let y2 = Math.min(y + size - 1, rgn.yMax);\n        this._canvasGC.fillStyle = color;\n        this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n      }\n\n      // Increment the running Y coordinate.\n      y += size;\n    }\n  }\n\n  /**\n   * Draw the column background for the given paint region.\n   */\n  private _drawColumnBackground(\n    rgn: Private.PaintRegion,\n    colorFn: ((i: number) => string) | undefined\n  ): void {\n    // Bail if there is no color function.\n    if (!colorFn) {\n      return;\n    }\n\n    // Compute the Y bounds for the column.\n    let y1 = Math.max(rgn.yMin, rgn.y);\n    let y2 = Math.min(rgn.y + rgn.height - 1, rgn.yMax);\n\n    // Draw the background for the columns in the region.\n    for (let x = rgn.x, i = 0, n = rgn.columnSizes.length; i < n; ++i) {\n      // Fetch the size of the column.\n      let size = rgn.columnSizes[i];\n\n      // Skip zero sized columns.\n      if (size === 0) {\n        continue;\n      }\n\n      // Get the background color for the column.\n      let color = colorFn(rgn.column + i);\n\n      // Fill the column with the background color if needed.\n      if (color) {\n        let x1 = Math.max(rgn.xMin, x);\n        let x2 = Math.min(x + size - 1, rgn.xMax);\n        this._canvasGC.fillStyle = color;\n        this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n      }\n\n      // Increment the running X coordinate.\n      x += size;\n    }\n  }\n\n  /**\n   * Returns column size\n   * @param region\n   * @param index\n   */\n  private _getColumnSize(region: DataModel.CellRegion, index: number): number {\n    if (region === 'corner-header') {\n      return this._rowHeaderSections.sizeOf(index);\n    }\n    return this.columnSize(region as DataModel.ColumnRegion, index);\n  }\n\n  /**\n   * Returns row size\n   * @param region\n   * @param index\n   */\n  private _getRowSize(region: DataModel.CellRegion, index: number): number {\n    if (region === 'corner-header') {\n      return this._columnHeaderSections.sizeOf(index);\n    }\n    return this.rowSize(region as DataModel.RowRegion, index);\n  }\n\n  /**\n   * Draw the cells for the given paint region.\n   */\n  private _drawCells(rgn: Private.PaintRegion): void {\n    // Bail if there is no data model.\n    if (!this._dataModel) {\n      return;\n    }\n\n    // Set up the cell config object for rendering.\n    let config = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      region: rgn.region,\n      row: 0,\n      column: 0,\n      value: null as any,\n      metadata: DataModel.emptyMetadata\n    };\n\n    let groupIndex = -1;\n\n    // Save the buffer gc before wrapping.\n    this._bufferGC.save();\n\n    // Wrap the buffer gc for painting the cells.\n    let gc = new GraphicsContext(this._bufferGC);\n\n    let height = 0;\n\n    // Loop over the columns in the region.\n    for (let x = rgn.x, i = 0, n = rgn.columnSizes.length; i < n; ++i) {\n      // Fetch the size of the column.\n      let width = rgn.columnSizes[i];\n\n      // Skip zero sized columns.\n      if (width === 0) {\n        continue;\n      }\n\n      // Compute the column index.\n      let column = rgn.column + i;\n\n      // Update the config for the current column.\n      config.x = x;\n      config.width = width;\n      config.column = column;\n\n      // Loop over the rows in the column.\n      for (let y = rgn.y, j = 0, n = rgn.rowSizes.length; j < n; ++j) {\n        // Fetch the size of the row.\n        height = rgn.rowSizes[j];\n\n        // Skip zero sized rows.\n        if (height === 0) {\n          continue;\n        }\n\n        // Compute the row index.\n        let row = rgn.row + j;\n\n        groupIndex = CellGroup.getGroupIndex(\n          this.dataModel!,\n          config.region,\n          row,\n          column\n        );\n\n        // For merged cell regions, don't do anything, we draw merged regions later.\n        if (groupIndex !== -1) {\n          y += height;\n          continue;\n        }\n\n        // Clear the buffer rect for the cell.\n        gc.clearRect(x, y, width, height);\n\n        let value = DataGrid._getCellValue(\n          this.dataModel as DataModel,\n          rgn.region,\n          row,\n          column\n        );\n        let metadata = DataGrid._getCellMetadata(\n          this.dataModel as DataModel,\n          rgn.region,\n          row,\n          column\n        );\n\n        // Update the config for the current cell.\n        config.y = y;\n        config.height = height;\n        config.width = width;\n        config.row = row;\n        config.value = value;\n        config.metadata = metadata;\n\n        // Get the renderer for the cell.\n        let renderer = this._cellRenderers.get(config);\n\n        // Save the GC state.\n        gc.save();\n\n        // Paint the cell into the off-screen buffer.\n        try {\n          if (renderer instanceof AsyncCellRenderer) {\n            if (renderer.isReady(config)) {\n              renderer.paint(gc, config);\n            } else {\n              renderer.paintPlaceholder(gc, config);\n              renderer.load(config).then(() => {\n                const r1 = row;\n                const r2 = row + 1;\n\n                const c1 = column;\n                const c2 = column + 1;\n\n                this.repaintRegion(rgn.region, r1, c1, r2, c2);\n              });\n            }\n          } else {\n            renderer.paint(gc, config);\n          }\n        } catch (err) {\n          console.error(err);\n        }\n\n        // Restore the GC state.\n        gc.restore();\n\n        // Compute the actual X bounds for the cell.\n        let x1 = Math.max(rgn.xMin, config.x);\n        let x2 = Math.min(config.x + config.width - 1, rgn.xMax);\n\n        // Compute the actual Y bounds for the cell.\n        let y1 = Math.max(rgn.yMin, config.y);\n        let y2 = Math.min(config.y + config.height - 1, rgn.yMax);\n\n        this._blitContent(\n          this._buffer,\n          x1,\n          y1,\n          x2 - x1 + 1,\n          y2 - y1 + 1,\n          x1,\n          y1\n        );\n\n        // Increment the running Y coordinate.\n        y += height;\n      }\n\n      // Restore the GC state.\n      gc.restore();\n\n      // Increment the running X coordinate.\n      x += width;\n    }\n\n    // Dispose of the wrapped gc.\n    gc.dispose();\n\n    // Restore the final buffer gc state.\n    this._bufferGC.restore();\n  }\n\n  // TODO Move this in the utils file (but we need the PaintRegion typing)\n  private cellGroupInteresectsRegion(\n    group: CellGroup,\n    rgn: Private.PaintRegion\n  ) {\n    const rgnR1 = rgn.row;\n    const rgnR2 = rgn.row + rgn.rowSizes.length;\n\n    const rgnC1 = rgn.column;\n    const rgnC2 = rgn.column + rgn.columnSizes.length;\n\n    const dx = Math.min(group.r2, rgnR2) - Math.max(group.r1, rgnR1);\n    const dy = Math.min(group.c2, rgnC2) - Math.max(group.c1, rgnC1);\n\n    return dx >= 0 && dy >= 0;\n  }\n\n  private static _getCellValue(\n    dm: DataModel,\n    region: DataModel.CellRegion,\n    row: number,\n    col: number\n  ) {\n    // Get the value for the cell.\n    try {\n      return dm.data(region, row, col);\n    } catch (err) {\n      console.error(err);\n      return null;\n    }\n  }\n\n  private static _getCellMetadata(\n    dm: DataModel,\n    region: DataModel.CellRegion,\n    row: number,\n    col: number\n  ) {\n    // Get the metadata for the cell.\n    try {\n      return dm.metadata(region, row, col);\n    } catch (err) {\n      console.error(err);\n      return DataModel.emptyMetadata;\n    }\n  }\n\n  /**\n   * Paint group cells.\n   */\n  private _paintMergedCells(\n    cellGroups: CellGroup[],\n    rgn: Private.PixelRegion,\n    backgroundColor: string | undefined\n  ): void {\n    // Bail if there is no data model.\n    if (!this._dataModel) {\n      return;\n    }\n\n    // Set up the cell config object for rendering.\n    let config = {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      region: rgn.region,\n      row: 0,\n      column: 0,\n      value: null as any,\n      metadata: DataModel.emptyMetadata\n    };\n\n    if (backgroundColor) {\n      this._canvasGC.fillStyle = backgroundColor;\n    }\n    // Set the line width for the grid lines.\n    this._canvasGC.lineWidth = 1;\n\n    // Save the buffer gc before wrapping.\n    this._bufferGC.save();\n\n    // Wrap the buffer gc for painting the cells.\n    let gc = new GraphicsContext(this._bufferGC);\n\n    for (const group of cellGroups) {\n      let width = 0;\n      for (let c = group.c1; c <= group.c2; c++) {\n        width += this._getColumnSize(rgn.region, c);\n      }\n\n      let height = 0;\n      for (let r = group.r1; r <= group.r2; r++) {\n        height += this._getRowSize(rgn.region, r);\n      }\n\n      let value = DataGrid._getCellValue(\n        this.dataModel as DataModel,\n        rgn.region,\n        group.r1,\n        group.c1\n      );\n      let metadata = DataGrid._getCellMetadata(\n        this.dataModel as DataModel,\n        rgn.region,\n        group.r1,\n        group.c2\n      );\n\n      let x = 0;\n      let y = 0;\n      switch (rgn.region) {\n        case 'body':\n          x =\n            this._columnSections.offsetOf(group.c1) +\n            this.headerWidth -\n            this._scrollX;\n          y =\n            this._rowSections.offsetOf(group.r1) +\n            this.headerHeight -\n            this._scrollY;\n          break;\n        case 'column-header':\n          x =\n            this._columnSections.offsetOf(group.c1) +\n            this.headerWidth -\n            this._scrollX;\n          y = this._rowSections.offsetOf(group.r1);\n          break;\n        case 'row-header':\n          x = this._columnSections.offsetOf(group.c1);\n          y =\n            this._rowSections.offsetOf(group.r1) +\n            this.headerHeight -\n            this._scrollY;\n          break;\n        case 'corner-header':\n          x = this._columnSections.offsetOf(group.c1);\n          y = this._rowSections.offsetOf(group.r1);\n          break;\n      }\n\n      config.x = x;\n      config.y = y;\n      config.width = width;\n      config.height = height;\n      config.region = rgn.region;\n      config.row = group.r1;\n      config.column = group.c1;\n      config.value = value;\n      config.metadata = metadata;\n\n      // Compute the actual X bounds for the cell.\n      const x1 = Math.max(rgn.xMin, x);\n      const x2 = Math.min(x + width - 2, rgn.xMax);\n\n      // Compute the actual Y bounds for the cell.\n      const y1 = Math.max(rgn.yMin, y);\n      const y2 = Math.min(y + height - 2, rgn.yMax);\n\n      if (x2 <= x1 || y2 <= y1) {\n        continue;\n      }\n\n      // Draw the background.\n      if (backgroundColor) {\n        this._canvasGC.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n      }\n\n      // Get the renderer for the cell.\n      let renderer = this._cellRenderers.get(config);\n\n      // Clear the buffer rect for the cell.\n      gc.clearRect(config.x, config.y, width, height);\n\n      // Save the GC state.\n      gc.save();\n\n      // Paint the cell into the off-screen buffer.\n      try {\n        if (renderer instanceof AsyncCellRenderer) {\n          if (renderer.isReady(config)) {\n            renderer.paint(gc, config);\n          } else {\n            renderer.paintPlaceholder(gc, config);\n\n            const r1 = group.r1;\n            const r2 = group.r2;\n\n            const c1 = group.c1;\n            const c2 = group.c2;\n\n            renderer.load(config).then(() => {\n              this.repaintRegion(rgn.region, r1, c1, r2, c2);\n            });\n          }\n        } else {\n          renderer.paint(gc, config);\n        }\n      } catch (err) {\n        console.error(err);\n      }\n\n      // Restore the GC state.\n      gc.restore();\n\n      this._blitContent(this._buffer, x1, y1, x2 - x1 + 1, y2 - y1 + 1, x1, y1);\n    }\n\n    // Dispose of the wrapped gc.\n    gc.dispose();\n\n    // Restore the final buffer gc state.\n    this._bufferGC.restore();\n  }\n\n  /**\n   * Draw the horizontal grid lines for the given paint region.\n   */\n  private _drawHorizontalGridLines(\n    rgn: Private.PaintRegion,\n    color: string | undefined\n  ): void {\n    // Bail if there is no color to draw.\n    if (!color) {\n      return;\n    }\n\n    // Compute the X bounds for the horizontal lines.\n    const x1 = Math.max(rgn.xMin, rgn.x);\n    const x2 = Math.min(rgn.x + rgn.width, rgn.xMax + 1);\n\n    // Begin the path for the grid lines.\n    this._canvasGC.beginPath();\n\n    // Set the line width for the grid lines.\n    this._canvasGC.lineWidth = 1;\n\n    // Fetch the geometry.\n    const bh = this.bodyHeight;\n    const ph = this.pageHeight;\n\n    // Fetch the number of grid lines to be drawn.\n    let n = rgn.rowSizes.length;\n\n    // Adjust the count down if the last line shouldn't be drawn.\n    if (this._stretchLastRow && ph > bh) {\n      if (rgn.row + n === this._rowSections.count) {\n        n -= 1;\n      }\n    }\n\n    // Draw the horizontal grid lines.\n    for (let y = rgn.y, j = 0; j < n; ++j) {\n      // Fetch the size of the row.\n      let size = rgn.rowSizes[j];\n\n      // Skip zero sized rows.\n      if (size === 0) {\n        continue;\n      }\n\n      // Compute the Y position of the line.\n      let pos = y + size - 1;\n\n      // Draw the line if it's in range of the dirty rect.\n      if (pos >= rgn.yMin && pos <= rgn.yMax) {\n        this._canvasGC.moveTo(x1, pos + 0.5);\n        this._canvasGC.lineTo(x2, pos + 0.5);\n      }\n\n      // Increment the running Y coordinate.\n      y += size;\n    }\n\n    // Stroke the lines with the specified color.\n    this._canvasGC.strokeStyle = color;\n    this._canvasGC.stroke();\n  }\n\n  /**\n   * Draw the vertical grid lines for the given paint region.\n   */\n  private _drawVerticalGridLines(\n    rgn: Private.PaintRegion,\n    color: string | undefined\n  ): void {\n    // Bail if there is no color to draw.\n    if (!color) {\n      return;\n    }\n\n    // Compute the Y bounds for the vertical lines.\n    const y1 = Math.max(rgn.yMin, rgn.y);\n    const y2 = Math.min(rgn.y + rgn.height, rgn.yMax + 1);\n\n    // Begin the path for the grid lines\n    this._canvasGC.beginPath();\n\n    // Set the line width for the grid lines.\n    this._canvasGC.lineWidth = 1;\n\n    // Fetch the geometry.\n    const bw = this.bodyWidth;\n    const pw = this.pageWidth;\n\n    // Fetch the number of grid lines to be drawn.\n    let n = rgn.columnSizes.length;\n\n    // Adjust the count down if the last line shouldn't be drawn.\n    if (this._stretchLastColumn && pw > bw) {\n      if (rgn.column + n === this._columnSections.count) {\n        n -= 1;\n      }\n    }\n\n    // Draw the vertical grid lines.\n    for (let x = rgn.x, i = 0; i < n; ++i) {\n      // Fetch the size of the column.\n      let size = rgn.columnSizes[i];\n\n      // Skip zero sized columns.\n      if (size === 0) {\n        continue;\n      }\n\n      // Compute the X position of the line.\n      let pos = x + size - 1;\n\n      // Draw the line if it's in range of the dirty rect.\n      if (pos >= rgn.xMin && pos <= rgn.xMax) {\n        this._canvasGC.moveTo(pos + 0.5, y1);\n        this._canvasGC.lineTo(pos + 0.5, y2);\n      }\n\n      // Increment the running X coordinate.\n      x += size;\n    }\n\n    // Stroke the lines with the specified color.\n    this._canvasGC.strokeStyle = color;\n    this._canvasGC.stroke();\n  }\n\n  /**\n   * Draw the body selections for the data grid.\n   */\n  private _drawBodySelections(): void {\n    // Fetch the selection model.\n    let model = this._selectionModel;\n\n    // Bail early if there are no selections.\n    if (!model || model.isEmpty) {\n      return;\n    }\n\n    // Fetch the selection colors.\n    let fill = this._style.selectionFillColor;\n    let stroke = this._style.selectionBorderColor;\n\n    // Bail early if there is nothing to draw.\n    if (!fill && !stroke) {\n      return;\n    }\n\n    // Fetch the scroll geometry.\n    let sx = this._scrollX;\n    let sy = this._scrollY;\n\n    // Get the first visible cell of the grid.\n    let r1 = this._rowSections.indexOf(sy);\n    let c1 = this._columnSections.indexOf(sx);\n\n    // Bail early if there are no visible cells.\n    if (r1 < 0 || c1 < 0) {\n      return;\n    }\n\n    // Fetch the extra geometry.\n    let bw = this.bodyWidth;\n    let bh = this.bodyHeight;\n    let pw = this.pageWidth;\n    let ph = this.pageHeight;\n    let hw = this.headerWidth;\n    let hh = this.headerHeight;\n\n    // Get the last visible cell of the grid.\n    let r2 = this._rowSections.indexOf(sy + ph);\n    let c2 = this._columnSections.indexOf(sx + pw);\n\n    // Fetch the max row and column.\n    let maxRow = this._rowSections.count - 1;\n    let maxColumn = this._columnSections.count - 1;\n\n    // Clamp the last cell if the void space is visible.\n    r2 = r2 < 0 ? maxRow : r2;\n    c2 = c2 < 0 ? maxColumn : c2;\n\n    // Fetch the overlay gc.\n    let gc = this._overlayGC;\n\n    // Save the gc state.\n    gc.save();\n\n    // Set up the body clipping rect.\n    gc.beginPath();\n    gc.rect(hw, hh, pw, ph);\n    gc.clip();\n\n    // Set up the gc style.\n    if (fill) {\n      gc.fillStyle = fill;\n    }\n    if (stroke) {\n      gc.strokeStyle = stroke;\n      gc.lineWidth = 1;\n    }\n\n    // Iterate over the selections.\n    for (let s of model.selections()) {\n      // Skip the section if it's not visible.\n      if (s.r1 < r1 && s.r2 < r1) {\n        continue;\n      }\n      if (s.r1 > r2 && s.r2 > r2) {\n        continue;\n      }\n      if (s.c1 < c1 && s.c2 < c1) {\n        continue;\n      }\n      if (s.c1 > c2 && s.c2 > c2) {\n        continue;\n      }\n\n      // Clamp the cell to the model bounds.\n      let sr1 = Math.max(0, Math.min(s.r1, maxRow));\n      let sc1 = Math.max(0, Math.min(s.c1, maxColumn));\n      let sr2 = Math.max(0, Math.min(s.r2, maxRow));\n      let sc2 = Math.max(0, Math.min(s.c2, maxColumn));\n\n      // Swap index order if needed.\n      let tmp: number;\n      if (sr1 > sr2) {\n        tmp = sr1;\n        sr1 = sr2;\n        sr2 = tmp;\n      }\n      if (sc1 > sc2) {\n        tmp = sc1;\n        sc1 = sc2;\n        sc2 = tmp;\n      }\n\n      const joinedGroup = CellGroup.joinCellGroupWithMergedCellGroups(\n        this.dataModel!,\n        { r1: sr1, r2: sr2, c1: sc1, c2: sc2 },\n        'body'\n      );\n\n      sr1 = joinedGroup.r1;\n      sr2 = joinedGroup.r2;\n      sc1 = joinedGroup.c1;\n      sc2 = joinedGroup.c2;\n\n      // Convert to pixel coordinates.\n      let x1 = this._columnSections.offsetOf(sc1) - sx + hw;\n      let y1 = this._rowSections.offsetOf(sr1) - sy + hh;\n      let x2 = this._columnSections.extentOf(sc2) - sx + hw;\n      let y2 = this._rowSections.extentOf(sr2) - sy + hh;\n\n      // Adjust the trailing X coordinate for column stretch.\n      if (this._stretchLastColumn && pw > bw && sc2 === maxColumn) {\n        x2 = hw + pw - 1;\n      }\n\n      // Adjust the trailing Y coordinate for row stretch.\n      if (this._stretchLastRow && ph > bh && sr2 === maxRow) {\n        y2 = hh + ph - 1;\n      }\n\n      // Clamp the bounds to just outside of the clipping rect.\n      x1 = Math.max(hw - 1, x1);\n      y1 = Math.max(hh - 1, y1);\n      x2 = Math.min(hw + pw + 1, x2);\n      y2 = Math.min(hh + ph + 1, y2);\n\n      // Skip zero sized ranges.\n      if (x2 < x1 || y2 < y1) {\n        continue;\n      }\n\n      // Fill the rect if needed.\n      if (fill) {\n        gc.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n      }\n\n      // Stroke the rect if needed.\n      if (stroke) {\n        gc.strokeRect(x1 - 0.5, y1 - 0.5, x2 - x1 + 1, y2 - y1 + 1);\n      }\n    }\n\n    // Restore the gc state.\n    gc.restore();\n  }\n\n  /**\n   * Draw the row header selections for the data grid.\n   */\n  private _drawRowHeaderSelections(): void {\n    // Fetch the selection model.\n    let model = this._selectionModel;\n\n    // Bail early if there are no selections or if the selectionMode is the entire column.\n    if (!model || model.isEmpty || model.selectionMode == 'column') {\n      return;\n    }\n\n    // Bail early if the row headers are not visible.\n    if (this.headerWidth === 0 || this.pageHeight === 0) {\n      return;\n    }\n\n    // Fetch the selection colors.\n    let fill = this._style.headerSelectionFillColor;\n    let stroke = this._style.headerSelectionBorderColor;\n\n    // Bail early if there is nothing to draw.\n    if (!fill && !stroke) {\n      return;\n    }\n\n    // Fetch common geometry.\n    let sy = this._scrollY;\n    let bh = this.bodyHeight;\n    let ph = this.pageHeight;\n    let hw = this.headerWidth;\n    let hh = this.headerHeight;\n    let rs = this._rowSections;\n\n    // Fetch the overlay gc.\n    let gc = this._overlayGC;\n\n    // Save the gc state.\n    gc.save();\n\n    // Set up the header clipping rect.\n    gc.beginPath();\n    gc.rect(0, hh, hw, ph);\n    gc.clip();\n\n    // Set up the gc style.\n    if (fill) {\n      gc.fillStyle = fill;\n    }\n    if (stroke) {\n      gc.strokeStyle = stroke;\n      gc.lineWidth = 1;\n    }\n\n    // Fetch the max row.\n    let maxRow = rs.count - 1;\n\n    // Fetch the visible rows.\n    let r1 = rs.indexOf(sy);\n    let r2 = rs.indexOf(sy + ph - 1);\n    r2 = r2 < 0 ? maxRow : r2;\n\n    // Iterate over the visible rows.\n    for (let j = r1; j <= r2; ++j) {\n      // Skip rows which aren't selected.\n      if (!model.isRowSelected(j)) {\n        continue;\n      }\n\n      // Get the dimensions of the row.\n      let y = rs.offsetOf(j) - sy + hh;\n      let h = rs.sizeOf(j);\n\n      // Adjust the height for row stretch.\n      if (this._stretchLastRow && ph > bh && j === maxRow) {\n        h = hh + ph - y;\n      }\n\n      // Skip zero sized rows.\n      if (h === 0) {\n        continue;\n      }\n\n      // Fill the rect if needed.\n      if (fill) {\n        gc.fillRect(0, y, hw, h);\n      }\n\n      // Draw the border if needed.\n      if (stroke) {\n        gc.beginPath();\n        gc.moveTo(hw - 0.5, y - 1);\n        gc.lineTo(hw - 0.5, y + h);\n        gc.stroke();\n      }\n    }\n\n    // Restore the gc state.\n    gc.restore();\n  }\n\n  /**\n   * Draw the column header selections for the data grid.\n   */\n  private _drawColumnHeaderSelections(): void {\n    // Fetch the selection model.\n    let model = this._selectionModel;\n\n    // Bail early if there are no selections or if the selectionMode is the entire row\n    if (!model || model.isEmpty || model.selectionMode == 'row') {\n      return;\n    }\n\n    // Bail early if the column headers are not visible.\n    if (this.headerHeight === 0 || this.pageWidth === 0) {\n      return;\n    }\n\n    // Fetch the selection colors.\n    let fill = this._style.headerSelectionFillColor;\n    let stroke = this._style.headerSelectionBorderColor;\n\n    // Bail early if there is nothing to draw.\n    if (!fill && !stroke) {\n      return;\n    }\n\n    // Fetch common geometry.\n    let sx = this._scrollX;\n    let bw = this.bodyWidth;\n    let pw = this.pageWidth;\n    let hw = this.headerWidth;\n    let hh = this.headerHeight;\n    let cs = this._columnSections;\n\n    // Fetch the overlay gc.\n    let gc = this._overlayGC;\n\n    // Save the gc state.\n    gc.save();\n\n    // Set up the header clipping rect.\n    gc.beginPath();\n    gc.rect(hw, 0, pw, hh);\n    gc.clip();\n\n    // Set up the gc style.\n    if (fill) {\n      gc.fillStyle = fill;\n    }\n    if (stroke) {\n      gc.strokeStyle = stroke;\n      gc.lineWidth = 1;\n    }\n\n    // Fetch the max column.\n    let maxCol = cs.count - 1;\n\n    // Fetch the visible columns.\n    let c1 = cs.indexOf(sx);\n    let c2 = cs.indexOf(sx + pw - 1);\n    c2 = c2 < 0 ? maxCol : c2;\n\n    // Iterate over the visible columns.\n    for (let i = c1; i <= c2; ++i) {\n      // Skip columns which aren't selected.\n      if (!model.isColumnSelected(i)) {\n        continue;\n      }\n\n      // Get the dimensions of the column.\n      let x = cs.offsetOf(i) - sx + hw;\n      let w = cs.sizeOf(i);\n\n      // Adjust the width for column stretch.\n      if (this._stretchLastColumn && pw > bw && i === maxCol) {\n        w = hw + pw - x;\n      }\n\n      // Skip zero sized columns.\n      if (w === 0) {\n        continue;\n      }\n\n      // Fill the rect if needed.\n      if (fill) {\n        gc.fillRect(x, 0, w, hh);\n      }\n\n      // Draw the border if needed.\n      if (stroke) {\n        gc.beginPath();\n        gc.moveTo(x - 1, hh - 0.5);\n        gc.lineTo(x + w, hh - 0.5);\n        gc.stroke();\n      }\n    }\n\n    // Restore the gc state.\n    gc.restore();\n  }\n\n  /**\n   * Draw the overlay cursor for the data grid.\n   */\n  private _drawCursor(): void {\n    // Fetch the selection model.\n    let model = this._selectionModel;\n\n    // Bail early if there is no cursor.\n    if (!model || model.isEmpty || model.selectionMode !== 'cell') {\n      return;\n    }\n\n    // Extract the style information.\n    let fill = this._style.cursorFillColor;\n    let stroke = this._style.cursorBorderColor;\n\n    // Bail early if there is nothing to draw.\n    if (!fill && !stroke) {\n      return;\n    }\n\n    // Fetch the cursor location.\n    let startRow = model.cursorRow;\n    let startColumn = model.cursorColumn;\n\n    // Fetch the max row and column.\n    let maxRow = this._rowSections.count - 1;\n    let maxColumn = this._columnSections.count - 1;\n\n    // Bail early if the cursor is out of bounds.\n    if (startRow < 0 || startRow > maxRow) {\n      return;\n    }\n    if (startColumn < 0 || startColumn > maxColumn) {\n      return;\n    }\n\n    let endRow = startRow;\n    let endColumn = startColumn;\n\n    const joinedGroup = CellGroup.joinCellGroupWithMergedCellGroups(\n      this.dataModel!,\n      { r1: startRow, r2: endRow, c1: startColumn, c2: endColumn },\n      'body'\n    );\n\n    startRow = joinedGroup.r1;\n    endRow = joinedGroup.r2;\n    startColumn = joinedGroup.c1;\n    endColumn = joinedGroup.c2;\n\n    // Fetch geometry.\n    let sx = this._scrollX;\n    let sy = this._scrollY;\n    let bw = this.bodyWidth;\n    let bh = this.bodyHeight;\n    let pw = this.pageWidth;\n    let ph = this.pageHeight;\n    let hw = this.headerWidth;\n    let hh = this.headerHeight;\n    let vw = this._viewportWidth;\n    let vh = this._viewportHeight;\n\n    // Get the cursor bounds in viewport coordinates.\n    let x1 = this._columnSections.offsetOf(startColumn) - sx + hw;\n    let x2 = this._columnSections.extentOf(endColumn) - sx + hw;\n    let y1 = this._rowSections.offsetOf(startRow) - sy + hh;\n    let y2 = this._rowSections.extentOf(endRow) - sy + hh;\n\n    // Adjust the trailing X coordinate for column stretch.\n    if (this._stretchLastColumn && pw > bw && startColumn === maxColumn) {\n      x2 = vw - 1;\n    }\n\n    // Adjust the trailing Y coordinate for row stretch.\n    if (this._stretchLastRow && ph > bh && startRow === maxRow) {\n      y2 = vh - 1;\n    }\n\n    // Skip zero sized cursors.\n    if (x2 < x1 || y2 < y1) {\n      return;\n    }\n\n    // Bail early if the cursor is off the screen.\n    if (x1 - 1 >= vw || y1 - 1 >= vh || x2 + 1 < hw || y2 + 1 < hh) {\n      return;\n    }\n\n    // Fetch the overlay gc.\n    let gc = this._overlayGC;\n\n    // Save the gc state.\n    gc.save();\n\n    // Set up the body clipping rect.\n    gc.beginPath();\n    gc.rect(hw, hh, pw, ph);\n    gc.clip();\n\n    // Clear any existing overlay content.\n    gc.clearRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n\n    // Fill the cursor rect if needed.\n    if (fill) {\n      // Set up the fill style.\n      gc.fillStyle = fill;\n\n      // Fill the cursor rect.\n      gc.fillRect(x1, y1, x2 - x1 + 1, y2 - y1 + 1);\n    }\n\n    // Stroke the cursor border if needed.\n    if (stroke) {\n      // Set up the stroke style.\n      gc.strokeStyle = stroke;\n      gc.lineWidth = 2;\n\n      // Stroke the cursor rect.\n      gc.strokeRect(x1, y1, x2 - x1, y2 - y1);\n    }\n\n    // Restore the gc state.\n    gc.restore();\n  }\n\n  /**\n   * Draw the overlay shadows for the data grid.\n   */\n  private _drawShadows(): void {\n    // Fetch the scroll shadow from the style.\n    let shadow = this._style.scrollShadow;\n\n    // Bail early if there is no shadow to draw.\n    if (!shadow) {\n      return;\n    }\n\n    // Fetch the scroll position.\n    let sx = this._scrollX;\n    let sy = this._scrollY;\n\n    // Fetch maximum scroll position.\n    let sxMax = this.maxScrollX;\n    let syMax = this.maxScrollY;\n\n    // Fetch the header width and height.\n    let hw = this.headerWidth;\n    let hh = this.headerHeight;\n\n    // Fetch the page width and height.\n    let pw = this.pageWidth;\n    let ph = this.pageHeight;\n\n    // Fetch the viewport width and height.\n    let vw = this._viewportWidth;\n    let vh = this._viewportHeight;\n\n    // Fetch the body width and height.\n    let bw = this.bodyWidth;\n    let bh = this.bodyHeight;\n\n    // Adjust the body size for row and column stretch.\n    if (this._stretchLastRow && ph > bh) {\n      bh = ph;\n    }\n    if (this._stretchLastColumn && pw > bw) {\n      bw = pw;\n    }\n\n    // Fetch the gc object.\n    let gc = this._overlayGC;\n\n    // Save the gc state.\n    gc.save();\n\n    // Draw the column header shadow if needed.\n    if (sy > 0) {\n      // Set up the gradient coordinates.\n      let x0 = 0;\n      let y0 = hh;\n      let x1 = 0;\n      let y1 = y0 + shadow.size;\n\n      // Create the gradient object.\n      let grad = gc.createLinearGradient(x0, y0, x1, y1);\n\n      // Set the gradient stops.\n      grad.addColorStop(0, shadow.color1);\n      grad.addColorStop(0.5, shadow.color2);\n      grad.addColorStop(1, shadow.color3);\n\n      // Set up the rect coordinates.\n      let x = 0;\n      let y = hh;\n      let w = hw + Math.min(pw, bw - sx);\n      let h = shadow.size;\n\n      // Fill the shadow rect with the fill style.\n      gc.fillStyle = grad;\n      gc.fillRect(x, y, w, h);\n    }\n\n    // Draw the row header shadow if needed.\n    if (sx > 0) {\n      // Set up the gradient coordinates.\n      let x0 = hw;\n      let y0 = 0;\n      let x1 = x0 + shadow.size;\n      let y1 = 0;\n\n      // Create the gradient object.\n      let grad = gc.createLinearGradient(x0, y0, x1, y1);\n\n      // Set the gradient stops.\n      grad.addColorStop(0, shadow.color1);\n      grad.addColorStop(0.5, shadow.color2);\n      grad.addColorStop(1, shadow.color3);\n\n      // Set up the rect coordinates.\n      let x = hw;\n      let y = 0;\n      let w = shadow.size;\n      let h = hh + Math.min(ph, bh - sy);\n\n      // Fill the shadow rect with the fill style.\n      gc.fillStyle = grad;\n      gc.fillRect(x, y, w, h);\n    }\n\n    // Draw the column footer shadow if needed.\n    if (sy < syMax) {\n      // Set up the gradient coordinates.\n      let x0 = 0;\n      let y0 = vh;\n      let x1 = 0;\n      let y1 = vh - shadow.size;\n\n      // Create the gradient object.\n      let grad = gc.createLinearGradient(x0, y0, x1, y1);\n\n      // Set the gradient stops.\n      grad.addColorStop(0, shadow.color1);\n      grad.addColorStop(0.5, shadow.color2);\n      grad.addColorStop(1, shadow.color3);\n\n      // Set up the rect coordinates.\n      let x = 0;\n      let y = vh - shadow.size;\n      let w = hw + Math.min(pw, bw - sx);\n      let h = shadow.size;\n\n      // Fill the shadow rect with the fill style.\n      gc.fillStyle = grad;\n      gc.fillRect(x, y, w, h);\n    }\n\n    // Draw the row footer shadow if needed.\n    if (sx < sxMax) {\n      // Set up the gradient coordinates.\n      let x0 = vw;\n      let y0 = 0;\n      let x1 = vw - shadow.size;\n      let y1 = 0;\n\n      // Create the gradient object.\n      let grad = gc.createLinearGradient(x0, y0, x1, y1);\n\n      // Set the gradient stops.\n      grad.addColorStop(0, shadow.color1);\n      grad.addColorStop(0.5, shadow.color2);\n      grad.addColorStop(1, shadow.color3);\n\n      // Set up the rect coordinates.\n      let x = vw - shadow.size;\n      let y = 0;\n      let w = shadow.size;\n      let h = hh + Math.min(ph, bh - sy);\n\n      // Fill the shadow rect with the fill style.\n      gc.fillStyle = grad;\n      gc.fillRect(x, y, w, h);\n    }\n\n    // Restore the gc state.\n    gc.restore();\n  }\n\n  private _viewport: Widget;\n  private _vScrollBar: ScrollBar;\n  private _hScrollBar: ScrollBar;\n  private _scrollCorner: Widget;\n\n  private _scrollX = 0;\n  private _scrollY = 0;\n  private _viewportWidth = 0;\n  private _viewportHeight = 0;\n\n  private _mousedown = false;\n  private _keyHandler: DataGrid.IKeyHandler | null = null;\n  private _mouseHandler: DataGrid.IMouseHandler | null = null;\n\n  private _vScrollBarMinWidth = 0;\n  private _hScrollBarMinHeight = 0;\n  private _dpiRatio = Math.ceil(window.devicePixelRatio);\n\n  private _canvas: HTMLCanvasElement;\n  private _buffer: HTMLCanvasElement;\n  private _overlay: HTMLCanvasElement;\n  private _canvasGC: CanvasRenderingContext2D;\n  private _bufferGC: CanvasRenderingContext2D;\n  private _overlayGC: CanvasRenderingContext2D;\n\n  private _rowSections: SectionList;\n  private _columnSections: SectionList;\n  private _rowHeaderSections: SectionList;\n  private _columnHeaderSections: SectionList;\n\n  private _dataModel: DataModel | null = null;\n  private _selectionModel: SelectionModel | null = null;\n\n  private _stretchLastRow: boolean;\n  private _stretchLastColumn: boolean;\n\n  private _style: DataGrid.Style;\n  private _cellRenderers: RendererMap;\n  private _copyConfig: DataGrid.CopyConfig;\n  private _headerVisibility: DataGrid.HeaderVisibility;\n  private _editorController: ICellEditorController | null;\n  private _editingEnabled: boolean = false;\n}\n\n/**\n * The namespace for the `DataGrid` class statics.\n */\nexport namespace DataGrid {\n  /**\n   * An object which defines the style for a data grid.\n   *\n   * #### Notes\n   * All style colors support the full CSS color syntax.\n   */\n  export type Style = {\n    /**\n     * The void color for the data grid.\n     *\n     * This is the base fill color for the entire data grid.\n     */\n    readonly voidColor?: string;\n\n    /**\n     * The background color for the body cells.\n     *\n     * This color is layered on top of the `voidColor`.\n     */\n    readonly backgroundColor?: string;\n\n    /**\n     * A function which returns the background color for a row.\n     *\n     * This color is layered on top of the `backgroundColor` and can\n     * be used to implement \"zebra striping\" of the grid rows.\n     */\n    readonly rowBackgroundColor?: (index: number) => string;\n\n    /**\n     * A function which returns the background color for a column.\n     *\n     * This color is layered on top of the `backgroundColor` and can\n     * be used to implement \"zebra striping\" of the grid columns.\n     */\n    readonly columnBackgroundColor?: (index: number) => string;\n\n    /**\n     * The color for the grid lines of the body cells.\n     *\n     * The grid lines are draw on top of the cell contents.\n     */\n    readonly gridLineColor?: string;\n\n    /**\n     * The color for the vertical grid lines of the body cells.\n     *\n     * This overrides the `gridLineColor` option.\n     */\n    readonly verticalGridLineColor?: string;\n\n    /**\n     * The color for the horizontal grid lines of the body cells.\n     *\n     * This overrides the `gridLineColor` option.\n     */\n    readonly horizontalGridLineColor?: string;\n\n    /**\n     * The background color for the header cells.\n     *\n     * This color is layered on top of the `voidColor`.\n     */\n    readonly headerBackgroundColor?: string;\n\n    /**\n     * The color for the grid lines of the header cells.\n     *\n     * The grid lines are draw on top of the cell contents.\n     */\n    readonly headerGridLineColor?: string;\n\n    /**\n     * The color for the vertical grid lines of the header cells.\n     *\n     * This overrides the `headerGridLineColor` option.\n     */\n    readonly headerVerticalGridLineColor?: string;\n\n    /**\n     * The color for the horizontal grid lines of the header cells.\n     *\n     * This overrides the `headerGridLineColor` option.\n     */\n    readonly headerHorizontalGridLineColor?: string;\n\n    /**\n     * The fill color for a selection.\n     */\n    readonly selectionFillColor?: string;\n\n    /**\n     * The border color for a selection.\n     */\n    readonly selectionBorderColor?: string;\n\n    /**\n     * The fill color for the cursor.\n     */\n    readonly cursorFillColor?: string;\n\n    /**\n     * The border color for the cursor.\n     */\n    readonly cursorBorderColor?: string;\n\n    /**\n     * The fill color for a header selection.\n     */\n    readonly headerSelectionFillColor?: string;\n\n    /**\n     * The border color for a header selection.\n     */\n    readonly headerSelectionBorderColor?: string;\n\n    /**\n     * The drop shadow effect when the grid is scrolled.\n     */\n    readonly scrollShadow?: {\n      /**\n       * The size of the shadow, in pixels.\n       */\n      readonly size: number;\n\n      /**\n       * The first color stop for the shadow.\n       */\n      readonly color1: string;\n\n      /**\n       * The second color stop for the shadow.\n       */\n      readonly color2: string;\n\n      /**\n       * The third color stop for the shadow.\n       */\n      readonly color3: string;\n    };\n  };\n\n  /**\n   * An object which defines the default sizes for a data grid.\n   */\n  export type DefaultSizes = {\n    /**\n     * The default height of a row.\n     */\n    readonly rowHeight: number;\n\n    /**\n     * The default width of a column.\n     */\n    readonly columnWidth: number;\n\n    /**\n     * The default width of a row header.\n     */\n    readonly rowHeaderWidth: number;\n\n    /**\n     * The default height of a column header.\n     */\n    readonly columnHeaderHeight: number;\n  };\n\n  /**\n   * An object which defines the minimum sizes for a data grid.\n   */\n  export type MinimumSizes = {\n    /**\n     * The minimum height of a row.\n     */\n    readonly rowHeight: number;\n\n    /**\n     * The minimum width of a column.\n     */\n    readonly columnWidth: number;\n\n    /**\n     * The minimum width of a row header.\n     */\n    readonly rowHeaderWidth: number;\n\n    /**\n     * The minimum height of a column header.\n     */\n    readonly columnHeaderHeight: number;\n  };\n\n  /**\n   * A type alias for the supported header visibility modes.\n   */\n  export type HeaderVisibility = 'all' | 'row' | 'column' | 'none';\n\n  /**\n   * A type alias for the supported column auto resize modes.\n   */\n  export type ColumnFitType = 'all' | 'row-header' | 'body';\n\n  /**\n   * A type alias for the arguments to a copy format function.\n   */\n  export type CopyFormatArgs = {\n    /**\n     * The cell region for the value.\n     */\n    region: DataModel.CellRegion;\n\n    /**\n     * The row index of the value.\n     */\n    row: number;\n\n    /**\n     * The column index of the value.\n     */\n    column: number;\n\n    /**\n     * The value for the cell.\n     */\n    value: any;\n\n    /**\n     * The metadata for the cell.\n     */\n    metadata: DataModel.Metadata;\n  };\n\n  /**\n   * A type alias for a copy format function.\n   */\n  export type CopyFormatFunc = (args: CopyFormatArgs) => string;\n\n  /**\n   * A type alias for the data grid copy config.\n   */\n  export type CopyConfig = {\n    /**\n     * The separator to use between values.\n     */\n    readonly separator: string;\n\n    /**\n     * The headers to included in the copied output.\n     */\n    readonly headers: 'none' | 'row' | 'column' | 'all';\n\n    /**\n     * The function for formatting the data values.\n     */\n    readonly format: CopyFormatFunc;\n\n    /**\n     * The cell count threshold for a copy to be considered \"large\".\n     */\n    readonly warningThreshold: number;\n  };\n\n  /**\n   * An options object for initializing a data grid.\n   */\n  export interface IOptions {\n    /**\n     * The style for the data grid.\n     *\n     * The default is `DataGrid.defaultStyle`.\n     */\n    style?: Style;\n\n    /**\n     * The default sizes for the data grid.\n     *\n     * The default is `DataGrid.defaultSizes`.\n     */\n    defaultSizes?: DefaultSizes;\n\n    /**\n     * The minimum sizes for the data grid.\n     *\n     * The default is `DataGrid.minimumSizes`.\n     */\n    minimumSizes?: MinimumSizes;\n\n    /**\n     * The header visibility for the data grid.\n     *\n     * The default is `'all'`.\n     */\n    headerVisibility?: HeaderVisibility;\n\n    /**\n     * The cell renderer map for the data grid.\n     *\n     * The default is an empty renderer map.\n     */\n    cellRenderers?: RendererMap;\n\n    /**\n     * The default cell renderer for the data grid.\n     *\n     * The default is a new `TextRenderer`.\n     */\n    defaultRenderer?: CellRenderer;\n\n    /**\n     * The copy configuration data for the grid.\n     *\n     * The default is `DataGrid.defaultCopyConfig`.\n     */\n    copyConfig?: CopyConfig;\n\n    /**\n     * Whether to stretch the last row of the grid.\n     *\n     * The default is `false`.\n     */\n    stretchLastRow?: boolean;\n\n    /**\n     * Whether to stretch the last column of the grid.\n     *\n     * The default is `false`.\n     */\n    stretchLastColumn?: boolean;\n  }\n\n  /**\n   * An object which handles keydown events for the data grid.\n   */\n  export interface IKeyHandler extends IDisposable {\n    /**\n     * Handle the key down event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The keydown event of interest.\n     *\n     * #### Notes\n     * This will not be called if the mouse button is pressed.\n     */\n    onKeyDown(grid: DataGrid, event: KeyboardEvent): void;\n  }\n\n  /**\n   * An object which handles mouse events for the data grid.\n   */\n  export interface IMouseHandler extends IDisposable {\n    /**\n     * Release any resources acquired during a mouse press.\n     *\n     * #### Notes\n     * This method is called when the mouse should be released\n     * independent of a mouseup event, such as an early detach.\n     */\n    release(): void;\n\n    /**\n     * Handle the mouse hover event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse hover event of interest.\n     */\n    onMouseHover(grid: DataGrid, event: MouseEvent): void;\n\n    /**\n     * Handle the mouse leave event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse hover event of interest.\n     */\n    onMouseLeave(grid: DataGrid, event: MouseEvent): void;\n\n    /**\n     * Handle the mouse down event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse down event of interest.\n     */\n    onMouseDown(grid: DataGrid, event: MouseEvent): void;\n\n    /**\n     * Handle the mouse move event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse move event of interest.\n     */\n    onMouseMove(grid: DataGrid, event: MouseEvent): void;\n\n    /**\n     * Handle the mouse up event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse up event of interest.\n     */\n    onMouseUp(grid: DataGrid, event: MouseEvent): void;\n\n    /**\n     * Handle the mouse double click event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The mouse double click event of interest.\n     */\n    onMouseDoubleClick(grid: DataGrid, event: MouseEvent): void;\n\n    /**\n     * Handle the context menu event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The context menu event of interest.\n     */\n    onContextMenu(grid: DataGrid, event: MouseEvent): void;\n\n    /**\n     * Handle the wheel event for the data grid.\n     *\n     * @param grid - The data grid of interest.\n     *\n     * @param event - The wheel event of interest.\n     */\n    onWheel(grid: DataGrid, event: WheelEvent): void;\n  }\n\n  /**\n   * An object which holds the result of a grid hit test.\n   */\n  export type HitTestResult = {\n    /**\n     * The region of the data grid that was hit.\n     */\n    readonly region: DataModel.CellRegion | 'void';\n\n    /**\n     * The row index of the cell that was hit.\n     *\n     * This is `-1` for the `void` region.\n     */\n    readonly row: number;\n\n    /**\n     * The column index of the cell that was hit.\n     *\n     * This is `-1` for the `void` region.\n     */\n    readonly column: number;\n\n    /**\n     * The X coordinate of the mouse in cell coordinates.\n     *\n     * This is `-1` for the `void` region.\n     */\n    readonly x: number;\n\n    /**\n     * The Y coordinate of the mouse in cell coordinates.\n     *\n     * This is `-1` for the `void` region.\n     */\n    readonly y: number;\n\n    /**\n     * The width of the cell.\n     *\n     * This is `-1` for the `void` region.\n     */\n    readonly width: number;\n\n    /**\n     * The height of the cell.\n     *\n     * This is `-1` for the `void` region.\n     */\n    readonly height: number;\n  };\n\n  /**\n   * A generic format function for the copy handler.\n   *\n   * @param args - The format args for the function.\n   *\n   * @returns The string representation of the value.\n   *\n   * #### Notes\n   * This function uses `String()` to coerce a value to a string.\n   */\n  export function copyFormatGeneric(args: CopyFormatArgs): string {\n    if (args.value === null || args.value === undefined) {\n      return '';\n    }\n    return String(args.value);\n  }\n\n  /**\n   * The default theme for a data grid.\n   */\n  export const defaultStyle: Style = {\n    voidColor: '#F3F3F3',\n    backgroundColor: '#FFFFFF',\n    gridLineColor: 'rgba(20, 20, 20, 0.15)',\n    headerBackgroundColor: '#F3F3F3',\n    headerGridLineColor: 'rgba(20, 20, 20, 0.25)',\n    selectionFillColor: 'rgba(49, 119, 229, 0.2)',\n    selectionBorderColor: 'rgba(0, 107, 247, 1.0)',\n    cursorBorderColor: 'rgba(0, 107, 247, 1.0)',\n    headerSelectionFillColor: 'rgba(20, 20, 20, 0.1)',\n    headerSelectionBorderColor: 'rgba(0, 107, 247, 1.0)',\n    scrollShadow: {\n      size: 10,\n      color1: 'rgba(0, 0, 0, 0.20)',\n      color2: 'rgba(0, 0, 0, 0.05)',\n      color3: 'rgba(0, 0, 0, 0.00)'\n    }\n  };\n\n  /**\n   * The default sizes for a data grid.\n   */\n  export const defaultSizes: DefaultSizes = {\n    rowHeight: 20,\n    columnWidth: 64,\n    rowHeaderWidth: 64,\n    columnHeaderHeight: 20\n  };\n\n  /**\n   * The default minimum sizes for a data grid.\n   */\n  export const minimumSizes: MinimumSizes = {\n    rowHeight: 20,\n    columnWidth: 10,\n    rowHeaderWidth: 10,\n    columnHeaderHeight: 20\n  };\n\n  /**\n   * The default copy config for a data grid.\n   */\n  export const defaultCopyConfig: CopyConfig = {\n    separator: '\\t',\n    format: copyFormatGeneric,\n    headers: 'none',\n    warningThreshold: 1e6\n  };\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A singleton `scroll-request` conflatable message.\n   */\n  export const ScrollRequest = new ConflatableMessage('scroll-request');\n\n  /**\n   * A singleton `overlay-paint-request` conflatable message.\n   */\n  export const OverlayPaintRequest = new ConflatableMessage(\n    'overlay-paint-request'\n  );\n\n  /**\n   * Create a new zero-sized canvas element.\n   */\n  export function createCanvas(): HTMLCanvasElement {\n    let canvas = document.createElement('canvas');\n    canvas.width = 0;\n    canvas.height = 0;\n    return canvas;\n  }\n\n  /**\n   * Checks whether a given regions has merged cells in it.\n   * @param dataModel grid's data model.\n   * @param region the paint region to be checked.\n   * @returns boolean.\n   */\n  export function regionHasMergedCells(\n    dataModel: DataModel,\n    region: DataModel.CellRegion\n  ): boolean {\n    const regionGroups = CellGroup.getCellGroupsAtRegion(dataModel!, region);\n    return regionGroups.length > 0;\n  }\n\n  /**\n   * An object which represents a canvas region in pixels.\n   */\n  export type PixelRegion = {\n    /**\n     * The min X coordinate the of the dirty viewport rect.\n     *\n     * #### Notes\n     * The data grid must not draw outside of this boundary.\n     */\n    xMin: number;\n\n    /**\n     * The min Y coordinate the of the dirty viewport rect.\n     *\n     * #### Notes\n     * The data grid must not draw outside of this boundary.\n     */\n    yMin: number;\n\n    /**\n     * The max X coordinate the of the dirty viewport rect.\n     *\n     * #### Notes\n     * The data grid must not draw outside of this boundary.\n     */\n    xMax: number;\n\n    /**\n     * The max Y coordinate the of the dirty viewport rect.\n     *\n     * #### Notes\n     * The data grid must not draw outside of this boundary.\n     */\n    yMax: number;\n\n    /**\n     * The cell region.\n     */\n    region: DataModel.CellRegion;\n  };\n\n  /**\n   * An object which represents a region to be painted.\n   */\n  export type PaintRegion = PixelRegion & {\n    /**\n     * The X coordinate the of the region, in viewport coordinates.\n     *\n     * #### Notes\n     * This is aligned to the first cell boundary.\n     */\n    x: number;\n\n    /**\n     * The Y coordinate the of the region, in viewport coordinates.\n     *\n     * #### Notes\n     * This is aligned to the first cell boundary.\n     */\n    y: number;\n\n    /**\n     * The total width of the region.\n     *\n     * #### Notes\n     * This is aligned to the cell boundaries.\n     */\n    width: number;\n\n    /**\n     * The total height of the region.\n     *\n     * #### Notes\n     * This is aligned to the cell boundaries.\n     */\n    height: number;\n\n    /**\n     * The row index of the first cell in the region.\n     */\n    row: number;\n\n    /**\n     * The column index of the first cell in the region.\n     */\n    column: number;\n\n    /**\n     * The row sizes for the rows in the region.\n     */\n    rowSizes: number[];\n\n    /**\n     * The column sizes for the columns in the region.\n     */\n    columnSizes: number[];\n  };\n\n  /**\n   * A conflatable message which merges dirty paint regions.\n   */\n  export class PaintRequest extends ConflatableMessage {\n    /**\n     * Construct a new paint request messages.\n     *\n     * @param region - The cell region for the paint.\n     *\n     * @param r1 - The top-left row of the dirty region.\n     *\n     * @param c1 - The top-left column of the dirty region.\n     *\n     * @param r2 - The bottom-right row of the dirty region.\n     *\n     * @param c2 - The bottom-right column of the dirty region.\n     */\n    constructor(\n      region: DataModel.CellRegion | 'all',\n      r1: number,\n      c1: number,\n      r2: number,\n      c2: number\n    ) {\n      super('paint-request');\n      this._region = region;\n      this._r1 = r1;\n      this._c1 = c1;\n      this._r2 = r2;\n      this._c2 = c2;\n    }\n\n    /**\n     * The cell region for the paint.\n     */\n    get region(): DataModel.CellRegion | 'all' {\n      return this._region;\n    }\n\n    /**\n     * The top-left row of the dirty region.\n     */\n    get r1(): number {\n      return this._r1;\n    }\n\n    /**\n     * The top-left column of the dirty region.\n     */\n    get c1(): number {\n      return this._c1;\n    }\n\n    /**\n     * The bottom-right row of the dirty region.\n     */\n    get r2(): number {\n      return this._r2;\n    }\n\n    /**\n     * The bottom-right column of the dirty region.\n     */\n    get c2(): number {\n      return this._c2;\n    }\n\n    /**\n     * Conflate this message with another paint request.\n     */\n    conflate(other: PaintRequest): boolean {\n      // Bail early if the request is already painting everything.\n      if (this._region === 'all') {\n        return true;\n      }\n\n      // Any region can conflate with the `'all'` region.\n      if (other._region === 'all') {\n        this._region = 'all';\n        return true;\n      }\n\n      // Otherwise, do not conflate with a different region.\n      if (this._region !== other._region) {\n        return false;\n      }\n\n      // Conflate the region to the total boundary.\n      this._r1 = Math.min(this._r1, other._r1);\n      this._c1 = Math.min(this._c1, other._c1);\n      this._r2 = Math.max(this._r2, other._r2);\n      this._c2 = Math.max(this._c2, other._c2);\n      return true;\n    }\n\n    private _region: DataModel.CellRegion | 'all';\n    private _r1: number;\n    private _c1: number;\n    private _r2: number;\n    private _c2: number;\n  }\n\n  /**\n   * A conflatable message for resizing rows.\n   */\n  export class RowResizeRequest extends ConflatableMessage {\n    /**\n     * Construct a new row resize request.\n     *\n     * @param region - The row region which holds the section.\n     *\n     * @param index - The index of row in the region.\n     *\n     * @param size - The target size of the section.\n     */\n    constructor(region: DataModel.RowRegion, index: number, size: number) {\n      super('row-resize-request');\n      this._region = region;\n      this._index = index;\n      this._size = size;\n    }\n\n    /**\n     * The row region which holds the section.\n     */\n    get region(): DataModel.RowRegion {\n      return this._region;\n    }\n\n    /**\n     * The index of the row in the region.\n     */\n    get index(): number {\n      return this._index;\n    }\n\n    /**\n     * The target size of the section.\n     */\n    get size(): number {\n      return this._size;\n    }\n\n    /**\n     * Conflate this message with another row resize request.\n     */\n    conflate(other: RowResizeRequest): boolean {\n      if (this._region !== other._region || this._index !== other._index) {\n        return false;\n      }\n      this._size = other._size;\n      return true;\n    }\n\n    private _region: DataModel.RowRegion;\n    private _index: number;\n    private _size: number;\n  }\n\n  /**\n   * A conflatable message for resizing columns.\n   */\n  export class ColumnResizeRequest extends ConflatableMessage {\n    /**\n     * Construct a new column resize request.\n     *\n     * @param region - The column region which holds the section.\n     *\n     * @param index - The index of column in the region.\n     *\n     * @param size - The target size of the section.\n     *               If null, then infer the size to fit.\n     */\n    constructor(\n      region: DataModel.ColumnRegion,\n      index: number,\n      size: number | null\n    ) {\n      super('column-resize-request');\n      this._region = region;\n      this._index = index;\n      this._size = size;\n    }\n\n    /**\n     * The column region which holds the section.\n     */\n    get region(): DataModel.ColumnRegion {\n      return this._region;\n    }\n\n    /**\n     * The index of the column in the region.\n     */\n    get index(): number {\n      return this._index;\n    }\n\n    /**\n     * The target size of the section.\n     */\n    get size(): number | null {\n      return this._size;\n    }\n\n    /**\n     * Conflate this message with another column resize request.\n     */\n    conflate(other: ColumnResizeRequest): boolean {\n      if (this._region !== other._region || this._index !== other._index) {\n        return false;\n      }\n      this._size = other._size;\n      return true;\n    }\n\n    private _region: DataModel.ColumnRegion;\n    private _index: number;\n    private _size: number | null;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2019, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { ReadonlyJSONObject } from '@lumino/coreutils';\n\nimport { DataModel } from './datamodel';\n\n/**\n * A data model implementation for in-memory JSON data.\n */\nexport class JSONModel extends DataModel {\n  /**\n   * Create a data model with static JSON data.\n   *\n   * @param options - The options for initializing the data model.\n   */\n  constructor(options: JSONModel.IOptions) {\n    super();\n    let split = Private.splitFields(options.schema);\n    this._data = options.data;\n    this._bodyFields = split.bodyFields;\n    this._headerFields = split.headerFields;\n    this._missingValues = Private.createMissingMap(options.schema);\n  }\n\n  /**\n   * Get the row count for a region in the data model.\n   *\n   * @param region - The row region of interest.\n   *\n   * @returns - The row count for the region.\n   */\n  rowCount(region: DataModel.RowRegion): number {\n    if (region === 'body') {\n      return this._data.length;\n    }\n    return 1; // TODO multiple column-header rows?\n  }\n\n  /**\n   * Get the column count for a region in the data model.\n   *\n   * @param region - The column region of interest.\n   *\n   * @returns - The column count for the region.\n   */\n  columnCount(region: DataModel.ColumnRegion): number {\n    if (region === 'body') {\n      return this._bodyFields.length;\n    }\n    return this._headerFields.length;\n  }\n\n  /**\n   * Get the data value for a cell in the data model.\n   *\n   * @param region - The cell region of interest.\n   *\n   * @param row - The row index of the cell of interest.\n   *\n   * @param column - The column index of the cell of interest.\n   *\n   * @returns - The data value for the specified cell.\n   *\n   * #### Notes\n   * A `missingValue` as defined by the schema is converted to `null`.\n   */\n  data(region: DataModel.CellRegion, row: number, column: number): any {\n    // Set up the field and value variables.\n    let field: JSONModel.Field;\n    let value: any;\n\n    // Look up the field and value for the region.\n    switch (region) {\n      case 'body':\n        field = this._bodyFields[column];\n        value = this._data[row][field.name];\n        break;\n      case 'column-header':\n        field = this._bodyFields[column];\n        value = field.title || field.name;\n        break;\n      case 'row-header':\n        field = this._headerFields[column];\n        value = this._data[row][field.name];\n        break;\n      case 'corner-header':\n        field = this._headerFields[column];\n        value = field.title || field.name;\n        break;\n      default:\n        throw 'unreachable';\n    }\n\n    // Test whether the value is a missing value.\n    let missing =\n      this._missingValues !== null &&\n      typeof value === 'string' &&\n      this._missingValues[value] === true;\n\n    // Return the final value.\n    return missing ? null : value;\n  }\n\n  /**\n   * Get the metadata for a cell in the data model.\n   *\n   * @param region - The cell region of interest.\n   *\n   * @param row - The row index of the cell of of interest.\n   *\n   * @param column - The column index of the cell of interest.\n   *\n   * @returns The metadata for the cell.\n   */\n  metadata(\n    region: DataModel.CellRegion,\n    row: number,\n    column: number\n  ): DataModel.Metadata {\n    if (region === 'body' || region === 'column-header') {\n      return this._bodyFields[column];\n    }\n    return this._headerFields[column];\n  }\n\n  private _data: JSONModel.DataSource;\n  private _bodyFields: JSONModel.Field[];\n  private _headerFields: JSONModel.Field[];\n  private _missingValues: Private.MissingValuesMap | null;\n}\n\n/**\n * The namespace for the `JSONModel` class statics.\n */\nexport namespace JSONModel {\n  /**\n   * An object which describes a column of data in the model.\n   *\n   * #### Notes\n   * This is based on the JSON Table Schema specification:\n   * https://specs.frictionlessdata.io/table-schema/\n   */\n  export type Field = {\n    /**\n     * The name of the column.\n     *\n     * This is used as the key to extract a value from a data record.\n     * It is also used as the column header label, unless the `title`\n     * property is provided.\n     */\n    readonly name: string;\n\n    /**\n     * The type of data held in the column.\n     */\n    readonly type?: string;\n\n    /**\n     * The format of the data in the column.\n     */\n    readonly format?: string;\n\n    /**\n     * The human readable name for the column.\n     *\n     * This is used as the label for the column header.\n     */\n    readonly title?: string;\n\n    // TODO want/need support for any these?\n    // description?: string;\n    // constraints?: IConstraints;\n    // rdfType?: string;\n  };\n\n  /**\n   * An object when specifies the schema for a data model.\n   *\n   * #### Notes\n   * This is based on the JSON Table Schema specification:\n   * https://specs.frictionlessdata.io/table-schema/\n   */\n  export type Schema = {\n    /**\n     * The fields which describe the data model columns.\n     *\n     * Primary key fields are rendered as row header columns.\n     */\n    readonly fields: Field[];\n\n    /**\n     * The values to treat as \"missing\" data.\n     *\n     * Missing values are automatically converted to `null`.\n     */\n    readonly missingValues?: string[];\n\n    /**\n     * The field names which act as primary keys.\n     *\n     * Primary key fields are rendered as row header columns.\n     */\n    readonly primaryKey?: string | string[];\n\n    // TODO want/need support for this?\n    // foreignKeys?: IForeignKey[];\n  };\n\n  /**\n   * A type alias for a data source for a JSON data model.\n   *\n   * A data source is an array of JSON object records which represent\n   * the rows of the table. The keys of the records correspond to the\n   * field names of the columns.\n   */\n  export type DataSource = ReadonlyArray<ReadonlyJSONObject>;\n\n  /**\n   * An options object for initializing a JSON data model.\n   */\n  export interface IOptions {\n    /**\n     * The schema for the for the data model.\n     *\n     * The schema should be treated as an immutable object.\n     */\n    schema: Schema;\n\n    /**\n     * The data source for the data model.\n     *\n     * The data model takes full ownership of the data source.\n     */\n    data: DataSource;\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * An object which holds the results of splitting schema fields.\n   */\n  export type SplitFieldsResult = {\n    /**\n     * The non-primary key fields to use for the grid body.\n     */\n    bodyFields: JSONModel.Field[];\n\n    /**\n     * The primary key fields to use for the grid headers.\n     */\n    headerFields: JSONModel.Field[];\n  };\n\n  /**\n   * Split the schema fields into header and body fields.\n   */\n  export function splitFields(schema: JSONModel.Schema): SplitFieldsResult {\n    // Normalize the primary keys.\n    let primaryKeys: string[];\n    if (schema.primaryKey === undefined) {\n      primaryKeys = [];\n    } else if (typeof schema.primaryKey === 'string') {\n      primaryKeys = [schema.primaryKey];\n    } else {\n      primaryKeys = schema.primaryKey;\n    }\n\n    // Separate the fields for the body and header.\n    let bodyFields: JSONModel.Field[] = [];\n    let headerFields: JSONModel.Field[] = [];\n    for (let field of schema.fields) {\n      if (primaryKeys.indexOf(field.name) === -1) {\n        bodyFields.push(field);\n      } else {\n        headerFields.push(field);\n      }\n    }\n\n    // Return the separated fields.\n    return { bodyFields, headerFields };\n  }\n\n  /**\n   * A type alias for a missing value map.\n   */\n  export type MissingValuesMap = { [key: string]: boolean };\n\n  /**\n   * Create a missing values map for a schema.\n   *\n   * This returns `null` if there are no missing values.\n   */\n  export function createMissingMap(\n    schema: JSONModel.Schema\n  ): MissingValuesMap | null {\n    // Bail early if there are no missing values.\n    if (!schema.missingValues || schema.missingValues.length === 0) {\n      return null;\n    }\n\n    // Collect the missing values into a map.\n    let result: MissingValuesMap = Object.create(null);\n    for (let value of schema.missingValues) {\n      result[value] = true;\n    }\n\n    // Return the populated map.\n    return result;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2023, Lumino Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { AsyncCellRenderer } from './asynccellrenderer';\nimport { CellRenderer } from './cellrenderer';\n\nimport { GraphicsContext } from './graphicscontext';\n\nconst PERCENTAGE_REGEX = /^(\\d+(\\.\\d+)?)%$/;\nconst PIXEL_REGEX = /^(\\d+(\\.\\d+)?)px$/;\n\n/**\n * A cell renderer which renders data values as images.\n */\nexport class ImageRenderer extends AsyncCellRenderer {\n  /**\n   * Construct a new text renderer.\n   *\n   * @param options - The options for initializing the renderer.\n   */\n  constructor(options: ImageRenderer.IOptions = {}) {\n    super();\n\n    this.backgroundColor = options.backgroundColor || '';\n    this.textColor = options.textColor || '#000000';\n    this.placeholder = options.placeholder || '...';\n\n    this.width = options.width || '';\n    // Not using the || operator, because the empty string '' is a valid value\n    this.height = options.height === undefined ? '100%' : options.height;\n  }\n\n  /**\n   * The CSS color for drawing the placeholder text.\n   */\n  readonly textColor: CellRenderer.ConfigOption<string>;\n\n  /**\n   * The CSS color for the cell background.\n   */\n  readonly backgroundColor: CellRenderer.ConfigOption<string>;\n\n  /**\n   * The placeholder text.\n   */\n  readonly placeholder: CellRenderer.ConfigOption<string>;\n\n  /**\n   * The width of the image.\n   */\n  readonly width: CellRenderer.ConfigOption<string>;\n\n  /**\n   * The height of the image.\n   */\n  readonly height: CellRenderer.ConfigOption<string>;\n\n  /**\n   * Whether the renderer is ready or not for that specific config.\n   * If it's not ready, the datagrid will paint the placeholder.\n   * If it's ready, the datagrid will paint the image synchronously.\n   *\n   * @param config - The configuration data for the cell.\n   *\n   * @returns Whether the renderer is ready for this config or not.\n   */\n  isReady(config: CellRenderer.CellConfig): boolean {\n    return (\n      !config.value || ImageRenderer.dataCache.get(config.value) !== undefined\n    );\n  }\n\n  /**\n   * Load the image asynchronously for a specific config.\n   *\n   * @param config - The configuration data for the cell.\n   */\n  async load(config: CellRenderer.CellConfig): Promise<void> {\n    // Bail early if there is nothing to do\n    if (!config.value) {\n      return;\n    }\n\n    const value = config.value;\n    const loadedPromise = new PromiseDelegate<void>();\n\n    ImageRenderer.dataCache.set(value, undefined);\n\n    const img = new Image();\n    img.onload = () => {\n      ImageRenderer.dataCache.set(value, img);\n\n      loadedPromise.resolve();\n    };\n    img.src = value;\n\n    return loadedPromise.promise;\n  }\n\n  /**\n   * Paint the placeholder for a cell, waiting for the renderer to be ready.\n   *\n   * @param gc - The graphics context to use for drawing.\n   *\n   * @param config - The configuration data for the cell.\n   */\n  paintPlaceholder(gc: GraphicsContext, config: CellRenderer.CellConfig): void {\n    this.drawBackground(gc, config);\n    this.drawPlaceholder(gc, config);\n  }\n\n  /**\n   * Paint the content for a cell.\n   *\n   * @param gc - The graphics context to use for drawing.\n   *\n   * @param config - The configuration data for the cell.\n   */\n  paint(gc: GraphicsContext, config: CellRenderer.CellConfig): void {\n    this.drawBackground(gc, config);\n    this.drawImage(gc, config);\n  }\n\n  /**\n   * Draw the background for the cell.\n   *\n   * @param gc - The graphics context to use for drawing.\n   *\n   * @param config - The configuration data for the cell.\n   */\n  drawBackground(gc: GraphicsContext, config: CellRenderer.CellConfig): void {\n    // Resolve the background color for the cell.\n    const color = CellRenderer.resolveOption(this.backgroundColor, config);\n\n    // Bail if there is no background color to draw.\n    if (!color) {\n      return;\n    }\n\n    // Fill the cell with the background color.\n    gc.fillStyle = color;\n    gc.fillRect(config.x, config.y, config.width, config.height);\n  }\n\n  /**\n   * Draw the placeholder for the cell.\n   *\n   * @param gc - The graphics context to use for drawing.\n   *\n   * @param config - The configuration data for the cell.\n   */\n  drawPlaceholder(gc: GraphicsContext, config: CellRenderer.CellConfig): void {\n    const placeholder = CellRenderer.resolveOption(this.placeholder, config);\n    const color = CellRenderer.resolveOption(this.textColor, config);\n\n    const textX = config.x + config.width / 2;\n    const textY = config.y + config.height / 2;\n\n    // Draw the placeholder.\n    gc.fillStyle = color;\n    gc.fillText(placeholder, textX, textY);\n  }\n\n  /**\n   * Draw the image for the cell.\n   *\n   * @param gc - The graphics context to use for drawing.\n   *\n   * @param config - The configuration data for the cell.\n   */\n  drawImage(gc: GraphicsContext, config: CellRenderer.CellConfig): void {\n    // Bail early if there is nothing to draw\n    if (!config.value) {\n      return;\n    }\n\n    const img = ImageRenderer.dataCache.get(config.value);\n\n    // If it's not loaded yet, show the placeholder\n    if (!img) {\n      return this.drawPlaceholder(gc, config);\n    }\n\n    const width = CellRenderer.resolveOption(this.width, config);\n    const height = CellRenderer.resolveOption(this.height, config);\n\n    // width and height are unset, we display the image with its original size\n    if (!width && !height) {\n      gc.drawImage(img, config.x, config.y);\n      return;\n    }\n\n    let requestedWidth = img.width;\n    let requestedHeight = img.height;\n\n    let widthPercentageMatch: RegExpMatchArray | null;\n    let widthPixelMatch: RegExpMatchArray | null;\n    let heightPercentageMatch: RegExpMatchArray | null;\n    let heightPixelMatch: RegExpMatchArray | null;\n\n    if ((widthPercentageMatch = width.match(PERCENTAGE_REGEX))) {\n      requestedWidth =\n        (parseFloat(widthPercentageMatch[1]) / 100) * config.width;\n    } else if ((widthPixelMatch = width.match(PIXEL_REGEX))) {\n      requestedWidth = parseFloat(widthPixelMatch[1]);\n    }\n\n    if ((heightPercentageMatch = height.match(PERCENTAGE_REGEX))) {\n      requestedHeight =\n        (parseFloat(heightPercentageMatch[1]) / 100) * config.height;\n    } else if ((heightPixelMatch = height.match(PIXEL_REGEX))) {\n      requestedHeight = parseFloat(heightPixelMatch[1]);\n    }\n\n    // If width is not set, we compute it respecting the image size ratio\n    if (!width) {\n      requestedWidth = (img.width / img.height) * requestedHeight;\n    }\n\n    // If height is not set, we compute it respecting the image size ratio\n    if (!height) {\n      requestedHeight = (img.height / img.width) * requestedWidth;\n    }\n\n    gc.drawImage(img, config.x, config.y, requestedWidth, requestedHeight);\n  }\n\n  private static dataCache = new Map<string, HTMLImageElement | undefined>();\n}\n\n/**\n * The namespace for the `ImageRenderer` class statics.\n */\nexport namespace ImageRenderer {\n  /**\n   * An options object for initializing an image renderer.\n   */\n  export interface IOptions {\n    /**\n     * The background color for the cells.\n     *\n     * The default is `''`.\n     */\n    backgroundColor?: CellRenderer.ConfigOption<string>;\n\n    /**\n     * The placeholder text while the cell is loading.\n     *\n     * The default is `'...'`.\n     */\n    placeholder?: CellRenderer.ConfigOption<string>;\n\n    /**\n     * The color for the drawing the placeholder text.\n     *\n     * The default is `'#000000'`.\n     */\n    textColor?: CellRenderer.ConfigOption<string>;\n\n    /**\n     * The width of the image. Can be a percentage of the available space (e.g. '50%'), a\n     * number of pixels (e.g. '123px') or an empty string.\n     * If it's an empty string, it will respect the image size ratio depending on the height value\n     * Examples:\n     * - if height='100%' and width='', it will take the available height in the cell and compute the width so\n     * that the image is not malformed.\n     * - if height='' and width='50%', it will take half of the available width in the cell and compute the height so\n     * that the image is not malformed.\n     * - if height='' and width='', the image will keep its original size.\n     *\n     * The default is `''`.\n     */\n    width?: CellRenderer.ConfigOption<string>;\n\n    /**\n     * The height of the image. Can be a percentage of the available space (e.g. '50%'), a\n     * number of pixels (e.g. '123px') or an empty string.\n     * If it's an empty string, it will respect the image size ratio depending on the width value\n     * Examples:\n     * - if height='100%' and width='', it will take the available height in the cell and compute the width so\n     * that the image is not malformed.\n     * - if height='' and width='50%', it will take half of the available width in the cell and compute the height so\n     * that the image is not malformed.\n     * - if height='' and width='', the image will keep its original size.\n     *\n     * The default is `'100%'`.\n     */\n    height?: CellRenderer.ConfigOption<string>;\n  }\n}\n"],"names":["Private"],"mappings":"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"}