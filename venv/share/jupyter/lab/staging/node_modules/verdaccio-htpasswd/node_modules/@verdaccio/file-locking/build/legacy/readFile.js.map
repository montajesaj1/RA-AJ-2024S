{"version":3,"file":"readFile.js","names":["readFile","name","options","callback","lock","parse","Promise","resolve","reject","lockFile","err","read","fs","contents","parseJSON","JSON","then","content","result"],"sources":["../../src/legacy/readFile.ts"],"sourcesContent":["/* eslint-disable no-undef */\nimport fs from 'fs';\n\nimport { Callback } from '@verdaccio/types';\n\nimport { lockFile } from './lockfile';\n\nexport type ReadFileOptions = {\n  parse?: boolean;\n  lock?: boolean;\n};\n\n/**\n *  Reads a local file, which involves\n *  optionally taking a lock\n *  reading the file contents\n *  optionally parsing JSON contents\n * @param {*} name\n * @param {*} options\n * @param {*} callback\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction readFile(\n  name: string,\n  options: ReadFileOptions = {},\n  callback: Callback = (): void => {}\n): void {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options.lock = options.lock || false;\n  options.parse = options.parse || false;\n\n  const lock = function (options: ReadFileOptions): Promise<null | NodeJS.ErrnoException> {\n    return new Promise((resolve, reject): void => {\n      if (!options.lock) {\n        return resolve(null);\n      }\n\n      lockFile(name, function (err: NodeJS.ErrnoException | null) {\n        if (err) {\n          return reject(err);\n        }\n        return resolve(null);\n      });\n    });\n  };\n\n  const read = function (): Promise<NodeJS.ErrnoException | string> {\n    return new Promise((resolve, reject): void => {\n      fs.readFile(name, 'utf8', function (err, contents) {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(contents);\n      });\n    });\n  };\n\n  const parseJSON = function (contents: string): Promise<unknown> {\n    return new Promise((resolve, reject): void => {\n      if (!options.parse) {\n        return resolve(contents);\n      }\n      try {\n        contents = JSON.parse(contents);\n        return resolve(contents);\n      } catch (err: any) {\n        return reject(err);\n      }\n    });\n  };\n\n  Promise.resolve()\n    .then(() => lock(options))\n    .then(() => read())\n    .then((content) => parseJSON(content as string))\n    .then(\n      (result) => callback(null, result),\n      (err) => callback(err)\n    );\n}\n\nexport { readFile };\n"],"mappings":";;;;;;AACA;AAIA;AAAsC;AALtC;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAQ,CACfC,IAAY,EACZC,OAAwB,GAAG,CAAC,CAAC,EAC7BC,QAAkB,GAAG,MAAY,CAAC,CAAC,EAC7B;EACN,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;IACjCC,QAAQ,GAAGD,OAAO;IAClBA,OAAO,GAAG,CAAC,CAAC;EACd;EAEAA,OAAO,CAACE,IAAI,GAAGF,OAAO,CAACE,IAAI,IAAI,KAAK;EACpCF,OAAO,CAACG,KAAK,GAAGH,OAAO,CAACG,KAAK,IAAI,KAAK;EAEtC,MAAMD,IAAI,GAAG,UAAUF,OAAwB,EAAyC;IACtF,OAAO,IAAII,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAW;MAC5C,IAAI,CAACN,OAAO,CAACE,IAAI,EAAE;QACjB,OAAOG,OAAO,CAAC,IAAI,CAAC;MACtB;MAEA,IAAAE,kBAAQ,EAACR,IAAI,EAAE,UAAUS,GAAiC,EAAE;QAC1D,IAAIA,GAAG,EAAE;UACP,OAAOF,MAAM,CAACE,GAAG,CAAC;QACpB;QACA,OAAOH,OAAO,CAAC,IAAI,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED,MAAMI,IAAI,GAAG,YAAqD;IAChE,OAAO,IAAIL,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAW;MAC5CI,WAAE,CAACZ,QAAQ,CAACC,IAAI,EAAE,MAAM,EAAE,UAAUS,GAAG,EAAEG,QAAQ,EAAE;QACjD,IAAIH,GAAG,EAAE;UACP,OAAOF,MAAM,CAACE,GAAG,CAAC;QACpB;QAEAH,OAAO,CAACM,QAAQ,CAAC;MACnB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAED,MAAMC,SAAS,GAAG,UAAUD,QAAgB,EAAoB;IAC9D,OAAO,IAAIP,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAW;MAC5C,IAAI,CAACN,OAAO,CAACG,KAAK,EAAE;QAClB,OAAOE,OAAO,CAACM,QAAQ,CAAC;MAC1B;MACA,IAAI;QACFA,QAAQ,GAAGE,IAAI,CAACV,KAAK,CAACQ,QAAQ,CAAC;QAC/B,OAAON,OAAO,CAACM,QAAQ,CAAC;MAC1B,CAAC,CAAC,OAAOH,GAAQ,EAAE;QACjB,OAAOF,MAAM,CAACE,GAAG,CAAC;MACpB;IACF,CAAC,CAAC;EACJ,CAAC;EAEDJ,OAAO,CAACC,OAAO,EAAE,CACdS,IAAI,CAAC,MAAMZ,IAAI,CAACF,OAAO,CAAC,CAAC,CACzBc,IAAI,CAAC,MAAML,IAAI,EAAE,CAAC,CAClBK,IAAI,CAAEC,OAAO,IAAKH,SAAS,CAACG,OAAO,CAAW,CAAC,CAC/CD,IAAI,CACFE,MAAM,IAAKf,QAAQ,CAAC,IAAI,EAAEe,MAAM,CAAC,EACjCR,GAAG,IAAKP,QAAQ,CAACO,GAAG,CAAC,CACvB;AACL"}