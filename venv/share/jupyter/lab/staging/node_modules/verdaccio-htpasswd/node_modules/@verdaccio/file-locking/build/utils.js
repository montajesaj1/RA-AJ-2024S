"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.lockFileWithOptions = lockFileWithOptions;
exports.readFile = void 0;
exports.statDir = statDir;
exports.statFile = statFile;
exports.unlockFileNext = unlockFileNext;
var _fs = _interopRequireDefault(require("fs"));
var _lockfile = _interopRequireDefault(require("lockfile"));
var _path = _interopRequireDefault(require("path"));
var _util = require("util");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const fsP = _fs.default.promises ? _fs.default.promises : require('fs/promises');
const readFile = fsP.readFile;
exports.readFile = readFile;
const statPromise = fsP.stat;
// https://github.com/npm/lockfile/issues/33
const lfLock = (0, _util.promisify)(_lockfile.default.lock);
const lfUnlock = (0, _util.promisify)(_lockfile.default.unlock);

/**
 * Test to see if the directory exists
 * @param name
 * @returns
 */
async function statDir(name) {
  const dirPath = _path.default.dirname(name);
  const stats = await statPromise(dirPath);
  if (!stats.isDirectory()) {
    throw new Error(`${_path.default.dirname(name)} is not a directory`);
  }
  return;
}

/**
 *  test to see if the directory exists
 * @param name
 * @returns
 */
async function statFile(name) {
  const stats = await statPromise(name);
  if (!stats.isFile()) {
    throw new Error(`${_path.default.dirname(name)} is not a file`);
  }
  return;
}

/**
 * Lock a file
 * @param name name of the file to lock
 */
async function lockFileWithOptions(name, options) {
  const lockOpts = {
    // time (ms) to wait when checking for stale locks
    wait: 1000,
    // how often (ms) to re-check stale locks
    pollPeriod: 100,
    // locks are considered stale after 5 minutes
    stale: 5 * 60 * 1000,
    // number of times to attempt to create a lock
    retries: 100,
    // time (ms) between tries
    retryWait: 100,
    ...options
  };
  await lfLock(`${name}.lock`, lockOpts);
}

// unlocks file by removing existing lock file
async function unlockFileNext(name) {
  const lockFileName = `${name}.lock`;
  return lfUnlock(lockFileName);
}
//# sourceMappingURL=utils.js.map