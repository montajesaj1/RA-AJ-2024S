{"version":3,"file":"crypt3.js","names":["_crypto","_interopRequireDefault","require","_unixCryptTdJs","obj","__esModule","default","EncryptionMethod","exports","createSalt","type","crypt","crypto","randomBytes","toString","md5","blowfish","sha256","sha512","TypeError","crypt3","key","salt"],"sources":["../src/crypt3.ts"],"sourcesContent":["/** Node.js Crypt(3) Library\n  Inspired by (and intended to be compatible with) sendanor/crypt3\n  see https://github.com/sendanor/node-crypt3\n  The key difference is the removal of the dependency on the unix crypt(3) function\n  which is not platform independent, and requires compilation. Instead, a pure\n  javascript version is used.\n*/\nimport crypto from 'crypto';\nimport crypt from 'unix-crypt-td-js';\n\nexport enum EncryptionMethod {\n  md5 = 'md5',\n  sha1 = 'sha1',\n  crypt = 'crypt',\n  blowfish = 'blowfish',\n  sha256 = 'sha256',\n  sha512 = 'sha512',\n}\n\n/**\n * Create salt\n * @param {EncryptionMethod} type The type of salt: md5, blowfish (only some linux\n * distros), sha256 or sha512. Default is sha512.\n * @returns {string} Generated salt string\n */\nexport function createSalt(type: EncryptionMethod = EncryptionMethod.crypt): string {\n  switch (type) {\n    case EncryptionMethod.crypt:\n      // Legacy crypt salt with no prefix (only the first 2 bytes will be used).\n      return crypto.randomBytes(2).toString('base64');\n\n    case EncryptionMethod.md5:\n      return '$1$' + crypto.randomBytes(10).toString('base64');\n\n    case EncryptionMethod.blowfish:\n      return '$2a$' + crypto.randomBytes(10).toString('base64');\n\n    case EncryptionMethod.sha256:\n      return '$5$' + crypto.randomBytes(10).toString('base64');\n\n    case EncryptionMethod.sha512:\n      return '$6$' + crypto.randomBytes(10).toString('base64');\n\n    default:\n      throw new TypeError(`Unknown salt type at crypt3.createSalt: ${type}`);\n  }\n}\n\n/**\n * Crypt(3) password and data encryption.\n * @param {string} key user's typed password\n * @param {string} salt Optional salt, for example SHA-512 use \"$6$salt$\".\n * @returns {string} A generated hash in format $id$salt$encrypted\n * @see https://en.wikipedia.org/wiki/Crypt_(C)\n */\n\nexport default function crypt3(key: string, salt: string = createSalt()): string {\n  return crypt(key, salt);\n}\n"],"mappings":";;;;;;;;AAOA,IAAAA,OAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,cAAA,GAAAF,sBAAA,CAAAC,OAAA;AAAqC,SAAAD,uBAAAG,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AARrC;AACA;AACA;AACA;AACA;AACA;AACA;AANA,IAUYG,gBAAgB,0BAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAA,OAAhBA,gBAAgB;AAAA;AAS5B;AACA;AACA;AACA;AACA;AACA;AALAC,OAAA,CAAAD,gBAAA,GAAAA,gBAAA;AAMO,SAASE,UAAUA,CAACC,IAAsB,GAAGH,gBAAgB,CAACI,KAAK,EAAU;EAClF,QAAQD,IAAI;IACV,KAAKH,gBAAgB,CAACI,KAAK;MACzB;MACA,OAAOC,eAAM,CAACC,WAAW,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC;IAEjD,KAAKP,gBAAgB,CAACQ,GAAG;MACvB,OAAO,KAAK,GAAGH,eAAM,CAACC,WAAW,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC;IAE1D,KAAKP,gBAAgB,CAACS,QAAQ;MAC5B,OAAO,MAAM,GAAGJ,eAAM,CAACC,WAAW,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC;IAE3D,KAAKP,gBAAgB,CAACU,MAAM;MAC1B,OAAO,KAAK,GAAGL,eAAM,CAACC,WAAW,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC;IAE1D,KAAKP,gBAAgB,CAACW,MAAM;MAC1B,OAAO,KAAK,GAAGN,eAAM,CAACC,WAAW,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC;IAE1D;MACE,MAAM,IAAIK,SAAS,CAAE,2CAA0CT,IAAK,EAAC,CAAC;EAC1E;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,SAASU,MAAMA,CAACC,GAAW,EAAEC,IAAY,GAAGb,UAAU,CAAC,CAAC,EAAU;EAC/E,OAAO,IAAAE,sBAAK,EAACU,GAAG,EAAEC,IAAI,CAAC;AACzB"}