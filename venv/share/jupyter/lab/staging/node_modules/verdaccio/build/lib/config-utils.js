"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasProxyTo = hasProxyTo;
exports.normalizeUserList = normalizeUserList;
var _lodash = _interopRequireDefault(require("lodash"));
var _utils = require("@verdaccio/utils");
var _utils2 = require("./utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Normalize user list.
 * @return {Array}
 */
function normalizeUserList(oldFormat, newFormat) {
  const result = [];
  /* eslint prefer-rest-params: "off" */

  for (let i = 0; i < arguments.length; i++) {
    if (arguments[i] == null) {
      continue;
    }

    // if it's a string, split it to array
    if (_lodash.default.isString(arguments[i])) {
      result.push(arguments[i].split(/\s+/));
    } else if (Array.isArray(arguments[i])) {
      result.push(arguments[i]);
    } else {
      throw _utils2.ErrorCode.getInternalError('CONFIG: bad package acl (array or string expected): ' + JSON.stringify(arguments[i]));
    }
  }
  return _lodash.default.flatten(result);
}

/**
 * Check whether an uplink can proxy
 */
function hasProxyTo(pkg, upLink, packages) {
  const matchedPkg = (0, _utils.getMatchedPackagesSpec)(pkg, packages);
  const proxyList = typeof matchedPkg !== 'undefined' ? matchedPkg.proxy : [];
  if (proxyList) {
    return proxyList.some(curr => upLink === curr);
  }
  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdXRpbHMiLCJfdXRpbHMyIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJub3JtYWxpemVVc2VyTGlzdCIsIm9sZEZvcm1hdCIsIm5ld0Zvcm1hdCIsInJlc3VsdCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJfIiwiaXNTdHJpbmciLCJwdXNoIiwic3BsaXQiLCJBcnJheSIsImlzQXJyYXkiLCJFcnJvckNvZGUiLCJnZXRJbnRlcm5hbEVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImZsYXR0ZW4iLCJoYXNQcm94eVRvIiwicGtnIiwidXBMaW5rIiwicGFja2FnZXMiLCJtYXRjaGVkUGtnIiwiZ2V0TWF0Y2hlZFBhY2thZ2VzU3BlYyIsInByb3h5TGlzdCIsInByb3h5Iiwic29tZSIsImN1cnIiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbGliL2NvbmZpZy11dGlscy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5pbXBvcnQgeyBQYWNrYWdlTGlzdCB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuaW1wb3J0IHsgZ2V0TWF0Y2hlZFBhY2thZ2VzU3BlYyB9IGZyb20gJ0B2ZXJkYWNjaW8vdXRpbHMnO1xuXG5pbXBvcnQgeyBMZWdhY3lQYWNrYWdlTGlzdCwgTWF0Y2hlZFBhY2thZ2UgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBFcnJvckNvZGUgfSBmcm9tICcuL3V0aWxzJztcblxuLyoqXG4gKiBOb3JtYWxpemUgdXNlciBsaXN0LlxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVVc2VyTGlzdChvbGRGb3JtYXQ6IGFueSwgbmV3Rm9ybWF0OiBhbnkpOiBhbnkge1xuICBjb25zdCByZXN1bHQ6IGFueVtdW10gPSBbXTtcbiAgLyogZXNsaW50IHByZWZlci1yZXN0LXBhcmFtczogXCJvZmZcIiAqL1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFyZ3VtZW50c1tpXSA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBpZiBpdCdzIGEgc3RyaW5nLCBzcGxpdCBpdCB0byBhcnJheVxuICAgIGlmIChfLmlzU3RyaW5nKGFyZ3VtZW50c1tpXSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGFyZ3VtZW50c1tpXS5zcGxpdCgvXFxzKy8pKTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJndW1lbnRzW2ldKSkge1xuICAgICAgcmVzdWx0LnB1c2goYXJndW1lbnRzW2ldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgRXJyb3JDb2RlLmdldEludGVybmFsRXJyb3IoXG4gICAgICAgICdDT05GSUc6IGJhZCBwYWNrYWdlIGFjbCAoYXJyYXkgb3Igc3RyaW5nIGV4cGVjdGVkKTogJyArIEpTT04uc3RyaW5naWZ5KGFyZ3VtZW50c1tpXSlcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBfLmZsYXR0ZW4ocmVzdWx0KTtcbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGFuIHVwbGluayBjYW4gcHJveHlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhc1Byb3h5VG8ocGtnOiBzdHJpbmcsIHVwTGluazogc3RyaW5nLCBwYWNrYWdlczogUGFja2FnZUxpc3QpOiBib29sZWFuIHtcbiAgY29uc3QgbWF0Y2hlZFBrZzogTWF0Y2hlZFBhY2thZ2UgPSBnZXRNYXRjaGVkUGFja2FnZXNTcGVjKHBrZywgcGFja2FnZXMpO1xuICBjb25zdCBwcm94eUxpc3QgPSB0eXBlb2YgbWF0Y2hlZFBrZyAhPT0gJ3VuZGVmaW5lZCcgPyBtYXRjaGVkUGtnLnByb3h5IDogW107XG4gIGlmIChwcm94eUxpc3QpIHtcbiAgICByZXR1cm4gcHJveHlMaXN0LnNvbWUoKGN1cnIpID0+IHVwTGluayA9PT0gY3Vycik7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFHQSxJQUFBQyxNQUFBLEdBQUFELE9BQUE7QUFHQSxJQUFBRSxPQUFBLEdBQUFGLE9BQUE7QUFBb0MsU0FBQUQsdUJBQUFJLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxLQUFBRSxPQUFBLEVBQUFGLEdBQUE7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDTyxTQUFTRyxpQkFBaUJBLENBQUNDLFNBQWMsRUFBRUMsU0FBYyxFQUFPO0VBQ3JFLE1BQU1DLE1BQWUsR0FBRyxFQUFFO0VBQzFCOztFQUVBLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQU0sRUFBRUYsQ0FBQyxFQUFFLEVBQUU7SUFDekMsSUFBSUMsU0FBUyxDQUFDRCxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUU7TUFDeEI7SUFDRjs7SUFFQTtJQUNBLElBQUlHLGVBQUMsQ0FBQ0MsUUFBUSxDQUFDSCxTQUFTLENBQUNELENBQUMsQ0FBQyxDQUFDLEVBQUU7TUFDNUJELE1BQU0sQ0FBQ00sSUFBSSxDQUFDSixTQUFTLENBQUNELENBQUMsQ0FBQyxDQUFDTSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEMsQ0FBQyxNQUFNLElBQUlDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDUCxTQUFTLENBQUNELENBQUMsQ0FBQyxDQUFDLEVBQUU7TUFDdENELE1BQU0sQ0FBQ00sSUFBSSxDQUFDSixTQUFTLENBQUNELENBQUMsQ0FBQyxDQUFDO0lBQzNCLENBQUMsTUFBTTtNQUNMLE1BQU1TLGlCQUFTLENBQUNDLGdCQUFnQixDQUM5QixzREFBc0QsR0FBR0MsSUFBSSxDQUFDQyxTQUFTLENBQUNYLFNBQVMsQ0FBQ0QsQ0FBQyxDQUFDLENBQ3RGLENBQUM7SUFDSDtFQUNGO0VBQ0EsT0FBT0csZUFBQyxDQUFDVSxPQUFPLENBQUNkLE1BQU0sQ0FBQztBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDTyxTQUFTZSxVQUFVQSxDQUFDQyxHQUFXLEVBQUVDLE1BQWMsRUFBRUMsUUFBcUIsRUFBVztFQUN0RixNQUFNQyxVQUEwQixHQUFHLElBQUFDLDZCQUFzQixFQUFDSixHQUFHLEVBQUVFLFFBQVEsQ0FBQztFQUN4RSxNQUFNRyxTQUFTLEdBQUcsT0FBT0YsVUFBVSxLQUFLLFdBQVcsR0FBR0EsVUFBVSxDQUFDRyxLQUFLLEdBQUcsRUFBRTtFQUMzRSxJQUFJRCxTQUFTLEVBQUU7SUFDYixPQUFPQSxTQUFTLENBQUNFLElBQUksQ0FBRUMsSUFBSSxJQUFLUCxNQUFNLEtBQUtPLElBQUksQ0FBQztFQUNsRDtFQUVBLE9BQU8sS0FBSztBQUNkIn0=