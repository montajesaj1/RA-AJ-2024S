"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleNotify = handleNotify;
exports.notify = notify;
exports.sendNotification = sendNotification;
var _handlebars = _interopRequireDefault(require("handlebars"));
var _lodash = _interopRequireDefault(require("lodash"));
var _notifyRequest = require("./notify-request");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function handleNotify(metadata, notifyEntry, remoteUser, publishedPackage) {
  let regex;
  if (metadata.name && notifyEntry.packagePattern) {
    regex = new RegExp(notifyEntry.packagePattern, notifyEntry.packagePatternFlags || '');
    if (!regex.test(metadata.name)) {
      return;
    }
  }
  const template = _handlebars.default.compile(notifyEntry.content);
  // don't override 'publisher' if package.json already has that
  /* eslint no-unused-vars: 0 */
  /* eslint @typescript-eslint/no-unused-vars: 0 */
  // @ts-ignore
  if (_lodash.default.isNil(metadata.publisher)) {
    // @ts-ignore
    metadata = _objectSpread(_objectSpread({}, metadata), {}, {
      publishedPackage,
      publisher: {
        name: remoteUser.name
      }
    });
  }
  const content = template(metadata);
  const options = {
    body: content,
    url: ''
  };

  // provides fallback support, it's accept an Object {} and Array of {}
  if (notifyEntry.headers && _lodash.default.isArray(notifyEntry.headers)) {
    const header = {};
    notifyEntry.headers.map(function (item) {
      if (Object.is(item, item)) {
        for (const key in item) {
          /* eslint no-prototype-builtins: 0 */
          if (item.hasOwnProperty(key)) {
            header[key] = item[key];
          }
        }
      }
    });
    options.headers = header;
  } else if (Object.is(notifyEntry.headers, notifyEntry.headers)) {
    options.headers = notifyEntry.headers;
  }
  options.method = notifyEntry.method;
  if (notifyEntry.endpoint) {
    options.url = notifyEntry.endpoint;
  }
  return (0, _notifyRequest.notifyRequest)(options, content);
}
function sendNotification(metadata, notify, remoteUser, publishedPackage) {
  return handleNotify(metadata, notify, remoteUser, publishedPackage);
}
function notify(metadata, config, remoteUser, publishedPackage) {
  if (config.notify) {
    // @ts-ignore
    if (config.notify.content) {
      return sendNotification(metadata, config.notify, remoteUser, publishedPackage);
    }
    // multiple notifications endpoints PR #108
    return Promise.all(_lodash.default.map(config.notify, key => sendNotification(metadata, key, remoteUser, publishedPackage)));
  }
  return Promise.resolve();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,