"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _express = _interopRequireDefault(require("express"));
var _distTags = _interopRequireDefault(require("./api/dist-tags"));
var _package = _interopRequireDefault(require("./api/package"));
var _ping = _interopRequireDefault(require("./api/ping"));
var _publish = _interopRequireDefault(require("./api/publish"));
var _search = _interopRequireDefault(require("./api/search"));
var _stars = _interopRequireDefault(require("./api/stars"));
var _user = _interopRequireDefault(require("./api/user"));
var _v = _interopRequireDefault(require("./api/v1"));
var _search2 = _interopRequireDefault(require("./api/v1/search"));
var _whoami = _interopRequireDefault(require("./api/whoami"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const {
  match,
  validateName,
  validatePackage,
  encodeScopePackage,
  antiLoop
} = require('@verdaccio/middleware');
function _default(config, auth, storage) {
  /* eslint new-cap:off */
  const app = _express.default.Router();
  /* eslint new-cap:off */
  // validate all of these params as a package name
  // this might be too harsh, so ask if it causes trouble
  app.param('package', validatePackage);
  app.param('filename', validateName);
  app.param('tag', validateName);
  app.param('version', validateName);
  app.param('revision', validateName);
  app.param('token', validateName);

  // these can't be safely put into express url for some reason
  // TODO: For some reason? what reason?
  app.param('_rev', match(/^-rev$/));
  app.param('org_couchdb_user', match(/^org\.couchdb\.user:/));
  app.use(auth.apiJWTmiddleware());
  app.use(_express.default.json({
    strict: false,
    limit: config.max_body_size || '10mb'
  }));
  app.use(antiLoop(config));
  // encode / in a scoped package name to be matched as a single parameter in routes
  app.use(encodeScopePackage);
  // for "npm whoami"
  (0, _whoami.default)(app);
  (0, _package.default)(app, auth, storage, config);
  (0, _search.default)(app, auth, storage);
  (0, _distTags.default)(app, auth, storage);
  (0, _publish.default)(app, auth, storage, config);
  (0, _ping.default)(app);
  (0, _stars.default)(app, storage);
  (0, _search2.default)(app, auth, storage);
  (0, _user.default)(app, auth, config);
  app.use((0, _v.default)(auth, storage, config));
  return app;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXhwcmVzcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2Rpc3RUYWdzIiwiX3BhY2thZ2UiLCJfcGluZyIsIl9wdWJsaXNoIiwiX3NlYXJjaCIsIl9zdGFycyIsIl91c2VyIiwiX3YiLCJfc2VhcmNoMiIsIl93aG9hbWkiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm1hdGNoIiwidmFsaWRhdGVOYW1lIiwidmFsaWRhdGVQYWNrYWdlIiwiZW5jb2RlU2NvcGVQYWNrYWdlIiwiYW50aUxvb3AiLCJfZGVmYXVsdCIsImNvbmZpZyIsImF1dGgiLCJzdG9yYWdlIiwiYXBwIiwiZXhwcmVzcyIsIlJvdXRlciIsInBhcmFtIiwidXNlIiwiYXBpSldUbWlkZGxld2FyZSIsImpzb24iLCJzdHJpY3QiLCJsaW1pdCIsIm1heF9ib2R5X3NpemUiLCJ3aG9hbWkiLCJwa2ciLCJzZWFyY2giLCJkaXN0VGFncyIsInB1Ymxpc2giLCJwaW5nIiwic3RhcnMiLCJ2MVNlYXJjaCIsInVzZXIiLCJucG1WMSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5cbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuXG5pbXBvcnQgQXV0aCBmcm9tICcuLi8uLi9saWIvYXV0aCc7XG5pbXBvcnQgU3RvcmFnZSBmcm9tICcuLi8uLi9saWIvc3RvcmFnZSc7XG5pbXBvcnQgZGlzdFRhZ3MgZnJvbSAnLi9hcGkvZGlzdC10YWdzJztcbmltcG9ydCBwa2cgZnJvbSAnLi9hcGkvcGFja2FnZSc7XG5pbXBvcnQgcGluZyBmcm9tICcuL2FwaS9waW5nJztcbmltcG9ydCBwdWJsaXNoIGZyb20gJy4vYXBpL3B1Ymxpc2gnO1xuaW1wb3J0IHNlYXJjaCBmcm9tICcuL2FwaS9zZWFyY2gnO1xuaW1wb3J0IHN0YXJzIGZyb20gJy4vYXBpL3N0YXJzJztcbmltcG9ydCB1c2VyIGZyb20gJy4vYXBpL3VzZXInO1xuaW1wb3J0IG5wbVYxIGZyb20gJy4vYXBpL3YxJztcbmltcG9ydCB2MVNlYXJjaCBmcm9tICcuL2FwaS92MS9zZWFyY2gnO1xuaW1wb3J0IHdob2FtaSBmcm9tICcuL2FwaS93aG9hbWknO1xuXG5jb25zdCB7XG4gIG1hdGNoLFxuICB2YWxpZGF0ZU5hbWUsXG4gIHZhbGlkYXRlUGFja2FnZSxcbiAgZW5jb2RlU2NvcGVQYWNrYWdlLFxuICBhbnRpTG9vcCxcbn0gPSByZXF1aXJlKCdAdmVyZGFjY2lvL21pZGRsZXdhcmUnKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGNvbmZpZzogQ29uZmlnLCBhdXRoOiBBdXRoLCBzdG9yYWdlOiBTdG9yYWdlKSB7XG4gIC8qIGVzbGludCBuZXctY2FwOm9mZiAqL1xuICBjb25zdCBhcHAgPSBleHByZXNzLlJvdXRlcigpO1xuICAvKiBlc2xpbnQgbmV3LWNhcDpvZmYgKi9cbiAgLy8gdmFsaWRhdGUgYWxsIG9mIHRoZXNlIHBhcmFtcyBhcyBhIHBhY2thZ2UgbmFtZVxuICAvLyB0aGlzIG1pZ2h0IGJlIHRvbyBoYXJzaCwgc28gYXNrIGlmIGl0IGNhdXNlcyB0cm91YmxlXG4gIGFwcC5wYXJhbSgncGFja2FnZScsIHZhbGlkYXRlUGFja2FnZSk7XG4gIGFwcC5wYXJhbSgnZmlsZW5hbWUnLCB2YWxpZGF0ZU5hbWUpO1xuICBhcHAucGFyYW0oJ3RhZycsIHZhbGlkYXRlTmFtZSk7XG4gIGFwcC5wYXJhbSgndmVyc2lvbicsIHZhbGlkYXRlTmFtZSk7XG4gIGFwcC5wYXJhbSgncmV2aXNpb24nLCB2YWxpZGF0ZU5hbWUpO1xuICBhcHAucGFyYW0oJ3Rva2VuJywgdmFsaWRhdGVOYW1lKTtcblxuICAvLyB0aGVzZSBjYW4ndCBiZSBzYWZlbHkgcHV0IGludG8gZXhwcmVzcyB1cmwgZm9yIHNvbWUgcmVhc29uXG4gIC8vIFRPRE86IEZvciBzb21lIHJlYXNvbj8gd2hhdCByZWFzb24/XG4gIGFwcC5wYXJhbSgnX3JldicsIG1hdGNoKC9eLXJldiQvKSk7XG4gIGFwcC5wYXJhbSgnb3JnX2NvdWNoZGJfdXNlcicsIG1hdGNoKC9eb3JnXFwuY291Y2hkYlxcLnVzZXI6LykpO1xuXG4gIGFwcC51c2UoYXV0aC5hcGlKV1RtaWRkbGV3YXJlKCkpO1xuICBhcHAudXNlKGV4cHJlc3MuanNvbih7IHN0cmljdDogZmFsc2UsIGxpbWl0OiBjb25maWcubWF4X2JvZHlfc2l6ZSB8fCAnMTBtYicgfSkpO1xuICBhcHAudXNlKGFudGlMb29wKGNvbmZpZykpO1xuICAvLyBlbmNvZGUgLyBpbiBhIHNjb3BlZCBwYWNrYWdlIG5hbWUgdG8gYmUgbWF0Y2hlZCBhcyBhIHNpbmdsZSBwYXJhbWV0ZXIgaW4gcm91dGVzXG4gIGFwcC51c2UoZW5jb2RlU2NvcGVQYWNrYWdlKTtcbiAgLy8gZm9yIFwibnBtIHdob2FtaVwiXG4gIHdob2FtaShhcHApO1xuICBwa2coYXBwLCBhdXRoLCBzdG9yYWdlLCBjb25maWcpO1xuICBzZWFyY2goYXBwLCBhdXRoLCBzdG9yYWdlKTtcbiAgZGlzdFRhZ3MoYXBwLCBhdXRoLCBzdG9yYWdlKTtcbiAgcHVibGlzaChhcHAsIGF1dGgsIHN0b3JhZ2UsIGNvbmZpZyk7XG4gIHBpbmcoYXBwKTtcbiAgc3RhcnMoYXBwLCBzdG9yYWdlKTtcbiAgdjFTZWFyY2goYXBwLCBhdXRoLCBzdG9yYWdlKTtcbiAgdXNlcihhcHAsIGF1dGgsIGNvbmZpZyk7XG4gIGFwcC51c2UobnBtVjEoYXV0aCwgc3RvcmFnZSwgY29uZmlnKSk7XG4gIHJldHVybiBhcHA7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFFBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQU1BLElBQUFDLFNBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLFFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLEtBQUEsR0FBQUosc0JB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