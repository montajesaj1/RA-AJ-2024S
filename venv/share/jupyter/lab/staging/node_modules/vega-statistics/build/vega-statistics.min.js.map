{"version":3,"file":"vega-statistics.min.js","sources":["../src/numbers.js","../../../node_modules/d3-array/src/ascending.js","../../../node_modules/d3-array/src/number.js","../../../node_modules/d3-array/src/sort.js","../../../node_modules/d3-array/src/max.js","../../../node_modules/d3-array/src/min.js","../../../node_modules/d3-array/src/quickselect.js","../../../node_modules/d3-array/src/quantile.js","../src/quantiles.js","../src/quartiles.js","../src/bandwidth.js","../../../node_modules/d3-array/src/deviation.js","../../../node_modules/d3-array/src/variance.js","../src/random.js","../src/constants.js","../src/normal.js","../src/lognormal.js","../src/uniform.js","../src/regression/ols.js","../src/regression/points.js","../src/regression/r-squared.js","../src/regression/linear.js","../src/regression/quad.js","../src/regression/poly.js","../src/regression/loess.js","../src/sampleCurve.js","../src/bin.js","../src/bootstrapCI.js","../src/dotbin.js","../src/integer.js","../src/kde.js","../src/lcg.js","../src/mixture.js","../src/regression/exp.js","../../../node_modules/d3-array/src/median.js","../src/regression/log.js","../src/regression/pow.js"],"sourcesContent":["export default function*(values, valueof) {\n  if (valueof == null) {\n    for (let value of values) {\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      value = valueof(value, ++index, values);\n      if (value != null && value !== '' && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","export default function ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","export default function number(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","import ascending from \"./ascending.js\";\nimport permute from \"./permute.js\";\n\nexport default function sort(values, ...F) {\n  if (typeof values[Symbol.iterator] !== \"function\") throw new TypeError(\"values is not iterable\");\n  values = Array.from(values);\n  let [f] = F;\n  if ((f && f.length !== 2) || F.length > 1) {\n    const index = Uint32Array.from(values, (d, i) => i);\n    if (F.length > 1) {\n      F = F.map(f => values.map(f));\n      index.sort((i, j) => {\n        for (const f of F) {\n          const c = ascendingDefined(f[i], f[j]);\n          if (c) return c;\n        }\n      });\n    } else {\n      f = values.map(f);\n      index.sort((i, j) => ascendingDefined(f[i], f[j]));\n    }\n    return permute(values, index);\n  }\n  return values.sort(compareDefined(f));\n}\n\nexport function compareDefined(compare = ascending) {\n  if (compare === ascending) return ascendingDefined;\n  if (typeof compare !== \"function\") throw new TypeError(\"compare is not a function\");\n  return (a, b) => {\n    const x = compare(a, b);\n    if (x || x === 0) return x;\n    return (compare(b, b) === 0) - (compare(a, a) === 0);\n  };\n}\n\nexport function ascendingDefined(a, b) {\n  return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);\n}\n","export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n","export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n","import {ascendingDefined, compareDefined} from \"./sort.js\";\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nexport default function quickselect(array, k, left = 0, right = Infinity, compare) {\n  k = Math.floor(k);\n  left = Math.floor(Math.max(0, left));\n  right = Math.floor(Math.min(array.length - 1, right));\n\n  if (!(left <= k && k <= right)) return array;\n\n  compare = compare === undefined ? ascendingDefined : compareDefined(compare);\n\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n","import max from \"./max.js\";\nimport maxIndex from \"./maxIndex.js\";\nimport min from \"./min.js\";\nimport minIndex from \"./minIndex.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\nimport {ascendingDefined} from \"./sort.js\";\nimport greatest from \"./greatest.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length) || isNaN(p = +p)) return;\n  if (p <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length) || isNaN(p = +p)) return;\n  if (p <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileIndex(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length) || isNaN(p = +p)) return;\n  if (p <= 0 || n < 2) return minIndex(values);\n  if (p >= 1) return maxIndex(values);\n  var n,\n      i = Math.floor((n - 1) * p),\n      order = (i, j) => ascendingDefined(values[i], values[j]),\n      index = quickselect(Uint32Array.from(values, (_, i) => i), i, 0, n - 1, order);\n  return greatest(index.subarray(0, i + 1), i => values[i]);\n}\n","import numbers from './numbers';\nimport {ascending, quantileSorted} from 'd3-array';\n\nexport default function(array, p, f) {\n  const values = Float64Array.from(numbers(array, f));\n\n  // don't depend on return value from typed array sort call\n  // protects against undefined sort results in Safari (vega/vega-lite#4964)\n  values.sort(ascending);\n\n  return p.map(_ => quantileSorted(values, _));\n}\n","import quantiles from './quantiles';\n\nexport default function(array, f) {\n  return quantiles(array, [0.25, 0.50, 0.75], f);\n}\n","import quartiles from './quartiles';\nimport {deviation} from 'd3-array';\n\n// Scott, D. W. (1992) Multivariate Density Estimation:\n// Theory, Practice, and Visualization. Wiley.\nexport default function(array, f) {\n  const n = array.length,\n        d = deviation(array, f),\n        q = quartiles(array, f),\n        h = (q[2] - q[0]) / 1.34,\n        v = Math.min(d, h) || d || Math.abs(q[0]) || 1;\n  return 1.06 * v * Math.pow(n, -0.2);\n}\n","import variance from \"./variance.js\";\n\nexport default function deviation(values, valueof) {\n  const v = variance(values, valueof);\n  return v ? Math.sqrt(v) : v;\n}\n","export default function variance(values, valueof) {\n  let count = 0;\n  let delta;\n  let mean = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}\n","export var random = Math.random;\n\nexport function setRandom(r) {\n  random = r;\n}\n","export const SQRT2PI = Math.sqrt(2 * Math.PI);\nexport const SQRT2 = Math.SQRT2;","import {SQRT2, SQRT2PI} from './constants';\nimport {random} from './random';\n\nlet nextSample = NaN;\n\nexport function sampleNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n\n  let x = 0, y = 0, rds, c;\n  if (nextSample === nextSample) {\n    x = nextSample;\n    nextSample = NaN;\n  } else {\n    do {\n      x = random() * 2 - 1;\n      y = random() * 2 - 1;\n      rds = x * x + y * y;\n    } while (rds === 0 || rds > 1);\n    c = Math.sqrt(-2 * Math.log(rds) / rds); // Box-Muller transform\n    x *= c;\n    nextSample = y * c;\n  }\n  return mean + x * stdev;\n}\n\nexport function densityNormal(value, mean, stdev) {\n  stdev = stdev == null ? 1 : stdev;\n  const z = (value - (mean || 0)) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI);\n}\n\n// Approximation from West (2009)\n// Better Approximations to Cumulative Normal Functions\nexport function cumulativeNormal(value, mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n\n  const z = (value - mean) / stdev,\n        Z = Math.abs(z);\n  let cd;\n\n  if (Z > 37) {\n    cd = 0;\n  } else {\n    const exp = Math.exp(-Z * Z / 2);\n    let sum;\n    if (Z < 7.07106781186547) {\n      sum = 3.52624965998911e-02 * Z + 0.700383064443688;\n      sum = sum * Z + 6.37396220353165;\n      sum = sum * Z + 33.912866078383;\n      sum = sum * Z + 112.079291497871;\n      sum = sum * Z + 221.213596169931;\n      sum = sum * Z + 220.206867912376;\n      cd = exp * sum;\n      sum = 8.83883476483184e-02 * Z + 1.75566716318264;\n      sum = sum * Z + 16.064177579207;\n      sum = sum * Z + 86.7807322029461;\n      sum = sum * Z + 296.564248779674;\n      sum = sum * Z + 637.333633378831;\n      sum = sum * Z + 793.826512519948;\n      sum = sum * Z + 440.413735824752;\n      cd = cd / sum;\n    } else {\n      sum = Z + 0.65;\n      sum = Z + 4 / sum;\n      sum = Z + 3 / sum;\n      sum = Z + 2 / sum;\n      sum = Z + 1 / sum;\n      cd = exp / sum / 2.506628274631;\n    }\n  }\n  return z > 0 ? 1 - cd : cd;\n}\n\n// Approximation of Probit function using inverse error function.\nexport function quantileNormal(p, mean, stdev) {\n  if (p < 0 || p > 1) return NaN;\n  return (mean || 0) + (stdev == null ? 1 : stdev) * SQRT2 * erfinv(2 * p - 1);\n}\n\n// Approximate inverse error function. Implementation from \"Approximating\n// the erfinv function\" by Mike Giles, GPU Computing Gems, volume 2, 2010.\n// Ported from Apache Commons Math, http://www.apache.org/licenses/LICENSE-2.0\nfunction erfinv(x) {\n  // beware that the logarithm argument must be\n  // commputed as (1.0 - x) * (1.0 + x),\n  // it must NOT be simplified as 1.0 - x * x as this\n  // would induce rounding errors near the boundaries +/-1\n  let w = - Math.log((1 - x) * (1 + x)), p;\n\n  if (w < 6.25) {\n      w -= 3.125;\n      p =  -3.6444120640178196996e-21;\n      p =   -1.685059138182016589e-19 + p * w;\n      p =   1.2858480715256400167e-18 + p * w;\n      p =    1.115787767802518096e-17 + p * w;\n      p =   -1.333171662854620906e-16 + p * w;\n      p =   2.0972767875968561637e-17 + p * w;\n      p =   6.6376381343583238325e-15 + p * w;\n      p =  -4.0545662729752068639e-14 + p * w;\n      p =  -8.1519341976054721522e-14 + p * w;\n      p =   2.6335093153082322977e-12 + p * w;\n      p =  -1.2975133253453532498e-11 + p * w;\n      p =  -5.4154120542946279317e-11 + p * w;\n      p =    1.051212273321532285e-09 + p * w;\n      p =  -4.1126339803469836976e-09 + p * w;\n      p =  -2.9070369957882005086e-08 + p * w;\n      p =   4.2347877827932403518e-07 + p * w;\n      p =  -1.3654692000834678645e-06 + p * w;\n      p =  -1.3882523362786468719e-05 + p * w;\n      p =    0.0001867342080340571352 + p * w;\n      p =  -0.00074070253416626697512 + p * w;\n      p =   -0.0060336708714301490533 + p * w;\n      p =      0.24015818242558961693 + p * w;\n      p =       1.6536545626831027356 + p * w;\n  } else if (w < 16.0) {\n      w = Math.sqrt(w) - 3.25;\n      p =   2.2137376921775787049e-09;\n      p =   9.0756561938885390979e-08 + p * w;\n      p =  -2.7517406297064545428e-07 + p * w;\n      p =   1.8239629214389227755e-08 + p * w;\n      p =   1.5027403968909827627e-06 + p * w;\n      p =   -4.013867526981545969e-06 + p * w;\n      p =   2.9234449089955446044e-06 + p * w;\n      p =   1.2475304481671778723e-05 + p * w;\n      p =  -4.7318229009055733981e-05 + p * w;\n      p =   6.8284851459573175448e-05 + p * w;\n      p =   2.4031110387097893999e-05 + p * w;\n      p =   -0.0003550375203628474796 + p * w;\n      p =   0.00095328937973738049703 + p * w;\n      p =   -0.0016882755560235047313 + p * w;\n      p =    0.0024914420961078508066 + p * w;\n      p =   -0.0037512085075692412107 + p * w;\n      p =     0.005370914553590063617 + p * w;\n      p =       1.0052589676941592334 + p * w;\n      p =       3.0838856104922207635 + p * w;\n  } else if (Number.isFinite(w)) {\n      w = Math.sqrt(w) - 5.0;\n      p =  -2.7109920616438573243e-11;\n      p =  -2.5556418169965252055e-10 + p * w;\n      p =   1.5076572693500548083e-09 + p * w;\n      p =  -3.7894654401267369937e-09 + p * w;\n      p =   7.6157012080783393804e-09 + p * w;\n      p =  -1.4960026627149240478e-08 + p * w;\n      p =   2.9147953450901080826e-08 + p * w;\n      p =  -6.7711997758452339498e-08 + p * w;\n      p =   2.2900482228026654717e-07 + p * w;\n      p =  -9.9298272942317002539e-07 + p * w;\n      p =   4.5260625972231537039e-06 + p * w;\n      p =  -1.9681778105531670567e-05 + p * w;\n      p =   7.5995277030017761139e-05 + p * w;\n      p =  -0.00021503011930044477347 + p * w;\n      p =  -0.00013871931833623122026 + p * w;\n      p =       1.0103004648645343977 + p * w;\n      p =       4.8499064014085844221 + p * w;\n  } else {\n      p = Infinity;\n  }\n\n  return p * x;\n}\n\nexport default function(mean, stdev) {\n  let mu, sigma;\n\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n    sample: () => sampleNormal(mu, sigma),\n    pdf: value => densityNormal(value, mu, sigma),\n    cdf: value => cumulativeNormal(value, mu, sigma),\n    icdf: p => quantileNormal(p, mu, sigma)\n  };\n\n  return dist.mean(mean).stdev(stdev);\n}\n","import {cumulativeNormal, quantileNormal, sampleNormal} from './normal';\nimport {SQRT2PI} from './constants';\n\nexport function sampleLogNormal(mean, stdev) {\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  return Math.exp(mean + sampleNormal() * stdev);\n}\n\nexport function densityLogNormal(value, mean, stdev) {\n  if (value <= 0) return 0;\n  mean = mean || 0;\n  stdev = stdev == null ? 1 : stdev;\n  const z = (Math.log(value) - mean) / stdev;\n  return Math.exp(-0.5 * z * z) / (stdev * SQRT2PI * value);\n}\n\nexport function cumulativeLogNormal(value, mean, stdev) {\n  return cumulativeNormal(Math.log(value), mean, stdev);\n}\n\nexport function quantileLogNormal(p, mean, stdev) {\n  return Math.exp(quantileNormal(p, mean, stdev));\n}\n\nexport default function(mean, stdev) {\n  let mu, sigma;\n\n  const dist = {\n    mean(_) {\n      if (arguments.length) {\n        mu = _ || 0;\n        return dist;\n      } else {\n        return mu;\n      }\n    },\n    stdev(_) {\n      if (arguments.length) {\n        sigma = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return sigma;\n      }\n    },\n    sample: () => sampleLogNormal(mu, sigma),\n    pdf: value => densityLogNormal(value, mu, sigma),\n    cdf: value => cumulativeLogNormal(value, mu, sigma),\n    icdf: p => quantileLogNormal(p, mu, sigma)\n  };\n\n  return dist.mean(mean).stdev(stdev);\n}\n","import {random} from './random';\n\nexport function sampleUniform(min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return min + (max - min) * random();\n}\n\nexport function densityUniform(value, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return (value >= min && value <= max) ? 1 / (max - min) : 0;\n}\n\nexport function cumulativeUniform(value, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return value < min ? 0 : value > max ? 1 : (value - min) / (max - min);\n}\n\nexport function quantileUniform(p, min, max) {\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return (p >= 0 && p <= 1) ? min + p * (max - min) : NaN;\n}\n\nexport default function(min, max) {\n  let a, b;\n\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n    max(_) {\n      if (arguments.length) {\n        b = _ == null ? 1 : _;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n    sample: () => sampleUniform(a, b),\n    pdf: value => densityUniform(value, a, b),\n    cdf: value => cumulativeUniform(value, a, b),\n    icdf: p => quantileUniform(p, a, b)\n  };\n\n  if (max == null) {\n    max = (min == null ? 1 : min);\n    min = 0;\n  }\n  return dist.min(min).max(max);\n}\n","// Ordinary Least Squares\nexport default function(uX, uY, uXY, uX2) {\n  const delta = uX2 - uX * uX,\n        slope = Math.abs(delta) < 1e-24 ? 0 : (uXY - uX * uY) / delta,\n        intercept = uY - slope * uX;\n\n  return [intercept, slope];\n}\n","export function points(data, x, y, sort) {\n  data = data.filter(d => {\n    let u = x(d), v = y(d);\n    return u != null && (u = +u) >= u && v != null && (v = +v) >= v;\n  });\n\n  if (sort) {\n    data.sort((a, b) => x(a) - x(b));\n  }\n\n  const n = data.length,\n        X = new Float64Array(n),\n        Y = new Float64Array(n);\n\n  // extract values, calculate means\n  let i = 0, ux = 0, uy = 0, xv, yv, d;\n  for (d of data) {\n    X[i] = xv = +x(d);\n    Y[i] = yv = +y(d);\n    ++i;\n    ux += (xv - ux) / i;\n    uy += (yv - uy) / i;\n  }\n\n  // mean center the data\n  for (i=0; i<n; ++i) {\n    X[i] -= ux;\n    Y[i] -= uy;\n  }\n\n  return [X, Y, ux, uy];\n}\n\nexport function visitPoints(data, x, y, callback) {\n  let i = -1, u, v;\n\n  for (const d of data) {\n    u = x(d);\n    v = y(d);\n    if (u != null && (u = +u) >= u && v != null && (v = +v) >= v) {\n      callback(u, v, ++i);\n    }\n  }\n}\n","import {visitPoints} from './points';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y, uY, predict) {\n  let SSE = 0, SST = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    const sse = dy - predict(dx),\n          sst = dy - uY;\n\n    SSE += sse * sse;\n    SST += sst * sst;\n  });\n\n  return 1 - SSE / SST;\n}\n","import ols from './ols';\nimport {visitPoints} from './points';\nimport rSquared from './r-squared';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] + coef[1] * x;\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n","import {points} from './points';\nimport rSquared from './r-squared';\n\nexport default function(data, x, y) {\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length;\n\n  let X2 = 0, X3 = 0, X4 = 0, XY = 0, X2Y = 0,\n      i, dx, dy, x2;\n\n  for (i=0; i<n;) {\n    dx = xv[i];\n    dy = yv[i++];\n    x2 = dx * dx;\n    X2 += (x2 - X2) / i;\n    X3 += (x2 * dx - X3) / i;\n    X4 += (x2 * x2 - X4) / i;\n    XY += (dx * dy - XY) / i;\n    X2Y += (x2 * dy - X2Y) / i;\n  }\n\n  const X2X2 = X4 - (X2 * X2),\n        d = (X2 * X2X2 - X3 * X3),\n        a = (X2Y * X2 - XY * X3) / d,\n        b = (XY * X2X2 - X2Y * X3) / d,\n        c = -a * X2,\n        predict = x => {\n          x = x - ux;\n          return a * x * x + b * x + c + uy;\n        };\n\n  // transform coefficients back from mean-centered space\n  return {\n    coef: [\n      c - b * ux + a * ux * ux + uy,\n      b - 2 * a * ux,\n      a\n    ],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n","import linear from './linear';\nimport {points} from './points';\nimport quad from './quad';\nimport rSquared from './r-squared';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\n// ... which was adapted from regression-js by Tom Alexander\n// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\nexport default function(data, x, y, order) {\n  // use more efficient methods for lower orders\n  if (order === 1) return linear(data, x, y);\n  if (order === 2) return quad(data, x, y);\n\n  const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length,\n        lhs = [],\n        rhs = [],\n        k = order + 1;\n\n  let i, j, l, v, c;\n\n  for (i=0; i<k; ++i) {\n    for (l=0, v=0; l<n; ++l) {\n      v += Math.pow(xv[l], i) * yv[l];\n    }\n    lhs.push(v);\n\n    c = new Float64Array(k);\n    for (j=0; j<k; ++j) {\n      for (l=0, v=0; l<n; ++l) {\n        v += Math.pow(xv[l], i + j);\n      }\n      c[j] = v;\n    }\n    rhs.push(c);\n  }\n  rhs.push(lhs);\n\n  const coef = gaussianElimination(rhs),\n        predict = x => {\n          x -= ux;\n          let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n          for (i=3; i<k; ++i) y += coef[i] * Math.pow(x, i);\n          return y;\n        };\n\n  return {\n    coef: uncenter(k, coef, -ux, uy),\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n\nfunction uncenter(k, a, x, y) {\n  const z = Array(k);\n  let i, j, v, c;\n\n  // initialize to zero\n  for (i=0; i<k; ++i) z[i] = 0;\n\n  // polynomial expansion\n  for (i=k-1; i>=0; --i) {\n    v = a[i];\n    c = 1;\n    z[i] += v;\n    for (j=1; j<=i; ++j) {\n      c *= (i + 1 - j) / j; // binomial coefficent\n      z[i-j] += v * Math.pow(x, j) * c;\n    }\n  }\n\n  // bias term\n  z[0] += y;\n\n  return z;\n}\n\n// Given an array for a two-dimensional matrix and the polynomial order,\n// solve A * x = b using Gaussian elimination.\nfunction gaussianElimination(matrix) {\n  const n = matrix.length - 1,\n        coef = [];\n\n  let i, j, k, r, t;\n\n  for (i = 0; i < n; ++i) {\n    r = i; // max row\n    for (j = i + 1; j < n; ++j) {\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n        r = j;\n      }\n    }\n\n    for (k = i; k < n + 1; ++k) {\n      t = matrix[k][i];\n      matrix[k][i] = matrix[k][r];\n      matrix[k][r] = t;\n    }\n\n    for (j = i + 1; j < n; ++j) {\n      for (k = n; k >= i; k--) {\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\n      }\n    }\n  }\n\n  for (j = n - 1; j >= 0; --j) {\n    t = 0;\n    for (k = j + 1; k < n; ++k) {\n      t += matrix[k][j] * coef[k];\n    }\n    coef[j] = (matrix[n][j] - t) / matrix[j][j];\n  }\n\n  return coef;\n}","import ols from './ols';\nimport {points} from './points';\nimport {median} from 'd3-array';\n\nconst maxiters = 2,\n      epsilon = 1e-12;\n\n// Adapted from science.js by Jason Davies\n// Source: https://github.com/jasondavies/science.js/blob/master/src/stats/loess.js\n// License: https://github.com/jasondavies/science.js/blob/master/LICENSE\nexport default function(data, x, y, bandwidth) {\n  const [xv, yv, ux, uy] = points(data, x, y, true),\n        n = xv.length,\n        bw = Math.max(2, ~~(bandwidth * n)), // # nearest neighbors\n        yhat = new Float64Array(n),\n        residuals = new Float64Array(n),\n        robustWeights = new Float64Array(n).fill(1);\n\n  for (let iter = -1; ++iter <= maxiters; ) {\n    const interval = [0, bw - 1];\n\n    for (let i = 0; i < n; ++i) {\n      const dx = xv[i],\n            i0 = interval[0],\n            i1 = interval[1],\n            edge = (dx - xv[i0]) > (xv[i1] - dx) ? i0 : i1;\n\n      let W = 0, X = 0, Y = 0, XY = 0, X2 = 0;\n      const denom = 1 / Math.abs(xv[edge] - dx || 1); // avoid singularity!\n\n      for (let k = i0; k <= i1; ++k) {\n        const xk = xv[k],\n              yk = yv[k],\n              w = tricube(Math.abs(dx - xk) * denom) * robustWeights[k],\n              xkw = xk * w;\n\n        W += w;\n        X += xkw;\n        Y += yk * w;\n        XY += yk * xkw;\n        X2 += xk * xkw;\n      }\n\n      // linear regression fit\n      const [a, b] = ols(X / W, Y / W, XY / W, X2 / W);\n      yhat[i] = a + b * dx;\n      residuals[i] = Math.abs(yv[i] - yhat[i]);\n\n      updateInterval(xv, i + 1, interval);\n    }\n\n    if (iter === maxiters) {\n      break;\n    }\n\n    const medianResidual = median(residuals);\n    if (Math.abs(medianResidual) < epsilon) break;\n\n    for (let i = 0, arg, w; i < n; ++i){\n      arg = residuals[i] / (6 * medianResidual);\n      // default to epsilon (rather than zero) for large deviations\n      // keeping weights tiny but non-zero prevents singularites\n      robustWeights[i] = (arg >= 1) ? epsilon : ((w = 1 - arg * arg) * w);\n    }\n  }\n\n  return output(xv, yhat, ux, uy);\n}\n\n// weighting kernel for local regression\nfunction tricube(x) {\n  return (x = 1 - x * x * x) * x * x;\n}\n\n// advance sliding window interval of nearest neighbors\nfunction updateInterval(xv, i, interval) {\n  const val = xv[i];\n  let left = interval[0],\n      right = interval[1] + 1;\n\n  if (right >= xv.length) return;\n\n  // step right if distance to new right edge is <= distance to old left edge\n  // step when distance is equal to ensure movement over duplicate x values\n  while (i > left && (xv[right] - val) <= (val - xv[left])) {\n    interval[0] = ++left;\n    interval[1] = right;\n    ++right;\n  }\n}\n\n// generate smoothed output points\n// average points with repeated x values\nfunction output(xv, yhat, ux, uy) {\n  const n = xv.length, out = [];\n  let i = 0, cnt = 0, prev = [], v;\n\n  for (; i<n; ++i) {\n    v = xv[i] + ux;\n    if (prev[0] === v) {\n      // average output values via online update\n      prev[1] += (yhat[i] - prev[1]) / (++cnt);\n    } else {\n      // add new output point\n      cnt = 0;\n      prev[1] += uy;\n      prev = [v, yhat[i]];\n      out.push(prev);\n    }\n  }\n  prev[1] += uy;\n\n  return out;\n}\n","// subdivide up to accuracy of 0.5 degrees\nconst MIN_RADIANS = 0.5 * Math.PI / 180;\n\n// Adaptively sample an interpolated function over a domain extent\nexport default function(f, extent, minSteps, maxSteps) {\n  minSteps = minSteps || 25;\n  maxSteps = Math.max(minSteps, maxSteps || 200);\n\n  const point = x => [x, f(x)],\n        minX = extent[0],\n        maxX = extent[1],\n        span = maxX - minX,\n        stop = span / maxSteps,\n        prev = [point(minX)],\n        next = [];\n\n  if (minSteps === maxSteps) {\n    // no adaptation, sample uniform grid directly and return\n    for (let i = 1; i < maxSteps; ++i) {\n      prev.push(point(minX + (i / minSteps) * span));\n    }\n    prev.push(point(maxX));\n    return prev;\n  } else {\n    // sample minimum points on uniform grid\n    // then move on to perform adaptive refinement\n    next.push(point(maxX));\n    for (let i = minSteps; --i > 0;) {\n      next.push(point(minX + (i / minSteps) * span));\n    }\n  }\n\n  let p0 = prev[0];\n  let p1 = next[next.length - 1];\n\n  const sx = 1 / span;\n  const sy = scaleY(p0[1], next);\n\n  while (p1) {\n    // midpoint for potential curve subdivision\n    const pm = point((p0[0] + p1[0]) / 2);\n    const dx = pm[0] - p0[0] >= stop;\n\n    if (dx && angleDelta(p0, pm, p1, sx, sy) > MIN_RADIANS) {\n      // maximum resolution has not yet been met, and\n      // subdivision midpoint is sufficiently different from endpoint\n      // save subdivision, push midpoint onto the visitation stack\n      next.push(pm);\n    } else {\n      // subdivision midpoint sufficiently similar to endpoint\n      // skip subdivision, store endpoint, move to next point on the stack\n      p0 = p1;\n      prev.push(p1);\n      next.pop();\n    }\n    p1 = next[next.length - 1];\n  }\n\n  return prev;\n}\n\nfunction scaleY(init, points) {\n  let ymin = init;\n  let ymax = init;\n\n  const n = points.length;\n  for (let i = 0; i < n; ++i) {\n    const y = points[i][1];\n    if (y < ymin) ymin = y;\n    if (y > ymax) ymax = y;\n  }\n\n  return 1 / (ymax - ymin);\n}\n\nfunction angleDelta(p, q, r, sx, sy) {\n  const a0 = Math.atan2(sy * (r[1] - p[1]), sx * (r[0] - p[0])),\n        a1 = Math.atan2(sy * (q[1] - p[1]), sx * (q[0] - p[0]));\n  return Math.abs(a0 - a1);\n}\n","export default function(_) {\n  // determine range\n  const maxb = _.maxbins || 20,\n        base = _.base || 10,\n        logb = Math.log(base),\n        div  = _.divide || [5, 2];\n\n  let min  = _.extent[0],\n      max  = _.extent[1],\n      step, level, minstep, v, i, n;\n\n  const span = _.span || (max - min) || Math.abs(min) || 1;\n\n  if (_.step) {\n    // if step size is explicitly given, use that\n    step = _.step;\n  } else if (_.steps) {\n    // if provided, limit choice to acceptable step sizes\n    v = span / maxb;\n    for (i=0, n=_.steps.length; i < n && _.steps[i] < v; ++i);\n    step = _.steps[Math.max(0, i-1)];\n  } else {\n    // else use span to determine step size\n    level = Math.ceil(Math.log(maxb) / logb);\n    minstep = _.minstep || 0;\n    step = Math.max(\n      minstep,\n      Math.pow(base, Math.round(Math.log(span) / logb) - level)\n    );\n\n    // increase step size if too many bins\n    while (Math.ceil(span/step) > maxb) { step *= base; }\n\n    // decrease step size if allowed\n    for (i=0, n=div.length; i<n; ++i) {\n      v = step / div[i];\n      if (v >= minstep && span / v <= maxb) step = v;\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  const precision = v >= 0 ? 0 : ~~(-v / logb) + 1,\n        eps = Math.pow(base, -precision - 1);\n  if (_.nice || _.nice === undefined) {\n    v = Math.floor(min / step + eps) * step;\n    min = min < v ? v - step : v;\n    max = Math.ceil(max / step) * step;\n  }\n\n  return {\n    start: min,\n    stop:  max === min ? min + step : max,\n    step:  step\n  };\n}\n","import numbers from './numbers';\nimport {random} from './random';\nimport {ascending, quantile} from 'd3-array';\n\nexport default function(array, samples, alpha, f) {\n  if (!array.length) return [undefined, undefined];\n\n  const values = Float64Array.from(numbers(array, f)),\n        n = values.length,\n        m = samples;\n  let a, i, j, mu;\n\n  for (j=0, mu=Array(m); j<m; ++j) {\n    for (a=0, i=0; i<n; ++i) {\n      a += values[~~(random() * n)];\n    }\n    mu[j] = a / n;\n  }\n\n  mu.sort(ascending);\n\n  return [\n    quantile(mu, alpha/2),\n    quantile(mu, 1-(alpha/2))\n  ];\n}\n","// Dot density binning for dot plot construction.\n// Based on Leland Wilkinson, Dot Plots, The American Statistician, 1999.\n// https://www.cs.uic.edu/~wilkinson/Publications/dotplots.pdf\nexport default function(array, step, smooth, f) {\n  f = f || (_ => _);\n\n  const n = array.length,\n        v = new Float64Array(n);\n\n  let i = 0, j = 1,\n      a = f(array[0]),\n      b = a,\n      w = a + step,\n      x;\n\n  for (; j<n; ++j) {\n    x = f(array[j]);\n    if (x >= w) {\n      b = (a + b) / 2;\n      for (; i<j; ++i) v[i] = b;\n      w = x + step;\n      a = x;\n    }\n    b = x;\n  }\n\n  b = (a + b) / 2;\n  for (; i<j; ++i) v[i] = b;\n\n  return smooth ? smoothing(v, step + step / 4) : v;\n}\n\n// perform smoothing to reduce variance\n// swap points between \"adjacent\" stacks\n// Wilkinson defines adjacent as within step/4 units\nfunction smoothing(v, thresh) {\n  const n = v.length;\n  let a = 0,\n      b = 1,\n      c, d;\n\n  // get left stack\n  while (v[a] === v[b]) ++b;\n\n  while (b < n) {\n    // get right stack\n    c = b + 1;\n    while (v[b] === v[c]) ++c;\n\n    // are stacks adjacent?\n    // if so, compare sizes and swap as needed\n    if (v[b] - v[b-1] < thresh) {\n      d = b + ((a + c - b - b) >> 1);\n      while (d < b) v[d++] = v[b];\n      while (d > b) v[d--] = v[a];\n    }\n\n    // update left stack indices\n    a = b;\n    b = c;\n  }\n\n  return v;\n}\n","import {random} from './random';\n\nexport default function(min, max) {\n  if (max == null) {\n    max = min;\n    min = 0;\n  }\n\n  let a, b, d;\n\n  const dist = {\n    min(_) {\n      if (arguments.length) {\n        a = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return a;\n      }\n    },\n    max(_) {\n      if (arguments.length) {\n        b = _ || 0;\n        d = b - a;\n        return dist;\n      } else {\n        return b;\n      }\n    },\n    sample() {\n      return a + Math.floor(d * random());\n    },\n    pdf(x) {\n      return (x === Math.floor(x) && x >= a && x < b) ? 1 / d : 0;\n    },\n    cdf(x) {\n      const v = Math.floor(x);\n      return v < a ? 0 : v >= b ? 1 : (v - a + 1) / d;\n    },\n    icdf(p) {\n      return (p >= 0 && p <= 1) ? a - 1 + Math.floor(p * d) : NaN;\n    }\n  };\n\n  return dist.min(min).max(max);\n}\n","import estimateBandwidth from './bandwidth';\nimport gaussian from './normal';\nimport {random} from './random';\n\nexport default function(support, bandwidth) {\n  const kernel = gaussian();\n  let n = 0;\n\n  const dist = {\n    data(_) {\n      if (arguments.length) {\n        support = _;\n        n = _ ? _.length : 0;\n        return dist.bandwidth(bandwidth);\n      } else {\n        return support;\n      }\n    },\n\n    bandwidth(_) {\n      if (!arguments.length) return bandwidth;\n      bandwidth = _;\n      if (!bandwidth && support) bandwidth = estimateBandwidth(support);\n      return dist;\n    },\n\n    sample() {\n      return support[~~(random() * n)] + bandwidth * kernel.sample();\n    },\n\n    pdf(x) {\n      let y = 0, i = 0;\n      for (; i<n; ++i) {\n        y += kernel.pdf((x - support[i]) / bandwidth);\n      }\n      return y / bandwidth / n;\n    },\n\n    cdf(x) {\n      let y = 0, i = 0;\n      for (; i<n; ++i) {\n        y += kernel.cdf((x - support[i]) / bandwidth);\n      }\n      return y / n;\n    },\n\n    icdf() {\n      throw Error('KDE icdf not supported.');\n    }\n  };\n\n  return dist.data(support);\n}\n","export default function(seed) {\n  // Random numbers using a Linear Congruential Generator with seed value\n  // Uses glibc values from https://en.wikipedia.org/wiki/Linear_congruential_generator\n  return function() {\n    seed = (1103515245 * seed + 12345) % 2147483647;\n    return seed / 2147483647;\n  };\n}\n","import {random} from './random';\n\nexport default function(dists, weights) {\n  let m = 0, w;\n\n  function normalize(x) {\n    const w = [];\n    let sum = 0, i;\n    for (i = 0; i < m; ++i) { sum += (w[i] = (x[i]==null ? 1 : +x[i])); }\n    for (i = 0; i < m; ++i) { w[i] /= sum; }\n    return w;\n  }\n\n  const dist = {\n    weights(_) {\n      if (arguments.length) {\n        w = normalize(weights = (_ || []));\n        return dist;\n      }\n      return weights;\n    },\n\n    distributions(_) {\n      if (arguments.length) {\n        if (_) {\n          m = _.length;\n          dists = _;\n        } else {\n          m = 0;\n          dists = [];\n        }\n        return dist.weights(weights);\n      }\n      return dists;\n    },\n\n    sample() {\n      const r = random();\n      let d = dists[m-1],\n          v = w[0],\n          i = 0;\n\n      // first select distribution\n      for (; i<m-1; v += w[++i]) {\n        if (r < v) { d = dists[i]; break; }\n      }\n      // then sample from it\n      return d.sample();\n    },\n\n    pdf(x) {\n      let p = 0, i = 0;\n      for (; i<m; ++i) {\n        p += w[i] * dists[i].pdf(x);\n      }\n      return p;\n    },\n\n    cdf(x) {\n      let p = 0, i = 0;\n      for (; i<m; ++i) {\n        p += w[i] * dists[i].cdf(x);\n      }\n      return p;\n    },\n\n    icdf() {\n      throw Error('Mixture icdf not supported.');\n    }\n  };\n\n  return dist.distributions(dists).weights(weights);\n}\n","import ols from './ols';\nimport {points, visitPoints} from './points';\nimport rSquared from './r-squared';\n\nexport default function(data, x, y) {\n  // eslint-disable-next-line no-unused-vars\n  const [xv, yv, ux, uy] = points(data, x, y);\n  let YL = 0, XY = 0, XYL = 0, X2Y = 0, n = 0, dx, ly, xy;\n\n  visitPoints(data, x, y, (_, dy) => {\n    dx = xv[n++];\n    ly = Math.log(dy);\n    xy = dx * dy;\n\n    YL += (dy * ly - YL) / n;\n    XY += (xy - XY) / n;\n    XYL += (xy * ly - XYL) / n;\n    X2Y += (dx * xy - X2Y) / n;\n  });\n\n  const [c0, c1] = ols(XY / uy, YL / uy, XYL / uy, X2Y / uy),\n        predict = x => Math.exp(c0 + c1 * (x - ux));\n\n  return {\n    coef: [Math.exp(c0 - c1 * ux), c1],\n    predict: predict,\n    rSquared: rSquared(data, x, y, uy, predict)\n  };\n}\n","import quantile, {quantileIndex} from \"./quantile.js\";\n\nexport default function median(values, valueof) {\n  return quantile(values, 0.5, valueof);\n}\n\nexport function medianIndex(values, valueof) {\n  return quantileIndex(values, 0.5, valueof);\n}\n","import ols from './ols';\nimport {visitPoints} from './points';\nimport rSquared from './r-squared';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    ++n;\n    dx = Math.log(dx);\n    X += (dx - X) / n;\n    Y += (dy - Y) / n;\n    XY += (dx * dy - XY) / n;\n    X2 += (dx * dx - X2) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] + coef[1] * Math.log(x);\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, Y, predict)\n  };\n}\n","import ols from './ols';\nimport {visitPoints} from './points';\nimport rSquared from './r-squared';\n\n// Adapted from d3-regression by Harry Stevens\n// License: https://github.com/HarryStevens/d3-regression/blob/master/LICENSE\nexport default function(data, x, y) {\n  let X = 0, Y = 0, XY = 0, X2 = 0, YS = 0, n = 0;\n\n  visitPoints(data, x, y, (dx, dy) => {\n    const lx = Math.log(dx),\n          ly = Math.log(dy);\n    ++n;\n    X += (lx - X) / n;\n    Y += (ly - Y) / n;\n    XY += (lx * ly - XY) / n;\n    X2 += (lx * lx - X2) / n;\n    YS += (dy - YS) / n;\n  });\n\n  const coef = ols(X, Y, XY, X2),\n        predict = x => coef[0] * Math.pow(x, coef[1]);\n\n  coef[0] = Math.exp(coef[0]);\n\n  return {\n    coef: coef,\n    predict: predict,\n    rSquared: rSquared(data, x, y, YS, predict)\n  };\n}"],"names":["numbers$1","values","valueof","value","index","ascending","a","b","NaN","number","x","ascendingDefined","max","undefined","min","quickselect","array","k","left","arguments","length","right","Infinity","compare","Math","floor","TypeError","compareDefined","n","m","z","log","s","exp","sd","sqrt","t","i","j","swap","quantile","p","Float64Array","from","numbers","isNaN","i0","value0","subarray","quantiles","f","sort","map","_","quantileSorted","quartiles","estimateBandwidth","d","v","delta","count","mean","sum","variance","deviation","q","h","abs","pow","exports","random","SQRT2PI","PI","SQRT2","nextSample","sampleNormal","stdev","rds","c","y","densityNormal","cumulativeNormal","Z","cd","quantileNormal","w","Number","isFinite","erfinv","gaussian","mu","sigma","dist","sample","pdf","cdf","icdf","sampleLogNormal","densityLogNormal","cumulativeLogNormal","quantileLogNormal","sampleUniform","densityUniform","cumulativeUniform","quantileUniform","ols","uX","uY","uXY","uX2","slope","points","data","filter","u","X","Y","xv","yv","ux","uy","visitPoints","callback","rSquared","predict","SSE","SST","dx","dy","sse","sst","linear","XY","X2","coef","quad","x2","X3","X4","X2Y","X2X2","uncenter","Array","maxiters","epsilon","tricube","updateInterval","interval","val","MIN_RADIANS","angleDelta","r","sx","sy","a0","atan2","a1","maxb","maxbins","base","logb","div","divide","step","level","minstep","extent","span","steps","ceil","round","precision","eps","nice","start","stop","samples","alpha","smooth","thresh","smoothing","support","bandwidth","kernel","Error","seed","dists","weights","normalize","distributions","ly","xy","YL","XYL","c0","c1","bw","yhat","residuals","robustWeights","fill","iter","i1","edge","W","denom","xk","yk","xkw","medianResidual","median","arg","out","cnt","prev","push","output","order","lhs","rhs","l","matrix","gaussianElimination","YS","lx","minSteps","maxSteps","point","minX","maxX","next","p0","p1","init","ymin","ymax","scaleY","pm","pop"],"mappings":"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"}