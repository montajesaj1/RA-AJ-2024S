{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/accordion/accordion.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "accordionTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#Accordion} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "accordionTemplate",
          "declaration": {
            "name": "accordionTemplate",
            "module": "src/accordion/accordion.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/accordion/accordion.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "AccordionExpandMode",
          "type": {
            "text": "{\n    /**\n     * Designates only a single {@link @microsoft/fast-foundation#(AccordionItem:class) } can be open a time.\n     */\n    single: \"single\",\n\n    /**\n     * Designates multiple {@link @microsoft/fast-foundation#(AccordionItem:class) | AccordionItems} can be open simultaneously.\n     */\n    multi: \"multi\",\n}"
          },
          "default": "{\n    /**\n     * Designates only a single {@link @microsoft/fast-foundation#(AccordionItem:class) } can be open a time.\n     */\n    single: \"single\",\n\n    /**\n     * Designates multiple {@link @microsoft/fast-foundation#(AccordionItem:class) | AccordionItems} can be open simultaneously.\n     */\n    multi: \"multi\",\n}",
          "description": "Expand mode for {@link Accordion}",
          "privacy": "public"
        },
        {
          "kind": "class",
          "description": "An Accordion Custom HTML Element Implements {@link https://www.w3.org/TR/wai-aria-practices-1.1/#accordion | ARIA Accordion}.",
          "name": "Accordion",
          "cssParts": [
            {
              "description": "The slot for the accordion items",
              "name": "item"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "expandmode",
              "type": {
                "text": "AccordionExpandMode"
              },
              "privacy": "public",
              "description": "Controls the expand mode of the Accordion, either allowing\nsingle or multiple item expansion."
            },
            {
              "kind": "field",
              "name": "activeid",
              "type": {
                "text": "string | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "activeItemIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "accordionIds",
              "type": {
                "text": "Array<string | null>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "change",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "findExpandedItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "AccordionItem | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "setItems",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "resetItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "removeItemListeners",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "activeItemChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getItemIds",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Array<string | null>"
                }
              }
            },
            {
              "kind": "method",
              "name": "isSingleExpandMode",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "handleItemKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleItemFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "adjust",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "adjustment",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'change' event when the active item changes",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "expand-mode",
              "type": {
                "text": "AccordionExpandMode"
              },
              "description": "Controls the expand mode of the Accordion, either allowing\nsingle or multiple item expansion.",
              "fieldName": "expandmode"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AccordionExpandMode",
          "declaration": {
            "name": "AccordionExpandMode",
            "module": "src/accordion/accordion.ts"
          }
        },
        {
          "kind": "js",
          "name": "Accordion",
          "declaration": {
            "name": "Accordion",
            "module": "src/accordion/accordion.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/accordion-item/accordion-item.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "accordionItemTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(AccordionItem:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "accordionItemTemplate",
          "declaration": {
            "name": "accordionItemTemplate",
            "module": "src/accordion-item/accordion-item.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/accordion-item/accordion-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An individual item in an {@link @microsoft/fast-foundation#(Accordion:class) }.",
          "name": "AccordionItem",
          "cssParts": [
            {
              "description": "Wraps the button",
              "name": "heading"
            },
            {
              "description": "The button which serves to invoke the item",
              "name": "button"
            },
            {
              "description": "Wraps the slot for the heading content within the button",
              "name": "heading-content"
            },
            {
              "description": "The icon container",
              "name": "icon"
            },
            {
              "description": "The expanded icon slot",
              "name": "expanded-icon"
            },
            {
              "description": "The collapsed icon",
              "name": "collapsed-icon"
            },
            {
              "description": "The wrapper for the accordion item content",
              "name": "region"
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided between the heading and the icon",
              "name": "start"
            },
            {
              "description": "Content which can be provided between the start slot and icon",
              "name": "end"
            },
            {
              "description": "Content which serves as the accordion item heading and text of the expand button",
              "name": "heading"
            },
            {
              "description": "The default slot for accordion item content",
              "name": ""
            },
            {
              "description": "The expanded icon",
              "name": "expanded-icon"
            },
            {
              "description": "The collapsed icon",
              "name": "collapsed-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "headinglevel",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6"
              },
              "privacy": "public",
              "default": "2",
              "description": "Configures the {@link https://www.w3.org/TR/wai-aria-1.1/#aria-level | level} of the heading element."
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Expands or collapses the item."
            },
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The item ID"
            },
            {
              "kind": "field",
              "name": "change",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'change' event when the button is invoked",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "heading-level",
              "type": {
                "text": "1 | 2 | 3 | 4 | 5 | 6"
              },
              "default": "2",
              "description": "Configures the https://www.w3.org/TR/wai-aria-1.1/#aria-level | level of the\nheading element.",
              "fieldName": "headinglevel"
            },
            {
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Expands or collapses the item.",
              "fieldName": "expanded"
            },
            {
              "name": "id",
              "type": {
                "text": "string"
              },
              "description": "The item ID",
              "fieldName": "id"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AccordionItem",
          "declaration": {
            "name": "AccordionItem",
            "module": "src/accordion-item/accordion-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/anchor/anchor.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "anchorTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(Anchor:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "anchorTemplate",
          "declaration": {
            "name": "anchorTemplate",
            "module": "src/anchor/anchor.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/anchor/anchor.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An Anchor Custom HTML Element. Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element }.",
          "name": "Anchor",
          "cssParts": [
            {
              "description": "The anchor element",
              "name": "control"
            },
            {
              "description": "The element wrapping anchor content",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided before the anchor content",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the anchor content",
              "name": "end"
            },
            {
              "description": "The default slot for anchor content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Prompts the user to save the linked URL. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information."
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The URL the hyperlink references. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information."
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Hints at the language of the referenced resource. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information."
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information."
            },
            {
              "kind": "field",
              "name": "referrerpolicy",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information."
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information."
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "\"_self\" | \"_blank\" | \"_parent\" | \"_top\""
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information."
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information."
            },
            {
              "kind": "field",
              "name": "control",
              "type": {
                "text": "HTMLAnchorElement | undefined"
              },
              "privacy": "public",
              "description": "References the root element"
            },
            {
              "kind": "field",
              "name": "handleUnsupportedDelegatesFocus",
              "privacy": "private",
              "description": "Overrides the focus call for where delegatesFocus is unsupported.\nThis check works for Chrome, Edge Chromium, FireFox, and Safari\nRelevant PR on the Firefox browser: https://phabricator.services.mozilla.com/D123858"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "Prompts the user to save the linked URL. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "download"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "The URL the hyperlink references. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "href"
            },
            {
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "Hints at the language of the referenced resource. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "hreflang"
            },
            {
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "ping"
            },
            {
              "name": "referrerpolicy",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "referrerpolicy"
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "rel"
            },
            {
              "name": "target",
              "type": {
                "text": "\"_self\" | \"_blank\" | \"_parent\" | \"_top\""
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "target"
            },
            {
              "name": "type",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "type"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        },
        {
          "kind": "class",
          "description": "Includes ARIA states and properties relating to the ARIA link role",
          "name": "DelegatesARIALink",
          "members": [
            {
              "kind": "field",
              "name": "ariaExpanded",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "privacy": "public",
              "description": "See {@link https://www.w3.org/WAI/PF/aria/roles#link} for more information"
            }
          ],
          "attributes": [
            {
              "name": "aria-expanded",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "description": "See https://www.w3.org/WAI/PF/aria/roles#link for more information",
              "fieldName": "ariaExpanded"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Anchor",
          "declaration": {
            "name": "Anchor",
            "module": "src/anchor/anchor.ts"
          }
        },
        {
          "kind": "js",
          "name": "DelegatesARIALink",
          "declaration": {
            "name": "DelegatesARIALink",
            "module": "src/anchor/anchor.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/anchored-region/anchored-region-config.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FlyoutPosTop",
          "type": {
            "text": "AnchoredRegionConfig"
          },
          "default": "{\n    ...horizontalAnchorOverlay,\n    verticalDefaultPosition: \"top\",\n    verticalPositioningMode: \"locktodefault\",\n    verticalInset: false,\n    verticalScaling: \"content\",\n}",
          "description": "A region that always places itself above the anchor, has\na width to match the anchor, and is sized vertically by content",
          "privacy": "public"
        },
        {
          "kind": "variable",
          "name": "FlyoutPosBottom",
          "type": {
            "text": "AnchoredRegionConfig"
          },
          "default": "{\n    ...horizontalAnchorOverlay,\n    verticalDefaultPosition: \"bottom\",\n    verticalPositioningMode: \"locktodefault\",\n    verticalInset: false,\n    verticalScaling: \"content\",\n}",
          "description": "A region that always places itself below the anchor, has\na width to match the anchor, and is sized vertically by content",
          "privacy": "public"
        },
        {
          "kind": "variable",
          "name": "FlyoutPosTallest",
          "type": {
            "text": "AnchoredRegionConfig"
          },
          "default": "{\n    ...horizontalAnchorOverlay,\n    verticalPositioningMode: \"dynamic\",\n    verticalInset: false,\n    verticalScaling: \"content\",\n}",
          "description": "A region that places itself above or below the anchor\nbased on available space, has a width to match the anchor,\nand is sized vertically by content",
          "privacy": "public"
        },
        {
          "kind": "variable",
          "name": "FlyoutPosTopFill",
          "type": {
            "text": "AnchoredRegionConfig"
          },
          "default": "{\n    ...FlyoutPosTop,\n    verticalScaling: \"fill\",\n}",
          "description": "A region that always places itself above the anchor, has\na width to match the anchor, and is sized vertically by available space",
          "privacy": "public"
        },
        {
          "kind": "variable",
          "name": "FlyoutPosBottomFill",
          "type": {
            "text": "AnchoredRegionConfig"
          },
          "default": "{\n    ...FlyoutPosBottom,\n    verticalScaling: \"fill\",\n}",
          "description": "A region that always places itself below the anchor, has\na width to match the anchor, and is sized vertically by available space",
          "privacy": "public"
        },
        {
          "kind": "variable",
          "name": "FlyoutPosTallestFill",
          "type": {
            "text": "AnchoredRegionConfig"
          },
          "default": "{\n    ...FlyoutPosTallest,\n    verticalScaling: \"fill\",\n}",
          "description": "A region that places itself above or below the anchor\nbased on available space, has a width to match the anchor,\nand is sized vertically by available space",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FlyoutPosTop",
          "declaration": {
            "name": "FlyoutPosTop",
            "module": "src/anchored-region/anchored-region-config.ts"
          }
        },
        {
          "kind": "js",
          "name": "FlyoutPosBottom",
          "declaration": {
            "name": "FlyoutPosBottom",
            "module": "src/anchored-region/anchored-region-config.ts"
          }
        },
        {
          "kind": "js",
          "name": "FlyoutPosTallest",
          "declaration": {
            "name": "FlyoutPosTallest",
            "module": "src/anchored-region/anchored-region-config.ts"
          }
        },
        {
          "kind": "js",
          "name": "FlyoutPosTopFill",
          "declaration": {
            "name": "FlyoutPosTopFill",
            "module": "src/anchored-region/anchored-region-config.ts"
          }
        },
        {
          "kind": "js",
          "name": "FlyoutPosBottomFill",
          "declaration": {
            "name": "FlyoutPosBottomFill",
            "module": "src/anchored-region/anchored-region-config.ts"
          }
        },
        {
          "kind": "js",
          "name": "FlyoutPosTallestFill",
          "declaration": {
            "name": "FlyoutPosTallestFill",
            "module": "src/anchored-region/anchored-region-config.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/anchored-region/anchored-region.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "anchoredRegionTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(AnchoredRegion:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "anchoredRegionTemplate",
          "declaration": {
            "name": "anchoredRegionTemplate",
            "module": "src/anchored-region/anchored-region.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/anchored-region/anchored-region.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An anchored region Custom HTML Element.",
          "name": "AnchoredRegion",
          "slots": [
            {
              "description": "The default slot for the content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"\"",
              "description": "The HTML ID of the anchor element this region is positioned relative to"
            },
            {
              "kind": "method",
              "name": "anchorChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "viewport",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"\"",
              "description": "The HTML ID of the viewport element this region is positioned relative to"
            },
            {
              "kind": "method",
              "name": "viewportChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "horizontalPositioningMode",
              "type": {
                "text": "AxisPositioningMode"
              },
              "privacy": "public",
              "default": "\"uncontrolled\"",
              "description": "Sets what logic the component uses to determine horizontal placement.\n'locktodefault' forces the default position\n'dynamic' decides placement based on available space\n'uncontrolled' does not control placement on the horizontal axis"
            },
            {
              "kind": "method",
              "name": "horizontalPositioningModeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "horizontalDefaultPosition",
              "type": {
                "text": "HorizontalPosition"
              },
              "privacy": "public",
              "default": "\"unset\"",
              "description": "The default horizontal position of the region relative to the anchor element"
            },
            {
              "kind": "method",
              "name": "horizontalDefaultPositionChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "horizontalViewportLock",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the region remains in the viewport (ie. detaches from the anchor) on the horizontal axis"
            },
            {
              "kind": "method",
              "name": "horizontalViewportLockChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "horizontalInset",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the region overlaps the anchor on the horizontal axis"
            },
            {
              "kind": "method",
              "name": "horizontalInsetChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "horizontalThreshold",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "How narrow the space allocated to the default position has to be before the widest area\nis selected for layout"
            },
            {
              "kind": "method",
              "name": "horizontalThresholdChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "horizontalScaling",
              "type": {
                "text": "AxisScalingMode"
              },
              "privacy": "public",
              "default": "\"content\"",
              "description": "Defines how the width of the region is calculated"
            },
            {
              "kind": "method",
              "name": "horizontalScalingChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "verticalPositioningMode",
              "type": {
                "text": "AxisPositioningMode"
              },
              "privacy": "public",
              "default": "\"uncontrolled\"",
              "description": "Sets what logic the component uses to determine vertical placement.\n'locktodefault' forces the default position\n'dynamic' decides placement based on available space\n'uncontrolled' does not control placement on the vertical axis"
            },
            {
              "kind": "method",
              "name": "verticalPositioningModeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "verticalDefaultPosition",
              "type": {
                "text": "VerticalPosition"
              },
              "privacy": "public",
              "default": "\"unset\"",
              "description": "The default vertical position of the region relative to the anchor element"
            },
            {
              "kind": "method",
              "name": "verticalDefaultPositionChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "verticalViewportLock",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the region remains in the viewport (ie. detaches from the anchor) on the vertical axis"
            },
            {
              "kind": "method",
              "name": "verticalViewportLockChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "verticalInset",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the region overlaps the anchor on the vertical axis"
            },
            {
              "kind": "method",
              "name": "verticalInsetChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "verticalThreshold",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "How short the space allocated to the default position has to be before the tallest area\nis selected for layout"
            },
            {
              "kind": "method",
              "name": "verticalThresholdChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "verticalScaling",
              "type": {
                "text": "AxisScalingMode"
              },
              "privacy": "public",
              "default": "\"content\"",
              "description": "Defines how the height of the region is calculated"
            },
            {
              "kind": "method",
              "name": "verticalScalingChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "fixedPlacement",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether the region is positioned using css \"position: fixed\".\nOtherwise the region uses \"position: absolute\".\nFixed placement allows the region to break out of parent containers,"
            },
            {
              "kind": "method",
              "name": "fixedPlacementChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "autoUpdateMode",
              "type": {
                "text": "AutoUpdateMode"
              },
              "privacy": "public",
              "default": "\"anchor\"",
              "description": "Defines what triggers the anchored region to revaluate positioning"
            },
            {
              "kind": "method",
              "name": "autoUpdateModeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prevMode",
                  "type": {
                    "text": "AutoUpdateMode"
                  }
                },
                {
                  "name": "newMode",
                  "type": {
                    "text": "AutoUpdateMode"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "anchorElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The HTML element being used as the anchor"
            },
            {
              "kind": "method",
              "name": "anchorElementChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "viewportElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The HTML element being used as the viewport"
            },
            {
              "kind": "method",
              "name": "viewportElementChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "verticalPosition",
              "type": {
                "text": "AnchoredRegionPositionLabel | undefined"
              },
              "privacy": "public",
              "description": "indicates the current horizontal position of the region"
            },
            {
              "kind": "field",
              "name": "horizontalPosition",
              "type": {
                "text": "AnchoredRegionPositionLabel | undefined"
              },
              "privacy": "public",
              "description": "indicates the current vertical position of the region"
            },
            {
              "kind": "field",
              "name": "translateX",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "description": "values to be applied to the component's transform on render"
            },
            {
              "kind": "field",
              "name": "translateY",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "regionWidth",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "description": "the span to be applied to the region on each axis"
            },
            {
              "kind": "field",
              "name": "regionHeight",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "resizeDetector",
              "type": {
                "text": "ResizeObserverClassDefinition | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "viewportRect",
              "type": {
                "text": "ClientRect | DOMRect | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "anchorRect",
              "type": {
                "text": "ClientRect | DOMRect | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "regionRect",
              "type": {
                "text": "ClientRect | DOMRect | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "baseHorizontalOffset",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "description": "base offsets between the positioner's base position and the anchor's"
            },
            {
              "kind": "field",
              "name": "baseVerticalOffset",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "pendingPositioningUpdate",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "pendingReset",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "currentDirection",
              "type": {
                "text": "Direction"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "regionVisible",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "forceUpdate",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "updateThreshold",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0.5"
            },
            {
              "kind": "field",
              "name": "intersectionService",
              "type": {
                "text": "IntersectionService"
              },
              "privacy": "private",
              "static": true,
              "default": "new IntersectionService()"
            },
            {
              "kind": "field",
              "name": "update",
              "privacy": "public",
              "description": "update position"
            },
            {
              "kind": "method",
              "name": "disconnectResizeDetector",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "destroys the instance's resize observer"
            },
            {
              "kind": "method",
              "name": "initializeResizeDetector",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "initializes the instance's resize observer"
            },
            {
              "kind": "method",
              "name": "updateForAttributeChange",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "react to attribute changes that don't require a reset"
            },
            {
              "kind": "method",
              "name": "initialize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "fully initializes the component"
            },
            {
              "kind": "method",
              "name": "requestReset",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Request a reset if there are currently no open requests"
            },
            {
              "kind": "method",
              "name": "setInitialState",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "sets the starting configuration for component internal values"
            },
            {
              "kind": "field",
              "name": "startObservers",
              "privacy": "private",
              "description": "starts observers"
            },
            {
              "kind": "field",
              "name": "requestPositionUpdates",
              "privacy": "private",
              "description": "get position updates"
            },
            {
              "kind": "field",
              "name": "stopObservers",
              "privacy": "private",
              "description": "stops observers"
            },
            {
              "kind": "field",
              "name": "getViewport",
              "privacy": "private",
              "description": "Gets the viewport element by id, or defaults to document root"
            },
            {
              "kind": "field",
              "name": "getAnchor",
              "privacy": "private",
              "description": "Gets the anchor element by id"
            },
            {
              "kind": "field",
              "name": "handleIntersection",
              "privacy": "private",
              "description": "Handle intersections"
            },
            {
              "kind": "field",
              "name": "applyIntersectionEntries",
              "privacy": "private",
              "description": "iterate through intersection entries and apply data"
            },
            {
              "kind": "field",
              "name": "updateRegionOffset",
              "privacy": "private",
              "description": "Update the offset values"
            },
            {
              "kind": "field",
              "name": "isRectDifferent",
              "privacy": "private",
              "description": "compare rects to see if there is enough change to justify a DOM update"
            },
            {
              "kind": "field",
              "name": "handleResize",
              "privacy": "private",
              "description": "Handle resize events"
            },
            {
              "kind": "field",
              "name": "reset",
              "privacy": "private",
              "description": "resets the component"
            },
            {
              "kind": "field",
              "name": "updateLayout",
              "privacy": "private",
              "description": "Recalculate layout related state values"
            },
            {
              "kind": "field",
              "name": "updateRegionStyle",
              "privacy": "private",
              "description": "Updates the style string applied to the region element as well as the css classes attached\nto the root element"
            },
            {
              "kind": "field",
              "name": "updatePositionClasses",
              "privacy": "private",
              "description": "Updates the css classes that reflect the current position of the element"
            },
            {
              "kind": "field",
              "name": "setHorizontalPosition",
              "privacy": "private",
              "description": "Get horizontal positioning state based on desired position"
            },
            {
              "kind": "field",
              "name": "setVerticalPosition",
              "privacy": "private",
              "description": "Set vertical positioning state based on desired position"
            },
            {
              "kind": "field",
              "name": "getPositioningOptions",
              "privacy": "private",
              "description": "Get available positions based on positioning mode"
            },
            {
              "kind": "field",
              "name": "getAvailableSpace",
              "privacy": "private",
              "description": "Get the space available for a particular relative position"
            },
            {
              "kind": "field",
              "name": "getNextRegionDimension",
              "privacy": "private",
              "description": "Get region dimensions"
            },
            {
              "kind": "field",
              "name": "startAutoUpdateEventListeners",
              "privacy": "private",
              "description": "starts event listeners that can trigger auto updating"
            },
            {
              "kind": "field",
              "name": "stopAutoUpdateEventListeners",
              "privacy": "private",
              "description": "stops event listeners that can trigger auto updating"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'loaded' event when the region is loaded and visible",
              "name": "loaded"
            },
            {
              "description": "Fires a custom 'positionchange' event when the position has changed",
              "name": "positionchange"
            }
          ],
          "attributes": [
            {
              "name": "anchor",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The HTML ID of the anchor element this region is positioned relative to",
              "fieldName": "anchor"
            },
            {
              "name": "viewport",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The HTML ID of the viewport element this region is positioned relative to",
              "fieldName": "viewport"
            },
            {
              "name": "horizontal-positioning-mode",
              "type": {
                "text": "AxisPositioningMode"
              },
              "default": "\"uncontrolled\"",
              "description": "Sets what logic the component uses to determine horizontal placement.\n'locktodefault' forces the default position\n'dynamic' decides placement based on available space\n'uncontrolled' does not control placement on the horizontal axis",
              "fieldName": "horizontalPositioningMode"
            },
            {
              "name": "horizontal-default-position",
              "type": {
                "text": "HorizontalPosition"
              },
              "default": "\"unset\"",
              "description": "The default horizontal position of the region relative to the anchor element",
              "fieldName": "horizontalDefaultPosition"
            },
            {
              "name": "horizontal-viewport-lock",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the region remains in the viewport (ie. detaches from the anchor) on the horizontal axis",
              "fieldName": "horizontalViewportLock"
            },
            {
              "name": "horizontal-inset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the region overlaps the anchor on the horizontal axis",
              "fieldName": "horizontalInset"
            },
            {
              "name": "horizontal-threshold",
              "type": {
                "text": "number"
              },
              "description": "How narrow the space allocated to the default position has to be before the widest area\nis selected for layout",
              "fieldName": "horizontalThreshold"
            },
            {
              "name": "horizontal-scaling",
              "type": {
                "text": "AxisScalingMode"
              },
              "default": "\"content\"",
              "description": "Defines how the width of the region is calculated",
              "fieldName": "horizontalScaling"
            },
            {
              "name": "vertical-positioning-mode",
              "type": {
                "text": "AxisPositioningMode"
              },
              "default": "\"uncontrolled\"",
              "description": "Sets what logic the component uses to determine vertical placement.\n'locktodefault' forces the default position\n'dynamic' decides placement based on available space\n'uncontrolled' does not control placement on the vertical axis",
              "fieldName": "verticalPositioningMode"
            },
            {
              "name": "vertical-default-position",
              "type": {
                "text": "VerticalPosition"
              },
              "default": "\"unset\"",
              "description": "The default vertical position of the region relative to the anchor element",
              "fieldName": "verticalDefaultPosition"
            },
            {
              "name": "vertical-viewport-lock",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the region remains in the viewport (ie. detaches from the anchor) on the vertical axis",
              "fieldName": "verticalViewportLock"
            },
            {
              "name": "vertical-inset",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the region overlaps the anchor on the vertical axis",
              "fieldName": "verticalInset"
            },
            {
              "name": "vertical-threshold",
              "type": {
                "text": "number"
              },
              "description": "How short the space allocated to the default position has to be before the tallest area\nis selected for layout",
              "fieldName": "verticalThreshold"
            },
            {
              "name": "vertical-scaling",
              "type": {
                "text": "AxisScalingMode"
              },
              "default": "\"content\"",
              "description": "Defines how the height of the region is calculated",
              "fieldName": "verticalScaling"
            },
            {
              "name": "fixed-placement",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the region is positioned using css \"position: fixed\".\nOtherwise the region uses \"position: absolute\".\nFixed placement allows the region to break out of parent containers,",
              "fieldName": "fixedPlacement"
            },
            {
              "name": "auto-update-mode",
              "type": {
                "text": "AutoUpdateMode"
              },
              "default": "\"anchor\"",
              "description": "Defines what triggers the anchored region to revaluate positioning",
              "fieldName": "autoUpdateMode"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AnchoredRegion",
          "declaration": {
            "name": "AnchoredRegion",
            "module": "src/anchored-region/anchored-region.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/avatar/avatar.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "avatarTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for {@link @microsoft/fast-foundation#Avatar} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "avatarTemplate",
          "declaration": {
            "name": "avatarTemplate",
            "module": "src/avatar/avatar.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/avatar/avatar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An Avatar Custom HTML Element",
          "name": "Avatar",
          "cssParts": [
            {
              "description": "The wrapping container for the avatar",
              "name": "backplate"
            },
            {
              "description": "The avatar link",
              "name": "link"
            },
            {
              "description": "The media slot",
              "name": "media"
            },
            {
              "description": "The default slot",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "Used for media such as an image",
              "name": "media"
            },
            {
              "description": "The default slot for avatar text, commonly a name or initials",
              "name": ""
            },
            {
              "description": "Used to provide a badge, such as a status badge",
              "name": "badge"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Indicates the Avatar should have a color fill."
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Indicates the Avatar should have a text color."
            },
            {
              "kind": "field",
              "name": "link",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Indicates the Avatar should have url link"
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "AvatarShape"
              },
              "privacy": "public",
              "description": "Indicates the Avatar shape should be. By default it will be set to \"circle\"."
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "fill",
              "type": {
                "text": "string"
              },
              "description": "Indicates the Avatar should have a color fill.",
              "fieldName": "fill"
            },
            {
              "name": "color",
              "type": {
                "text": "string"
              },
              "description": "Indicates the Avatar should have a text color.",
              "fieldName": "color"
            },
            {
              "name": "link",
              "type": {
                "text": "string"
              },
              "description": "Indicates the Avatar should have url link",
              "fieldName": "link"
            },
            {
              "name": "shape",
              "type": {
                "text": "AvatarShape"
              },
              "description": "Indicates the Avatar shape should be. By default it will be set to \"circle\".",
              "fieldName": "shape"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Avatar",
          "declaration": {
            "name": "Avatar",
            "module": "src/avatar/avatar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/badge/badge.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "badgeTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#Badge} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "badgeTemplate",
          "declaration": {
            "name": "badgeTemplate",
            "module": "src/badge/badge.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/badge/badge.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Badge Custom HTML Element.",
          "name": "Badge",
          "cssParts": [
            {
              "description": "The element representing the badge, which wraps the default slot",
              "name": "control"
            }
          ],
          "slots": [
            {
              "description": "The default slot for the badge",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Indicates the badge should have a filled style."
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Indicates the badge should have a filled style."
            },
            {
              "kind": "field",
              "name": "circular",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates the element should be circular"
            },
            {
              "kind": "field",
              "name": "generateBadgeStyle",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "fill",
              "type": {
                "text": "string"
              },
              "description": "Indicates the badge should have a filled style.",
              "fieldName": "fill"
            },
            {
              "name": "color",
              "type": {
                "text": "string"
              },
              "description": "Indicates the badge should have a filled style.",
              "fieldName": "color"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates the element should be circular",
              "fieldName": "circular"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Badge",
          "declaration": {
            "name": "Badge",
            "module": "src/badge/badge.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/breadcrumb/breadcrumb.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "breadcrumbTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#Breadcrumb} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "breadcrumbTemplate",
          "declaration": {
            "name": "breadcrumbTemplate",
            "module": "src/breadcrumb/breadcrumb.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/breadcrumb/breadcrumb.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Breadcrumb Custom HTML Element.",
          "name": "Breadcrumb",
          "cssParts": [
            {
              "description": "The element wrapping the slotted items",
              "name": "list"
            }
          ],
          "slots": [
            {
              "description": "The default slot for the breadcrumb items",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "slottedBreadcrumbItemsChanged",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "setItemSeparator",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "isLastNode",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findChildWithHref",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLElement | null"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Finds href on childnodes in the light DOM or shadow DOM.\nWe look in the shadow DOM because we insert an anchor when breadcrumb-item has an href."
            },
            {
              "kind": "method",
              "name": "setAriaCurrent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "isLastNode",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Sets ARIA Current for the current node\nIf child node with an anchor tag and with href is found then set aria-current to correct value for the child node,\notherwise apply aria-current to the host element, with an href"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Breadcrumb",
          "declaration": {
            "name": "Breadcrumb",
            "module": "src/breadcrumb/breadcrumb.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/breadcrumb-item/breadcrumb-item.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "breadcrumbItemTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(BreadcrumbItem:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "breadcrumbItemTemplate",
          "declaration": {
            "name": "breadcrumbItemTemplate",
            "module": "src/breadcrumb-item/breadcrumb-item.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/breadcrumb-item/breadcrumb-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Breadcrumb Item Custom HTML Element.",
          "name": "BreadcrumbItem",
          "superclass": {
            "name": "Anchor",
            "module": "/src/anchor/anchor.js"
          },
          "attributes": [
            {
              "name": "download",
              "type": {
                "text": "string"
              },
              "description": "Prompts the user to save the linked URL. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "download",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "description": "The URL the hyperlink references. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "href",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "description": "Hints at the language of the referenced resource. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "hreflang",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "name": "ping",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "ping",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "name": "referrerpolicy",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "referrerpolicy",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "rel",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "name": "target",
              "type": {
                "text": "\"_self\" | \"_blank\" | \"_parent\" | \"_top\""
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "target",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element  for more information.",
              "fieldName": "type",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Prompts the user to save the linked URL. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The URL the hyperlink references. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "hreflang",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Hints at the language of the referenced resource. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "ping",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "referrerpolicy",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "\"_self\" | \"_blank\" | \"_parent\" | \"_top\""
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "control",
              "type": {
                "text": "HTMLAnchorElement | undefined"
              },
              "privacy": "public",
              "description": "References the root element",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "handleUnsupportedDelegatesFocus",
              "privacy": "private",
              "description": "Overrides the focus call for where delegatesFocus is unsupported.\nThis check works for Chrome, Edge Chromium, FireFox, and Safari\nRelevant PR on the Firefox browser: https://phabricator.services.mozilla.com/D123858",
              "inheritedFrom": {
                "name": "Anchor",
                "module": "src/anchor/anchor.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BreadcrumbItem",
          "declaration": {
            "name": "BreadcrumbItem",
            "module": "src/breadcrumb-item/breadcrumb-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/button/button.form-associated.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/button/button.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "buttonTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(Button:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "buttonTemplate",
          "declaration": {
            "name": "buttonTemplate",
            "module": "src/button/button.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/button/button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Button Custom HTML Element. Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element }.",
          "name": "Button",
          "cssParts": [
            {
              "description": "The button element",
              "name": "control"
            },
            {
              "description": "The element wrapping button content",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided before the button content",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the button content",
              "name": "end"
            },
            {
              "description": "The default slot for button content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Determines if the element should receive document focus on page load."
            },
            {
              "kind": "field",
              "name": "formId",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The id of a form to associate the element to."
            },
            {
              "kind": "field",
              "name": "formaction",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details."
            },
            {
              "kind": "method",
              "name": "formactionChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "formenctype",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details."
            },
            {
              "kind": "method",
              "name": "formenctypeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "formmethod",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details."
            },
            {
              "kind": "method",
              "name": "formmethodChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "formnovalidate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details."
            },
            {
              "kind": "method",
              "name": "formnovalidateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "formtarget",
              "type": {
                "text": "\"_self\" | \"_blank\" | \"_parent\" | \"_top\""
              },
              "privacy": "public",
              "description": "See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details."
            },
            {
              "kind": "method",
              "name": "formtargetChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"submit\" | \"reset\" | \"button\""
              },
              "privacy": "public",
              "description": "The button type."
            },
            {
              "kind": "method",
              "name": "typeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "previous",
                  "type": {
                    "text": "\"submit\" | \"reset\" | \"button\" | void"
                  }
                },
                {
                  "name": "next",
                  "type": {
                    "text": "\"submit\" | \"reset\" | \"button\""
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "defaultSlottedContent",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "public",
              "description": "\nDefault slotted content"
            },
            {
              "kind": "method",
              "name": "validate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "{@inheritDoc (FormAssociated:interface).validate}"
            },
            {
              "kind": "field",
              "name": "handleSubmission",
              "privacy": "private",
              "description": "Submits the parent form"
            },
            {
              "kind": "field",
              "name": "handleFormReset",
              "privacy": "private",
              "description": "Resets the parent form"
            },
            {
              "kind": "field",
              "name": "control",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "handleUnsupportedDelegatesFocus",
              "privacy": "private",
              "description": "Overrides the focus call for where delegatesFocus is unsupported.\nThis check works for Chrome, Edge Chromium, FireFox, and Safari\nRelevant PR on the Firefox browser: https://phabricator.services.mozilla.com/D123858"
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "FormAssociatedButton",
                "module": "src/button/button.form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "Determines if the element should receive document focus on page load.",
              "fieldName": "autofocus"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "description": "The id of a form to associate the element to.",
              "fieldName": "formId"
            },
            {
              "name": "formaction",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
              "fieldName": "formaction"
            },
            {
              "name": "formenctype",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
              "fieldName": "formenctype"
            },
            {
              "name": "formmethod",
              "type": {
                "text": "string"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
              "fieldName": "formmethod"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
              "fieldName": "formnovalidate"
            },
            {
              "name": "formtarget",
              "type": {
                "text": "\"_self\" | \"_blank\" | \"_parent\" | \"_top\""
              },
              "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element for more details.",
              "fieldName": "formtarget"
            },
            {
              "name": "type",
              "type": {
                "text": "\"submit\" | \"reset\" | \"button\""
              },
              "description": "The button type.",
              "fieldName": "type"
            }
          ],
          "superclass": {
            "name": "FormAssociatedButton",
            "module": "/src/button/button.form-associated.js"
          }
        },
        {
          "kind": "class",
          "description": "Includes ARIA states and properties relating to the ARIA button role",
          "name": "DelegatesARIAButton",
          "members": [
            {
              "kind": "field",
              "name": "ariaExpanded",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "privacy": "public",
              "description": "See {@link https://www.w3.org/WAI/PF/aria/roles#button} for more information"
            },
            {
              "kind": "field",
              "name": "ariaPressed",
              "type": {
                "text": "\"true\" | \"false\" | \"mixed\" | string | null"
              },
              "privacy": "public",
              "description": "See {@link https://www.w3.org/WAI/PF/aria/roles#button} for more information"
            }
          ],
          "attributes": [
            {
              "name": "aria-expanded",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "description": "See https://www.w3.org/WAI/PF/aria/roles#button for more information",
              "fieldName": "ariaExpanded"
            },
            {
              "name": "aria-pressed",
              "type": {
                "text": "\"true\" | \"false\" | \"mixed\" | string | null"
              },
              "description": "See https://www.w3.org/WAI/PF/aria/roles#button for more information",
              "fieldName": "ariaPressed"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Button",
          "declaration": {
            "name": "Button",
            "module": "src/button/button.ts"
          }
        },
        {
          "kind": "js",
          "name": "DelegatesARIAButton",
          "declaration": {
            "name": "DelegatesARIAButton",
            "module": "src/button/button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/calendar/calendar.template.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CalendarTitleTemplate",
          "type": {
            "text": "ViewTemplate<Calendar>"
          },
          "default": "html`\n    <div\n        class=\"title\"\n        part=\"title\"\n        aria-label=\"${(x: Calendar) =>\n            x.dateFormatter.getDate(`${x.month}-2-${x.year}`, {\n                month: \"long\",\n                year: \"numeric\",\n            })}\"\n    >\n        <span part=\"month\">\n            ${(x: Calendar) => x.dateFormatter.getMonth(x.month)}\n        </span>\n        <span part=\"year\">${(x: Calendar) => x.dateFormatter.getYear(x.year)}</span>\n    </div>\n`",
          "description": "A basic Calendar title template that includes the month and year",
          "return": {
            "type": {
              "text": ""
            }
          },
          "privacy": "public"
        },
        {
          "kind": "function",
          "name": "calendarWeekdayTemplate",
          "parameters": [
            {
              "name": "context"
            }
          ],
          "description": "Calendar weekday label template",
          "return": {
            "type": {
              "text": ""
            }
          },
          "privacy": "public"
        },
        {
          "kind": "function",
          "name": "calendarCellTemplate",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "ElementDefinitionContext"
              },
              "description": "Element definition context for getting the cell tag for calendar-cell"
            },
            {
              "name": "todayString",
              "type": {
                "text": "string"
              },
              "description": "A string representation for todays date"
            }
          ],
          "description": "A calendar day template",
          "return": {
            "type": {
              "text": ""
            }
          },
          "privacy": "public"
        },
        {
          "kind": "function",
          "name": "calendarRowTemplate",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "ElementDefinitionContext"
              },
              "description": "Element definition context for getting the cell tag for calendar-cell"
            },
            {
              "name": "todayString",
              "type": {
                "text": "string"
              },
              "description": "A string representation for todays date"
            }
          ],
          "return": {
            "type": {
              "text": ""
            }
          },
          "privacy": "public"
        },
        {
          "kind": "function",
          "name": "calendarTemplate",
          "parameters": [
            {
              "name": "context",
              "description": "Element definition context for getting the cell tag for calendar-cell"
            },
            {
              "name": "definition",
              "description": "Foundation element definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(Calendar:class)} component.",
          "return": {
            "type": {
              "text": ""
            }
          },
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CalendarTitleTemplate",
          "declaration": {
            "name": "CalendarTitleTemplate",
            "module": "src/calendar/calendar.template.ts"
          }
        },
        {
          "kind": "js",
          "name": "calendarWeekdayTemplate",
          "declaration": {
            "name": "calendarWeekdayTemplate",
            "module": "src/calendar/calendar.template.ts"
          }
        },
        {
          "kind": "js",
          "name": "calendarCellTemplate",
          "declaration": {
            "name": "calendarCellTemplate",
            "module": "src/calendar/calendar.template.ts"
          }
        },
        {
          "kind": "js",
          "name": "calendarRowTemplate",
          "declaration": {
            "name": "calendarRowTemplate",
            "module": "src/calendar/calendar.template.ts"
          }
        },
        {
          "kind": "js",
          "name": "calendarTemplate",
          "declaration": {
            "name": "calendarTemplate",
            "module": "src/calendar/calendar.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/calendar/calendar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Calendar component",
          "name": "Calendar",
          "slots": [
            {
              "description": "The default slot for calendar content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dateFormatter",
              "type": {
                "text": "DateFormatter"
              },
              "privacy": "public",
              "default": "new DateFormatter()",
              "description": "date formatter utitlity for getting localized strings"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Readonly attribute for turning off data-grid"
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"en-US\"",
              "description": "String repesentation of the full locale including market, calendar type and numbering system"
            },
            {
              "kind": "method",
              "name": "localeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "month",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "Month to display"
            },
            {
              "kind": "field",
              "name": "year",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "Year of the month to display"
            },
            {
              "kind": "field",
              "name": "dayFormat",
              "type": {
                "text": "DayFormat"
              },
              "privacy": "public",
              "default": "\"numeric\"",
              "description": "Format style for the day"
            },
            {
              "kind": "method",
              "name": "dayFormatChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "weekdayFormat",
              "type": {
                "text": "WeekdayFormat"
              },
              "privacy": "public",
              "default": "\"short\"",
              "description": "Format style for the week day labels"
            },
            {
              "kind": "method",
              "name": "weekdayFormatChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "monthFormat",
              "type": {
                "text": "MonthFormat"
              },
              "privacy": "public",
              "default": "\"long\"",
              "description": "Format style for the month label"
            },
            {
              "kind": "method",
              "name": "monthFormatChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "yearFormat",
              "type": {
                "text": "YearFormat"
              },
              "privacy": "public",
              "default": "\"numeric\"",
              "description": "Format style for the year used in the title"
            },
            {
              "kind": "method",
              "name": "yearFormatChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "minWeeks",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "Minimum number of weeks to show for the month\nThis can be used to normalize the calendar view\n when changing or across multiple calendars"
            },
            {
              "kind": "field",
              "name": "disabledDates",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"\"",
              "description": "A list of dates that should be shown as disabled"
            },
            {
              "kind": "field",
              "name": "selectedDates",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"\"",
              "description": "A list of dates that should be shown as highlighted"
            },
            {
              "kind": "method",
              "name": "getMonthInfo",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "month",
                  "default": "this.month",
                  "type": {
                    "text": "number"
                  },
                  "description": "month of the calendar"
                },
                {
                  "name": "year",
                  "default": "this.year",
                  "type": {
                    "text": "number"
                  },
                  "description": "year of the calendar"
                }
              ],
              "description": "Gets data needed to render about a calendar month as well as the previous and next months"
            },
            {
              "kind": "method",
              "name": "getDays",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "info",
                  "default": "this.getMonthInfo()",
                  "type": {
                    "text": "CalendarInfo"
                  },
                  "description": "an object containing the information needed to render a calendar month"
                },
                {
                  "name": "minWeeks",
                  "default": "this.minWeeks",
                  "type": {
                    "text": "number"
                  },
                  "description": "minimum number of weeks to show"
                }
              ],
              "description": "A list of calendar days"
            },
            {
              "kind": "method",
              "name": "dateInString",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date | string"
                  },
                  "description": "A date objec that includes the day, month and year"
                },
                {
                  "name": "datesString",
                  "type": {
                    "text": "string"
                  },
                  "description": "a comma separated list of dates"
                }
              ],
              "description": "A helper function that checks if a date exists in a list of dates"
            },
            {
              "kind": "method",
              "name": "getDayClassNames",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "CalendarDateInfo"
                  },
                  "description": "date of the calendar cell"
                },
                {
                  "name": "todayString",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Creates a class string for the day container"
            },
            {
              "kind": "method",
              "name": "getWeekdayText",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "description": "Returns a list of weekday labels"
            },
            {
              "kind": "method",
              "name": "handleDateSelect",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "day",
                  "type": {
                    "text": "CalendarDateInfo"
                  }
                },
                {
                  "description": "Date cell",
                  "name": "date"
                }
              ],
              "description": "Emits the \"date-select\" event with the day, month and year."
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "Keyboard event"
                },
                {
                  "name": "date",
                  "type": {
                    "text": "CalendarDateInfo"
                  },
                  "description": "Date of the cell selected"
                }
              ],
              "description": "Handles keyboard events on a cell"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'dateselected' event when Enter is invoked via keyboard on a date",
              "name": "dateselected"
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Readonly attribute for turning off data-grid",
              "fieldName": "readonly"
            },
            {
              "name": "locale",
              "type": {
                "text": "string"
              },
              "default": "\"en-US\"",
              "description": "String repesentation of the full locale including market, calendar type and numbering system",
              "fieldName": "locale"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "Month to display",
              "fieldName": "month"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "Year of the month to display",
              "fieldName": "year"
            },
            {
              "name": "day-format",
              "type": {
                "text": "DayFormat"
              },
              "default": "\"numeric\"",
              "description": "Format style for the day",
              "fieldName": "dayFormat"
            },
            {
              "name": "weekday-format",
              "type": {
                "text": "WeekdayFormat"
              },
              "default": "\"short\"",
              "description": "Format style for the week day labels",
              "fieldName": "weekdayFormat"
            },
            {
              "name": "month-format",
              "type": {
                "text": "MonthFormat"
              },
              "default": "\"long\"",
              "description": "Format style for the month label",
              "fieldName": "monthFormat"
            },
            {
              "name": "year-format",
              "type": {
                "text": "YearFormat"
              },
              "default": "\"numeric\"",
              "description": "Format style for the year used in the title",
              "fieldName": "yearFormat"
            },
            {
              "name": "min-weeks",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Minimum number of weeks to show for the month\nThis can be used to normalize the calendar view\n when changing or across multiple calendars",
              "fieldName": "minWeeks"
            },
            {
              "name": "disabled-dates",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "A list of dates that should be shown as disabled",
              "fieldName": "disabledDates"
            },
            {
              "name": "selected-dates",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "A list of dates that should be shown as highlighted",
              "fieldName": "selectedDates"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Calendar",
          "declaration": {
            "name": "Calendar",
            "module": "src/calendar/calendar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/calendar/date-formatter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Date formatting utility",
          "name": "DateFormatter",
          "members": [
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Localization settings to use for formatting"
            },
            {
              "kind": "field",
              "name": "dayFormat",
              "type": {
                "text": "DayFormat"
              },
              "privacy": "public",
              "default": "\"numeric\"",
              "description": "Formatting for the day"
            },
            {
              "kind": "field",
              "name": "weekdayFormat",
              "type": {
                "text": "WeekdayFormat"
              },
              "privacy": "public",
              "default": "\"long\"",
              "description": "Formatting for the weekday labels"
            },
            {
              "kind": "field",
              "name": "monthFormat",
              "type": {
                "text": "MonthFormat"
              },
              "privacy": "public",
              "default": "\"long\"",
              "description": "Formatting for the month"
            },
            {
              "kind": "field",
              "name": "yearFormat",
              "type": {
                "text": "YearFormat"
              },
              "privacy": "public",
              "default": "\"numeric\"",
              "description": "Formatting for the year"
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date"
              },
              "privacy": "public",
              "default": "new Date()",
              "description": "Date used for formatting"
            },
            {
              "kind": "method",
              "name": "getDateObject",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "{ day: number; month: number; year: number } | string | Date"
                  },
                  "description": "The date as an object, string or Date insance"
                }
              ],
              "description": "Helper function to make sure that the DateFormatter is working with an instance of Date"
            },
            {
              "kind": "method",
              "name": "getDate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "default": "this.date",
                  "type": {
                    "text": "{ day: number; month: number; year: number } | string | Date"
                  },
                  "description": "a valide date as either a Date, string, objec or a DateFormatter"
                },
                {
                  "name": "format",
                  "default": "{\n            weekday: this.weekdayFormat,\n            month: this.monthFormat,\n            day: this.dayFormat,\n            year: this.yearFormat,\n        }",
                  "type": {
                    "text": "Intl.DateTimeFormatOptions"
                  },
                  "description": "The formatting for the string"
                },
                {
                  "name": "locale",
                  "default": "this.locale",
                  "type": {
                    "text": "string"
                  },
                  "description": "locale data used for formatting"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getDay",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "day",
                  "default": "this.date.getDate()",
                  "type": {
                    "text": "number"
                  },
                  "description": "Day to localize"
                },
                {
                  "name": "format",
                  "default": "this.dayFormat",
                  "type": {
                    "text": "DayFormat"
                  },
                  "description": "The formatting for the day"
                },
                {
                  "name": "locale",
                  "default": "this.locale",
                  "type": {
                    "text": "string"
                  },
                  "description": "The locale data used for formatting"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getMonth",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "month",
                  "default": "this.date.getMonth() + 1",
                  "type": {
                    "text": "number"
                  },
                  "description": "The month to localize"
                },
                {
                  "name": "format",
                  "default": "this.monthFormat",
                  "type": {
                    "text": "MonthFormat"
                  },
                  "description": "The formatting for the month"
                },
                {
                  "name": "locale",
                  "default": "this.locale",
                  "type": {
                    "text": "string"
                  },
                  "description": "The locale data used for formatting"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getYear",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "year",
                  "default": "this.date.getFullYear()",
                  "type": {
                    "text": "number"
                  },
                  "description": "The year to localize"
                },
                {
                  "name": "format",
                  "default": "this.yearFormat",
                  "type": {
                    "text": "YearFormat"
                  },
                  "description": "The formatting for the year"
                },
                {
                  "name": "locale",
                  "default": "this.locale",
                  "type": {
                    "text": "string"
                  },
                  "description": "The locale data used for formatting"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getWeekday",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "weekday",
                  "default": "0",
                  "type": {
                    "text": "number"
                  },
                  "description": "The number of the weekday, defaults to Sunday"
                },
                {
                  "name": "format",
                  "default": "this.weekdayFormat",
                  "type": {
                    "text": "WeekdayFormat"
                  },
                  "description": "The formatting for the weekday label"
                },
                {
                  "name": "locale",
                  "default": "this.locale",
                  "type": {
                    "text": "string"
                  },
                  "description": "The locale data used for formatting"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getWeekdays",
              "privacy": "public",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "format",
                  "default": "this.weekdayFormat",
                  "type": {
                    "text": "WeekdayFormat"
                  },
                  "description": "The formatting for the weekdays"
                },
                {
                  "name": "locale",
                  "default": "this.locale",
                  "type": {
                    "text": "string"
                  },
                  "description": "The locale data used for formatting"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DateFormatter",
          "declaration": {
            "name": "DateFormatter",
            "module": "src/calendar/date-formatter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/card/card.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "cardTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#Card} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cardTemplate",
          "declaration": {
            "name": "cardTemplate",
            "module": "src/card/card.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/card/card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An Card Custom HTML Element.",
          "name": "Card",
          "slots": [
            {
              "description": "The default slot for the card content",
              "name": ""
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Card",
          "declaration": {
            "name": "Card",
            "module": "src/card/card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/checkbox/checkbox.form-associated.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/checkbox/checkbox.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "checkboxTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(Checkbox:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "checkboxTemplate",
          "declaration": {
            "name": "checkboxTemplate",
            "module": "src/checkbox/checkbox.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/checkbox/checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Checkbox Custom HTML Element. Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#checkbox | ARIA checkbox }.",
          "name": "Checkbox",
          "cssParts": [
            {
              "description": "The element representing the visual checkbox control",
              "name": "control"
            },
            {
              "description": "The label",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The checked indicator",
              "name": "checked-indicator"
            },
            {
              "description": "The indeterminate indicator",
              "name": "indeterminate-indicator"
            },
            {
              "description": "The default slot for the label",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information."
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The indeterminate state of the control"
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "FormAssociatedCheckbox",
                "module": "src/checkbox/checkbox.form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emits a custom change event when the checked state changes",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly"
            }
          ],
          "superclass": {
            "name": "FormAssociatedCheckbox",
            "module": "/src/checkbox/checkbox.form-associated.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Checkbox",
          "declaration": {
            "name": "Checkbox",
            "module": "src/checkbox/checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/combobox/combobox.form-associated.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/combobox/combobox.options.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ComboboxAutocomplete",
          "type": {
            "text": "{\n    inline: \"inline\",\n    list: \"list\",\n    both: \"both\",\n    none: \"none\",\n}"
          },
          "default": "{\n    inline: \"inline\",\n    list: \"list\",\n    both: \"both\",\n    none: \"none\",\n}",
          "description": "Autocomplete values for combobox.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ComboboxAutocomplete",
          "declaration": {
            "name": "ComboboxAutocomplete",
            "module": "src/combobox/combobox.options.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/combobox/combobox.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "comboboxTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(Combobox:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "comboboxTemplate",
          "declaration": {
            "name": "comboboxTemplate",
            "module": "src/combobox/combobox.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/combobox/combobox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Combobox Custom HTML Element. Implements the {@link https://w3c.github.io/aria-practices/#combobox | ARIA combobox }.",
          "name": "Combobox",
          "cssParts": [
            {
              "description": "The wrapper element containing the input area, including start and end",
              "name": "control"
            },
            {
              "description": "The input element representing the selected value",
              "name": "selected-value"
            },
            {
              "description": "The element wrapping the indicator slot",
              "name": "indicator"
            },
            {
              "description": "The wrapper for the listbox slotted options",
              "name": "listbox"
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided before the input",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the input",
              "name": "end"
            },
            {
              "description": "Used to replace the input element representing the combobox",
              "name": "control"
            },
            {
              "description": "The visual indicator representing the expanded state",
              "name": "indicator"
            },
            {
              "description": "The default slot for the options",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "ComboboxAutocomplete | undefined"
              },
              "description": "The autocomplete attribute.",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "filteredOptions",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "The collection of currently filtered options."
            },
            {
              "kind": "method",
              "name": "validate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "{@inheritDoc (FormAssociated:interface).validate}"
            },
            {
              "kind": "field",
              "name": "isAutocompleteInline",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isAutocompleteList",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isAutocompleteBoth",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The open attribute."
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "description": "The list of options.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user."
            },
            {
              "kind": "field",
              "name": "positionAttribute",
              "type": {
                "text": "SelectPosition | undefined"
              },
              "privacy": "public",
              "description": "The placement for the listbox when the combobox is open."
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "SelectPosition | undefined"
              },
              "privacy": "public",
              "description": "The current state of the calculated position of the listbox."
            },
            {
              "kind": "method",
              "name": "positionChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "SelectPosition | undefined"
                  }
                },
                {
                  "name": "next",
                  "type": {
                    "text": "SelectPosition | undefined"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value property."
            },
            {
              "kind": "method",
              "name": "filterOptions",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Filter available options by text value."
            },
            {
              "kind": "method",
              "name": "setPositioning",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Calculate and apply listbox positioning based on available viewport space.",
              "parameters": [
                {
                  "description": "direction to force the listbox to display",
                  "name": "force"
                }
              ]
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "FormAssociatedCombobox",
                "module": "src/combobox/combobox.form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "length",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The number of options.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeAheadExpired",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the listbox.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "-1",
              "description": "The index of the selected option.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "A collection of the selected options.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "slottedOptionFilter",
              "privacy": "public",
              "static": true,
              "description": "A static filter to include only selectable options.",
              "parameters": [
                {
                  "description": "element to filter",
                  "name": "n"
                }
              ],
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectFirstOption",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Moves focus to the first selectable option.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "public",
              "description": "Sets an option as selected and gives it focus.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'change' event when the value updates",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "autocomplete",
              "type": {
                "text": "ComboboxAutocomplete | undefined"
              },
              "description": "The autocomplete attribute.",
              "fieldName": "autocomplete"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The open attribute.",
              "fieldName": "open"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "fieldName": "placeholder"
            },
            {
              "name": "position",
              "type": {
                "text": "SelectPosition | undefined"
              },
              "description": "The placement for the listbox when the combobox is open.",
              "fieldName": "positionAttribute"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "The disabled state of the listbox.",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormAssociatedCombobox",
            "module": "/src/combobox/combobox.form-associated.js"
          }
        },
        {
          "kind": "class",
          "description": "Includes ARIA states and properties relating to the ARIA combobox role.",
          "name": "DelegatesARIACombobox",
          "members": [
            {
              "kind": "field",
              "name": "ariaAutoComplete",
              "type": {
                "text": "\"inline\" | \"list\" | \"both\" | \"none\" | string | null"
              },
              "privacy": "public",
              "description": "See {@link https://www.w3.org/TR/wai-aria-1.2/#aria-autocomplete} for more information."
            },
            {
              "kind": "field",
              "name": "ariaControls",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "See {@link https://www.w3.org/TR/wai-aria-1.2/#aria-controls} for more information."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Combobox",
          "declaration": {
            "name": "Combobox",
            "module": "src/combobox/combobox.ts"
          }
        },
        {
          "kind": "js",
          "name": "DelegatesARIACombobox",
          "declaration": {
            "name": "DelegatesARIACombobox",
            "module": "src/combobox/combobox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/data-grid/data-grid-cell.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "dataGridCellTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "Generates a template for the {@link @microsoft/fast-foundation#DataGridCell} component using the provided prefix.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dataGridCellTemplate",
          "declaration": {
            "name": "dataGridCellTemplate",
            "module": "src/data-grid/data-grid-cell.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/data-grid/data-grid-cell.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Data Grid Cell Custom HTML Element.",
          "name": "DataGridCell",
          "slots": [
            {
              "description": "The default slot for cell contents.  The \"cell contents template\" renders here.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "cellType",
              "type": {
                "text": "DataGridCellTypes"
              },
              "privacy": "public",
              "description": "The type of cell"
            },
            {
              "kind": "method",
              "name": "cellTypeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "gridColumn",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The column index of the cell.\nThis will be applied to the css grid-column-index value\napplied to the cell"
            },
            {
              "kind": "method",
              "name": "gridColumnChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowData",
              "type": {
                "text": "object | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The base data for the parent row"
            },
            {
              "kind": "field",
              "name": "columnDefinition",
              "type": {
                "text": "ColumnDefinition | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The base data for the column"
            },
            {
              "kind": "method",
              "name": "columnDefinitionChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "ColumnDefinition | null"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "ColumnDefinition | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "isActiveCell",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "customCellView",
              "type": {
                "text": "HTMLView | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "method",
              "name": "handleFocusin",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocusout",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateCellView",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "disconnectCellView",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "updateCellStyle",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'cell-focused' event when focus is on the cell or its contents",
              "name": "cell-focused"
            }
          ],
          "attributes": [
            {
              "name": "cell-type",
              "type": {
                "text": "DataGridCellTypes"
              },
              "description": "The type of cell",
              "fieldName": "cellType"
            },
            {
              "name": "grid-column",
              "type": {
                "text": "string"
              },
              "description": "The column index of the cell.\nThis will be applied to the css grid-column-index value\napplied to the cell",
              "fieldName": "gridColumn"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DataGridCellTypes",
          "declaration": {
            "name": "DataGridCellTypes",
            "module": "src/data-grid/data-grid-cell.ts"
          }
        },
        {
          "kind": "js",
          "name": "DataGridCell",
          "declaration": {
            "name": "DataGridCell",
            "module": "src/data-grid/data-grid-cell.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/data-grid/data-grid-row.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "dataGridRowTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "Generates a template for the {@link @microsoft/fast-foundation#DataGridRow} component using the provided prefix.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dataGridRowTemplate",
          "declaration": {
            "name": "dataGridRowTemplate",
            "module": "src/data-grid/data-grid-row.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/data-grid/data-grid-row.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Data Grid Row Custom HTML Element.",
          "name": "DataGridRow",
          "slots": [
            {
              "description": "The default slot for custom cell elements",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "gridTemplateColumns",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "String that gets applied to the the css gridTemplateColumns attribute for the row"
            },
            {
              "kind": "method",
              "name": "gridTemplateColumnsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowType",
              "type": {
                "text": "DataGridRowTypes"
              },
              "privacy": "public",
              "description": "The type of row"
            },
            {
              "kind": "method",
              "name": "rowTypeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowData",
              "type": {
                "text": "object | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The base data for this row"
            },
            {
              "kind": "method",
              "name": "rowDataChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "columnDefinitions",
              "type": {
                "text": "ColumnDefinition[] | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The column definitions of the row"
            },
            {
              "kind": "field",
              "name": "cellItemTemplate",
              "type": {
                "text": "ViewTemplate | undefined"
              },
              "privacy": "public",
              "description": "The template used to render cells in generated rows."
            },
            {
              "kind": "method",
              "name": "cellItemTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "headerCellItemTemplate",
              "type": {
                "text": "ViewTemplate | undefined"
              },
              "privacy": "public",
              "description": "The template used to render header cells in generated rows."
            },
            {
              "kind": "method",
              "name": "headerCellItemTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowIndex",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The index of the row in the parent grid.\nThis is typically set programmatically by the parent grid."
            },
            {
              "kind": "field",
              "name": "cellsRepeatBehavior",
              "type": {
                "text": "RepeatBehavior | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "cellsPlaceholder",
              "type": {
                "text": "Node | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "refocusOnLoad",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "handleFocusout",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleCellFocus",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleKeydown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateItemTemplate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "updateRowStyle",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'row-focused' event when focus is on an element (usually a cell or its contents) in the row",
              "name": "row-focused"
            }
          ],
          "attributes": [
            {
              "name": "grid-template-columns",
              "type": {
                "text": "string"
              },
              "description": "String that gets applied to the the css gridTemplateColumns attribute for the row",
              "fieldName": "gridTemplateColumns"
            },
            {
              "name": "row-type",
              "type": {
                "text": "DataGridRowTypes"
              },
              "description": "The type of row",
              "fieldName": "rowType"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DataGridRow",
          "declaration": {
            "name": "DataGridRow",
            "module": "src/data-grid/data-grid-row.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/data-grid/data-grid.options.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "GenerateHeaderOptions",
          "type": {
            "text": "{\n    none: \"none\",\n    default: \"default\",\n    sticky: \"sticky\",\n}"
          },
          "default": "{\n    none: \"none\",\n    default: \"default\",\n    sticky: \"sticky\",\n}",
          "description": "Enumerates the data grid auto generated header options\ndefault option generates a non-sticky header row",
          "privacy": "public"
        },
        {
          "kind": "variable",
          "name": "DataGridCellTypes",
          "type": {
            "text": "{\n    default: \"default\",\n    columnHeader: \"columnheader\",\n    rowHeader: \"rowheader\",\n}"
          },
          "default": "{\n    default: \"default\",\n    columnHeader: \"columnheader\",\n    rowHeader: \"rowheader\",\n}",
          "description": "Enumerates possible data grid cell types.",
          "privacy": "public"
        },
        {
          "kind": "variable",
          "name": "DataGridRowTypes",
          "type": {
            "text": "{\n    default: \"default\",\n    header: \"header\",\n    stickyHeader: \"sticky-header\",\n}"
          },
          "default": "{\n    default: \"default\",\n    header: \"header\",\n    stickyHeader: \"sticky-header\",\n}",
          "description": "Enumerates possible data grid row types",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "GenerateHeaderOptions",
          "declaration": {
            "name": "GenerateHeaderOptions",
            "module": "src/data-grid/data-grid.options.ts"
          }
        },
        {
          "kind": "js",
          "name": "DataGridCellTypes",
          "declaration": {
            "name": "DataGridCellTypes",
            "module": "src/data-grid/data-grid.options.ts"
          }
        },
        {
          "kind": "js",
          "name": "DataGridRowTypes",
          "declaration": {
            "name": "DataGridRowTypes",
            "module": "src/data-grid/data-grid.options.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/data-grid/data-grid.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "dataGridTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "Generates a template for the {@link @microsoft/fast-foundation#DataGrid} component using the provided prefix.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dataGridTemplate",
          "declaration": {
            "name": "dataGridTemplate",
            "module": "src/data-grid/data-grid.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/data-grid/data-grid.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Data Grid Custom HTML Element.",
          "name": "DataGrid",
          "slots": [
            {
              "description": "The default slot for custom row elements",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "generateColumns",
              "privacy": "public",
              "static": true,
              "description": "generates a basic column definition by examining sample row data"
            },
            {
              "kind": "method",
              "name": "generateTemplateColumns",
              "privacy": "private",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "columnDefinitions",
                  "type": {
                    "text": "ColumnDefinition[]"
                  }
                }
              ],
              "description": "generates a gridTemplateColumns based on columndata array"
            },
            {
              "kind": "field",
              "name": "noTabbing",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "When true the component will not add itself to the tab queue.\nDefault is false."
            },
            {
              "kind": "method",
              "name": "noTabbingChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "generateHeader",
              "type": {
                "text": "GenerateHeaderOptions"
              },
              "privacy": "public",
              "description": "Whether the grid should automatically generate a header row and its type"
            },
            {
              "kind": "method",
              "name": "generateHeaderChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "gridTemplateColumns",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "String that gets applied to the the css gridTemplateColumns attribute of child rows"
            },
            {
              "kind": "method",
              "name": "gridTemplateColumnsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowsData",
              "type": {
                "text": "object[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "The data being displayed in the grid"
            },
            {
              "kind": "method",
              "name": "rowsDataChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "columnDefinitions",
              "type": {
                "text": "ColumnDefinition[] | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "The column definitions of the grid"
            },
            {
              "kind": "method",
              "name": "columnDefinitionsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowItemTemplate",
              "type": {
                "text": "ViewTemplate"
              },
              "privacy": "public",
              "description": "The template to use for the programmatic generation of rows"
            },
            {
              "kind": "field",
              "name": "cellItemTemplate",
              "type": {
                "text": "ViewTemplate | undefined"
              },
              "privacy": "public",
              "description": "The template used to render cells in generated rows."
            },
            {
              "kind": "field",
              "name": "headerCellItemTemplate",
              "type": {
                "text": "ViewTemplate | undefined"
              },
              "privacy": "public",
              "description": "The template used to render header cells in generated rows."
            },
            {
              "kind": "method",
              "name": "headerCellItemTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "focusRowIndex",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The index of the row that will receive focus the next time the\ngrid is focused. This value changes as focus moves to different\nrows within the grid.  Changing this value when focus is already\nwithin the grid moves focus to the specified row."
            },
            {
              "kind": "method",
              "name": "focusRowIndexChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "focusColumnIndex",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The index of the column that will receive focus the next time the\ngrid is focused. This value changes as focus moves to different rows\nwithin the grid.  Changing this value when focus is already within\nthe grid moves focus to the specified column."
            },
            {
              "kind": "method",
              "name": "focusColumnIndexChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowElementTag",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Set by the component templates."
            },
            {
              "kind": "field",
              "name": "rowsRepeatBehavior",
              "type": {
                "text": "RepeatBehavior | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rowsPlaceholder",
              "type": {
                "text": "Node | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "generatedHeader",
              "type": {
                "text": "DataGridRow | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "isUpdatingFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "pendingFocusUpdate",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "observer",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "rowindexUpdateQueued",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "columnDefinitionsStale",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "generatedGridTemplateColumns",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "\"\""
            },
            {
              "kind": "field",
              "name": "focusOnCell",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "queueFocusUpdate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateFocus",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "toggleGeneratedHeader",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "onChildListChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "queueRowIndexUpdate",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "updateRowIndexes",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "no-tabbing",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true the component will not add itself to the tab queue.\nDefault is false.",
              "fieldName": "noTabbing"
            },
            {
              "name": "generate-header",
              "type": {
                "text": "GenerateHeaderOptions"
              },
              "description": "Whether the grid should automatically generate a header row and its type",
              "fieldName": "generateHeader"
            },
            {
              "name": "grid-template-columns",
              "type": {
                "text": "string"
              },
              "description": "String that gets applied to the the css gridTemplateColumns attribute of child rows",
              "fieldName": "gridTemplateColumns"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DataGridRowTypes",
          "declaration": {
            "name": "DataGridRowTypes",
            "module": "src/data-grid/data-grid.ts"
          }
        },
        {
          "kind": "js",
          "name": "GenerateHeaderOptions",
          "declaration": {
            "name": "GenerateHeaderOptions",
            "module": "src/data-grid/data-grid.ts"
          }
        },
        {
          "kind": "js",
          "name": "DataGrid",
          "declaration": {
            "name": "DataGrid",
            "module": "src/data-grid/data-grid.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/design-system/component-presentation.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ComponentPresentation",
          "description": "An API gateway to component presentation features.",
          "privacy": "public"
        },
        {
          "kind": "class",
          "description": "The default implementation of ComponentPresentation, used by FoundationElement.",
          "name": "DefaultComponentPresentation",
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | null"
              },
              "privacy": "public",
              "description": "The styles to apply to the element."
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | null"
              },
              "privacy": "public",
              "description": "The template to apply to the element."
            },
            {
              "kind": "method",
              "name": "applyTo",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "FASTElement"
                  },
                  "description": "The element to apply the presentation details to."
                }
              ],
              "description": "Applies the presentation details to the specified element.",
              "privacy": "public"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ComponentPresentation",
          "declaration": {
            "name": "ComponentPresentation",
            "module": "src/design-system/component-presentation.ts"
          }
        },
        {
          "kind": "js",
          "name": "DefaultComponentPresentation",
          "declaration": {
            "name": "DefaultComponentPresentation",
            "module": "src/design-system/component-presentation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/design-system/design-system.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ElementDisambiguation",
          "description": "Indicates what to do with an ambiguous (duplicate) element.",
          "privacy": "public"
        },
        {
          "kind": "variable",
          "name": "DesignSystem",
          "description": "An API gateway to design system features.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ElementDisambiguation",
          "declaration": {
            "name": "ElementDisambiguation",
            "module": "src/design-system/design-system.ts"
          }
        },
        {
          "kind": "js",
          "name": "DesignSystem",
          "declaration": {
            "name": "DesignSystem",
            "module": "src/design-system/design-system.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/design-system/registration-context.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/design-token/custom-property-manager.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "defaultElement"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "defaultElement",
          "declaration": {
            "name": "defaultElement",
            "module": "src/design-token/custom-property-manager.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/design-token/design-token.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "DesignToken",
          "description": "Factory object for creating {@link (DesignToken:interface)} instances.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DesignToken",
          "declaration": {
            "name": "DesignToken",
            "module": "src/design-token/design-token.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/design-token/interfaces.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/dialog/dialog.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "dialogTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#Dialog} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dialogTemplate",
          "declaration": {
            "name": "dialogTemplate",
            "module": "src/dialog/dialog.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/dialog/dialog.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Switch Custom HTML Element. Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#dialog | ARIA dialog }.",
          "name": "Dialog",
          "cssParts": [
            {
              "description": "A wrapping element used to center the dialog and position the modal overlay",
              "name": "positioning-region"
            },
            {
              "description": "The modal dialog overlay",
              "name": "overlay"
            },
            {
              "description": "The dialog element",
              "name": "control"
            }
          ],
          "slots": [
            {
              "description": "The default slot for the dialog content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "modal",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Indicates the element is modal. When modal, user mouse interaction will be limited to the contents of the element by a modal\noverlay.  Clicks on the overlay will cause the dialog to emit a \"dismiss\" event."
            },
            {
              "kind": "field",
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The hidden state of the element."
            },
            {
              "kind": "field",
              "name": "trapFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Indicates that the dialog should trap focus."
            },
            {
              "kind": "field",
              "name": "trapFocusChanged",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "ariaDescribedby",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The id of the element describing the dialog."
            },
            {
              "kind": "field",
              "name": "ariaLabelledby",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The id of the element labeling the dialog."
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The label surfaced to assistive technologies."
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "The method to show the dialog."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "The method to hide the dialog."
            },
            {
              "kind": "field",
              "name": "handleDocumentKeydown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleDocumentFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleTabKeyDown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "getTabQueueBounds",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "focusFirstElement",
              "privacy": "private",
              "description": "focus on first element of tab queue"
            },
            {
              "kind": "field",
              "name": "shouldForceFocus",
              "privacy": "private",
              "description": "we should only focus if focus has not already been brought to the dialog"
            },
            {
              "kind": "field",
              "name": "shouldTrapFocus",
              "privacy": "private",
              "description": "we should we be active trapping focus"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'cancel' event when the modal overlay is clicked",
              "name": "cancel"
            },
            {
              "description": "Fires a custom 'close' event when the dialog is hidden",
              "name": "close"
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Indicates the element is modal. When modal, user mouse interaction will be limited to the contents of the element by a modal\noverlay.  Clicks on the overlay will cause the dialog to emit a \"dismiss\" event.",
              "fieldName": "modal"
            },
            {
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The hidden state of the element.",
              "fieldName": "hidden"
            },
            {
              "name": "trap-focus",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Indicates that the dialog should trap focus.",
              "fieldName": "trapFocus"
            },
            {
              "name": "aria-describedby",
              "type": {
                "text": "string"
              },
              "description": "The id of the element describing the dialog.",
              "fieldName": "ariaDescribedby"
            },
            {
              "name": "aria-labelledby",
              "type": {
                "text": "string"
              },
              "description": "The id of the element labeling the dialog.",
              "fieldName": "ariaLabelledby"
            },
            {
              "name": "aria-label",
              "type": {
                "text": "string"
              },
              "description": "The label surfaced to assistive technologies.",
              "fieldName": "ariaLabel"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Dialog",
          "declaration": {
            "name": "Dialog",
            "module": "src/dialog/dialog.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/directives/reflect-attributes.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "reflectAttributes",
          "return": {
            "type": {
              "text": "CaptureType<T>"
            }
          },
          "parameters": [
            {
              "name": "attributes",
              "type": {
                "text": "string[]"
              },
              "description": "The attributes to reflect"
            }
          ],
          "description": "Reflects attributes from the host element to the target element of the directive."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "reflectAttributes",
          "declaration": {
            "name": "reflectAttributes",
            "module": "src/directives/reflect-attributes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/disclosure/disclosure.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "disclosureTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#Disclosure} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "disclosureTemplate",
          "declaration": {
            "name": "disclosureTemplate",
            "module": "src/disclosure/disclosure.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/disclosure/disclosure.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Disclosure Custom HTML Element. Based largely on the {@link https://w3c.github.io/aria-practices/#disclosure | disclosure element }.",
          "name": "Disclosure",
          "slots": [
            {
              "description": "Content which can be provided before the summary content",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the summary content",
              "name": "end"
            },
            {
              "description": "The summary content",
              "name": "title"
            },
            {
              "description": "The default slot for the disclosure content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Determines if the element should show the extra content or not."
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Invoker title"
            },
            {
              "kind": "method",
              "name": "show",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Show extra content."
            },
            {
              "kind": "method",
              "name": "hide",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Hide extra content."
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggle the current(expanded/collapsed) state."
            },
            {
              "kind": "method",
              "name": "setup",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Register listener and set default disclosure mode"
            },
            {
              "kind": "method",
              "name": "onToggle",
              "privacy": "protected",
              "description": "Update the aria attr and fire `toggle` event"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "fires a toggle event when the summary is toggled",
              "name": "toggle"
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "Determines if the element should show the extra content or not.",
              "fieldName": "expanded"
            },
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "description": "Invoker title",
              "fieldName": "title"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Disclosure",
          "declaration": {
            "name": "Disclosure",
            "module": "src/disclosure/disclosure.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/divider/divider.options.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "DividerRole",
          "type": {
            "text": "{\n    /**\n     * The divider semantically separates content\n     */\n    separator: \"separator\",\n\n    /**\n     * The divider has no semantic value and is for visual presentation only.\n     */\n    presentation: \"presentation\",\n}"
          },
          "default": "{\n    /**\n     * The divider semantically separates content\n     */\n    separator: \"separator\",\n\n    /**\n     * The divider has no semantic value and is for visual presentation only.\n     */\n    presentation: \"presentation\",\n}",
          "description": "Divider roles",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DividerRole",
          "declaration": {
            "name": "DividerRole",
            "module": "src/divider/divider.options.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/divider/divider.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "dividerTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#Divider} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "dividerTemplate",
          "declaration": {
            "name": "dividerTemplate",
            "module": "src/divider/divider.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/divider/divider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Divider Custom HTML Element. Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#separator | ARIA separator } or {@link https://www.w3.org/TR/wai-aria-1.1/#presentation | ARIA presentation}.",
          "name": "Divider",
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "DividerRole"
              },
              "privacy": "public",
              "description": "The role of the element."
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "privacy": "public",
              "description": "The orientation of the divider."
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "DividerRole"
              },
              "description": "The role of the element.",
              "fieldName": "role"
            },
            {
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "description": "The orientation of the divider.",
              "fieldName": "orientation"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DividerRole",
          "declaration": {
            "name": "DividerRole",
            "module": "src/divider/divider.ts"
          }
        },
        {
          "kind": "js",
          "name": "Divider",
          "declaration": {
            "name": "Divider",
            "module": "src/divider/divider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/flipper/flipper.options.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FlipperDirection",
          "type": {
            "text": "{\n    next: \"next\",\n    previous: \"previous\",\n}"
          },
          "default": "{\n    next: \"next\",\n    previous: \"previous\",\n}",
          "description": "The direction options for flipper.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FlipperDirection",
          "declaration": {
            "name": "FlipperDirection",
            "module": "src/flipper/flipper.options.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/flipper/flipper.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "flipperTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#Flipper} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "flipperTemplate",
          "declaration": {
            "name": "flipperTemplate",
            "module": "src/flipper/flipper.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/flipper/flipper.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Flipper Custom HTML Element.\nFlippers are a form of button that implies directional content navigation, such as in a carousel.",
          "name": "Flipper",
          "cssParts": [
            {
              "description": "Wraps the next flipper content",
              "name": "next"
            },
            {
              "description": "Wraps the previous flipper content",
              "name": "previous"
            }
          ],
          "slots": [
            {
              "description": "The next flipper content",
              "name": "next"
            },
            {
              "description": "The previous flipper content",
              "name": "previous"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the flipper."
            },
            {
              "kind": "field",
              "name": "hiddenFromAT",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Indicates the flipper should be hidden from assistive technology. Because flippers are often supplementary navigation, they are often hidden from assistive technology."
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "FlipperDirection"
              },
              "privacy": "public",
              "description": "The direction that the flipper implies navigating."
            },
            {
              "kind": "method",
              "name": "keyupHandler",
              "privacy": "public",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event & KeyboardEvent"
                  },
                  "description": "Keyboard event"
                }
              ],
              "description": "Simulate a click event when the flipper has focus and the user hits enter or space keys\nBlur focus if the user hits escape key"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'click' event when Enter or Space is invoked via keyboard and the flipper is exposed to assistive technologies.",
              "name": "click"
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "The disabled state of the flipper.",
              "fieldName": "disabled"
            },
            {
              "name": "aria-hidden",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Indicates the flipper should be hidden from assistive technology. Because flippers are often supplementary navigation, they are often hidden from assistive technology.",
              "fieldName": "hiddenFromAT"
            },
            {
              "name": "direction",
              "type": {
                "text": "FlipperDirection"
              },
              "description": "The direction that the flipper implies navigating.",
              "fieldName": "direction"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FlipperDirection",
          "declaration": {
            "name": "FlipperDirection",
            "module": "src/flipper/flipper.ts"
          }
        },
        {
          "kind": "js",
          "name": "Flipper",
          "declaration": {
            "name": "Flipper",
            "module": "src/flipper/flipper.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/form-associated/form-associated.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "supportsElementInternals"
        },
        {
          "kind": "function",
          "name": "FormAssociated",
          "return": {
            "type": {
              "text": "T"
            }
          },
          "parameters": [
            {
              "name": "BaseCtor",
              "type": {
                "text": "T"
              }
            }
          ],
          "description": "Base function for providing Custom Element Form Association."
        },
        {
          "kind": "function",
          "name": "CheckableFormAssociated",
          "return": {
            "type": {
              "text": "T"
            }
          },
          "parameters": [
            {
              "name": "BaseCtor",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "supportsElementInternals",
          "declaration": {
            "name": "supportsElementInternals",
            "module": "src/form-associated/form-associated.ts"
          }
        },
        {
          "kind": "js",
          "name": "FormAssociated",
          "declaration": {
            "name": "FormAssociated",
            "module": "src/form-associated/form-associated.ts"
          }
        },
        {
          "kind": "js",
          "name": "CheckableFormAssociated",
          "declaration": {
            "name": "CheckableFormAssociated",
            "module": "src/form-associated/form-associated.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/foundation-element/foundation-element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Defines a foundation element class that:\n1. Connects the element to its ComponentPresentation\n2. Allows resolving the element template from the instance or ComponentPresentation\n3. Allows resolving the element styles from the instance or ComponentPresentation",
          "name": "FoundationElement",
          "members": [
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0"
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component."
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition."
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition."
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults."
            }
          ],
          "superclass": {
            "name": "FASTElement",
            "package": "@microsoft/fast-element"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FoundationElement",
          "declaration": {
            "name": "FoundationElement",
            "module": "src/foundation-element/foundation-element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/horizontal-scroll/horizontal-scroll.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "horizontalScrollTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "horizontalScrollTemplate",
          "declaration": {
            "name": "horizontalScrollTemplate",
            "module": "src/horizontal-scroll/horizontal-scroll.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/horizontal-scroll/horizontal-scroll.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A HorizontalScroll Custom HTML Element",
          "name": "HorizontalScroll",
          "cssParts": [
            {
              "description": "Wraps the entire scrollable region",
              "name": "scroll-area"
            },
            {
              "description": "The visible scroll area",
              "name": "scroll-view"
            },
            {
              "description": "The container for the content",
              "name": "content-container"
            },
            {
              "description": "The previous flipper container",
              "name": "scroll-prev"
            },
            {
              "description": "The element wrapping the previous flipper",
              "name": "scroll-action-previous"
            },
            {
              "description": "The next flipper container",
              "name": "scroll-next"
            },
            {
              "description": "The element wrapping the next flipper",
              "name": "scroll-action-next"
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided before the scroll area",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the scroll area",
              "name": "end"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "scrollContainer",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "public",
              "description": "Reference to DOM element that scrolls the content"
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "public",
              "description": "Reference to DOM element that holds the slotted content"
            },
            {
              "kind": "field",
              "name": "previousFlipperContainer",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "public",
              "description": "Reference to flipper to scroll to previous content"
            },
            {
              "kind": "field",
              "name": "nextFlipperContainer",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "public",
              "description": "Reference to flipper to scroll to the next content"
            },
            {
              "kind": "field",
              "name": "speed",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "600",
              "description": "Speed of scroll in pixels per second"
            },
            {
              "kind": "field",
              "name": "duration",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The CSS time value for the scroll transition duration. Overrides the `speed` attribute."
            },
            {
              "kind": "field",
              "name": "easing",
              "type": {
                "text": "ScrollEasing"
              },
              "privacy": "public",
              "default": "\"ease-in-out\"",
              "description": "Attribute used for easing, defaults to ease-in-out"
            },
            {
              "kind": "field",
              "name": "flippersHiddenFromAT",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Attribute to hide flippers from assistive technology"
            },
            {
              "kind": "field",
              "name": "scrollItems",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "public",
              "description": "The default slotted items placed in the scrolling container."
            },
            {
              "kind": "field",
              "name": "view",
              "type": {
                "text": "HorizontalScrollView"
              },
              "privacy": "public",
              "description": "View: default | mobile"
            },
            {
              "kind": "method",
              "name": "scrollItemsChanged",
              "privacy": "public",
              "parameters": [
                {
                  "name": "previous",
                  "type": {
                    "text": "HTMLElement[]"
                  },
                  "description": "current scroll items"
                },
                {
                  "name": "next",
                  "type": {
                    "text": "HTMLElement[]"
                  },
                  "description": "new updated scroll items"
                }
              ],
              "description": "Updates scroll stops and flippers when scroll items change"
            },
            {
              "kind": "method",
              "name": "fixScrollMisalign",
              "privacy": "private",
              "parameters": [
                {
                  "name": "stops",
                  "type": {
                    "text": "number[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "scrollInView",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement | number"
                  },
                  "description": "An item index, a scroll item or a child of one of the scroll items"
                },
                {
                  "name": "padding",
                  "default": "0",
                  "type": {
                    "text": "number"
                  },
                  "description": "Padding of the viewport where the active item shouldn't be"
                },
                {
                  "name": "rightPadding",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "Optional right padding. Uses the padding if not defined"
                }
              ],
              "description": "Function that can scroll an item into view."
            },
            {
              "kind": "method",
              "name": "keyupHandler",
              "privacy": "public",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event & KeyboardEvent"
                  },
                  "description": "Keyboard event"
                }
              ],
              "description": "Lets the user arrow left and right through the horizontal scroll"
            },
            {
              "kind": "method",
              "name": "scrollToPrevious",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Scrolls items to the left"
            },
            {
              "kind": "method",
              "name": "scrollToNext",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Scrolls items to the right"
            },
            {
              "kind": "method",
              "name": "scrollToPosition",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "newPosition",
                  "type": {
                    "text": "number"
                  },
                  "description": "position to scroll to"
                },
                {
                  "name": "position",
                  "default": "this.scrollContainer.scrollLeft",
                  "type": {
                    "text": "number"
                  },
                  "description": "starting position"
                }
              ],
              "description": "Handles scrolling with easing"
            },
            {
              "kind": "method",
              "name": "resized",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Monitors resize event on the horizontal-scroll element"
            },
            {
              "kind": "method",
              "name": "scrolled",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Monitors scrolled event on the content container"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'scrollstart' event when scrolling",
              "name": "scrollstart"
            },
            {
              "description": "Fires a custom 'scrollend' event when scrolling stops",
              "name": "scrollend"
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "number"
              },
              "default": "600",
              "description": "Speed of scroll in pixels per second",
              "fieldName": "speed"
            },
            {
              "name": "duration",
              "type": {
                "text": "string"
              },
              "description": "The CSS time value for the scroll transition duration. Overrides the `speed` attribute.",
              "fieldName": "duration"
            },
            {
              "name": "easing",
              "type": {
                "text": "ScrollEasing"
              },
              "default": "\"ease-in-out\"",
              "description": "Attribute used for easing, defaults to ease-in-out",
              "fieldName": "easing"
            },
            {
              "name": "flippers-hidden-from-at",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Attribute to hide flippers from assistive technology",
              "fieldName": "flippersHiddenFromAT"
            },
            {
              "name": "view",
              "type": {
                "text": "HorizontalScrollView"
              },
              "description": "View: default | mobile",
              "fieldName": "view"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HorizontalScroll",
          "declaration": {
            "name": "HorizontalScroll",
            "module": "src/horizontal-scroll/horizontal-scroll.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/listbox/listbox.element.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Listbox Custom HTML Element. Implements the {@link https://w3c.github.io/aria/#listbox | ARIA listbox }.",
          "name": "ListboxElement",
          "members": [
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates if the listbox is in multi-selection mode."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum number of options to display."
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "public",
              "description": "Sets an option as selected and gives it focus.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "length",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The number of options.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "description": "The list of options.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeAheadExpired",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the listbox.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "-1",
              "description": "The index of the selected option.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "A collection of the selected options.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "slottedOptionFilter",
              "privacy": "public",
              "static": true,
              "description": "A static filter to include only selectable options.",
              "parameters": [
                {
                  "description": "element to filter",
                  "name": "n"
                }
              ],
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectFirstOption",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Moves focus to the first selectable option.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates if the listbox is in multi-selection mode.",
              "fieldName": "multiple",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates if the listbox is in multi-selection mode.",
              "fieldName": "multiple",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            }
          ],
          "superclass": {
            "name": "Listbox",
            "module": "/src/listbox/listbox.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListboxElement",
          "declaration": {
            "name": "ListboxElement",
            "module": "src/listbox/listbox.element.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/listbox/listbox.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "listboxTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(Listbox:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "listboxTemplate",
          "declaration": {
            "name": "listboxTemplate",
            "module": "src/listbox/listbox.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/listbox/listbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Listbox Custom HTML Element. Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#listbox | ARIA listbox }.",
          "name": "Listbox",
          "slots": [
            {
              "description": "The default slot for the listbox options",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "length",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The number of options."
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "description": "The list of options."
            },
            {
              "kind": "field",
              "name": "typeAheadExpired",
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the listbox."
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "-1",
              "description": "The index of the selected option."
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "A collection of the selected options."
            },
            {
              "kind": "field",
              "name": "slottedOptionFilter",
              "privacy": "public",
              "static": true,
              "description": "A static filter to include only selectable options.",
              "parameters": [
                {
                  "description": "element to filter",
                  "name": "n"
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectFirstOption",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Moves focus to the first selectable option."
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "public",
              "description": "Sets an option as selected and gives it focus."
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "The disabled state of the listbox.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        },
        {
          "kind": "class",
          "description": "Includes ARIA states and properties relating to the ARIA listbox role",
          "name": "DelegatesARIAListbox",
          "members": [
            {
              "kind": "field",
              "name": "ariaActiveDescendant",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "See {@link https://www.w3.org/TR/wai-aria-1.2/#listbox} for more information"
            },
            {
              "kind": "field",
              "name": "ariaDisabled",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "privacy": "public",
              "description": "See {@link https://www.w3.org/TR/wai-aria-1.2/#listbox} for more information"
            },
            {
              "kind": "field",
              "name": "ariaExpanded",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "privacy": "public",
              "description": "See {@link https://www.w3.org/TR/wai-aria-1.2/#listbox} for more information"
            },
            {
              "kind": "field",
              "name": "ariaMultiSelectable",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "privacy": "public",
              "description": "See {@link https://w3c.github.io/aria/#listbox} for more information"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Listbox",
          "declaration": {
            "name": "Listbox",
            "module": "src/listbox/listbox.ts"
          }
        },
        {
          "kind": "js",
          "name": "DelegatesARIAListbox",
          "declaration": {
            "name": "DelegatesARIAListbox",
            "module": "src/listbox/listbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/listbox-option/listbox-option.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "listboxOptionTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(ListboxOption:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "listboxOptionTemplate",
          "declaration": {
            "name": "listboxOptionTemplate",
            "module": "src/listbox-option/listbox-option.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/listbox-option/listbox-option.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isListboxOption",
          "return": {
            "type": {
              "text": "el is ListboxOption"
            }
          },
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "Element"
              }
            },
            {
              "description": "the element to test.",
              "name": "element"
            }
          ],
          "description": "Determines if the element is a {@link (ListboxOption:class)}",
          "privacy": "public"
        },
        {
          "kind": "class",
          "description": "An Option Custom HTML Element. Implements {@link https://www.w3.org/TR/wai-aria-1.1/#option | ARIA option }.",
          "name": "ListboxOption",
          "cssParts": [
            {
              "description": "Wraps the listbox option content",
              "name": "content"
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided before the listbox option content",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the listbox option content",
              "name": "end"
            },
            {
              "description": "The default slot for listbox option content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean | undefined"
              },
              "privacy": "public",
              "description": "The checked state is used when the parent listbox is in multiple selection mode.\nTo avoid accessibility conflicts, the checked state should not be present in\nsingle selection mode."
            },
            {
              "kind": "method",
              "name": "checkedChanged",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "boolean | unknown"
                  },
                  "description": "the previous checked value"
                },
                {
                  "name": "next",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "the current checked value"
                }
              ],
              "description": "Updates the ariaChecked property when the checked property changes."
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "Node[]"
              },
              "privacy": "public",
              "description": "The default slotted content."
            },
            {
              "kind": "field",
              "name": "defaultSelected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The defaultSelected state of the option."
            },
            {
              "kind": "method",
              "name": "defaultSelectedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the option."
            },
            {
              "kind": "method",
              "name": "disabledChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "next",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "selectedAttribute",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The selected attribute value. This sets the initial selected value."
            },
            {
              "kind": "method",
              "name": "selectedAttributeChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The checked state of the control."
            },
            {
              "kind": "method",
              "name": "selectedChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "dirtyValue",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Track whether the value has been changed from the initial value"
            },
            {
              "kind": "field",
              "name": "initialValue",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "description": "The initial value of the option. This value sets the `value` property\nonly when the `value` property has not been explicitly set."
            },
            {
              "kind": "method",
              "name": "initialValueChanged",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "previous",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "next",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "label",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "text",
              "type": {
                "text": "string"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "HTMLFormElement | null"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "proxy",
              "default": "new Option(\n            `${this.textContent}`,\n            this.initialValue,\n            this.defaultSelected,\n            this.selected\n        )"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "The disabled state of the option.",
              "fieldName": "disabled"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "description": "The selected attribute value. This sets the initial selected value.",
              "fieldName": "selectedAttribute"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The initial value of the option. This value sets the `value` property\nonly when the `value` property has not been explicitly set.",
              "fieldName": "initialValue"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        },
        {
          "kind": "class",
          "description": "States and properties relating to the ARIA `option` role.",
          "name": "DelegatesARIAListboxOption",
          "members": [
            {
              "kind": "field",
              "name": "ariaChecked",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "privacy": "public",
              "description": "See {@link https://www.w3.org/TR/wai-aria-1.2/#option} for more information."
            },
            {
              "kind": "field",
              "name": "ariaPosInSet",
              "type": {
                "text": "string | null"
              },
              "description": "See {@link https://www.w3.org/TR/wai-aria-1.2/#option} for more information.",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "ariaSelected",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "description": "See {@link https://www.w3.org/TR/wai-aria-1.2/#option} for more information.",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "ariaSetSize",
              "type": {
                "text": "string | null"
              },
              "description": "See {@link https://www.w3.org/TR/wai-aria-1.2/#option} for more information.",
              "privacy": "public"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isListboxOption",
          "declaration": {
            "name": "isListboxOption",
            "module": "src/listbox-option/listbox-option.ts"
          }
        },
        {
          "kind": "js",
          "name": "ListboxOption",
          "declaration": {
            "name": "ListboxOption",
            "module": "src/listbox-option/listbox-option.ts"
          }
        },
        {
          "kind": "js",
          "name": "DelegatesARIAListboxOption",
          "declaration": {
            "name": "DelegatesARIAListboxOption",
            "module": "src/listbox-option/listbox-option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/menu/menu.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "menuTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#Menu} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "menuTemplate",
          "declaration": {
            "name": "menuTemplate",
            "module": "src/menu/menu.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/menu/menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Menu Custom HTML Element. Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#menu | ARIA menu }.",
          "name": "Menu",
          "slots": [
            {
              "description": "The default slot for the menu items",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "itemsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "menuItems",
              "type": {
                "text": "Element[] | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "expandedItem",
              "type": {
                "text": "MenuItem | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "focusIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "-1",
              "description": "The index of the focusable element in the items array\ndefaults to -1"
            },
            {
              "kind": "field",
              "name": "focusableElementRoles",
              "type": {
                "text": "{ [key: string]: string }"
              },
              "privacy": "private",
              "static": true,
              "default": "roleForMenuItem"
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Focuses the first item in the menu."
            },
            {
              "kind": "method",
              "name": "collapseExpandedItem",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Collapses any expanded menu items."
            },
            {
              "kind": "field",
              "name": "handleItemFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleExpandedChanged",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "removeItemListeners",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "setItems",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "changeHandler",
              "privacy": "private",
              "description": "handle change from child element"
            },
            {
              "kind": "method",
              "name": "domChildren",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Element[]"
                }
              },
              "description": "get an array of valid DOM children"
            },
            {
              "kind": "field",
              "name": "isMenuItemElement",
              "privacy": "private",
              "description": "check if the item is a menu item"
            },
            {
              "kind": "field",
              "name": "isFocusableElement",
              "privacy": "private",
              "description": "check if the item is focusable"
            },
            {
              "kind": "method",
              "name": "setFocus",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "focusIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "adjustment",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Menu",
          "declaration": {
            "name": "Menu",
            "module": "src/menu/menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/menu-item/menu-item.options.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "MenuItemRole",
          "type": {
            "text": "{\n    /**\n     * The menu item has a \"menuitem\" role\n     */\n    menuitem: \"menuitem\",\n\n    /**\n     * The menu item has a \"menuitemcheckbox\" role\n     */\n    menuitemcheckbox: \"menuitemcheckbox\",\n\n    /**\n     * The menu item has a \"menuitemradio\" role\n     */\n    menuitemradio: \"menuitemradio\",\n}"
          },
          "default": "{\n    /**\n     * The menu item has a \"menuitem\" role\n     */\n    menuitem: \"menuitem\",\n\n    /**\n     * The menu item has a \"menuitemcheckbox\" role\n     */\n    menuitemcheckbox: \"menuitemcheckbox\",\n\n    /**\n     * The menu item has a \"menuitemradio\" role\n     */\n    menuitemradio: \"menuitemradio\",\n}",
          "description": "Menu items roles.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenuItemRole",
          "declaration": {
            "name": "MenuItemRole",
            "module": "src/menu-item/menu-item.options.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/menu-item/menu-item.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "menuItemTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "Generates a template for the {@link @microsoft/fast-foundation#(MenuItem:class)} component using the provided prefix.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "menuItemTemplate",
          "declaration": {
            "name": "menuItemTemplate",
            "module": "src/menu-item/menu-item.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/menu-item/menu-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Switch Custom HTML Element. Implements {@link https://www.w3.org/TR/wai-aria-1.1/#menuitem | ARIA menuitem }, {@link https://www.w3.org/TR/wai-aria-1.1/#menuitemcheckbox | ARIA menuitemcheckbox}, or {@link https://www.w3.org/TR/wai-aria-1.1/#menuitemradio | ARIA menuitemradio }.",
          "name": "MenuItem",
          "cssParts": [
            {
              "description": "The element representing the visual checked or radio indicator",
              "name": "input-container"
            },
            {
              "description": "The element wrapping the `menuitemcheckbox` indicator",
              "name": "checkbox"
            },
            {
              "description": "The element wrapping the `menuitemradio` indicator",
              "name": "radio"
            },
            {
              "description": "The element wrapping the menu item content",
              "name": "content"
            },
            {
              "description": "The element wrapping the expand collapse element",
              "name": "expand-collapse-glyph-container"
            },
            {
              "description": "The expand/collapse element",
              "name": "expand-collapse"
            },
            {
              "description": "The container for the submenu, used for positioning",
              "name": "submenu-region"
            }
          ],
          "slots": [
            {
              "description": "The checked indicator",
              "name": "checked-indicator"
            },
            {
              "description": "The radio indicator",
              "name": "radio-indicator"
            },
            {
              "description": "Content which can be provided before the menu item content",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the menu item content",
              "name": "end"
            },
            {
              "description": "The default slot for menu item content",
              "name": ""
            },
            {
              "description": "The expand/collapse indicator",
              "name": "expand-collapse-indicator"
            },
            {
              "description": "Used to nest menu's within menu items",
              "name": "submenu"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the element."
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The expanded state of the element."
            },
            {
              "kind": "method",
              "name": "expandedChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "MenuItemRole"
              },
              "privacy": "public",
              "description": "The role of the element."
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The checked value of the element."
            },
            {
              "kind": "method",
              "name": "checkedChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "focusSubmenuOnLoad",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "observer",
              "type": {
                "text": "MutationObserver | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "domChildren",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Element[]"
                }
              },
              "description": "get an array of valid DOM children"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'expanded-change' event when the expanded state changes",
              "name": "expanded-change"
            },
            {
              "description": "Fires a custom 'change' event when a non-submenu item with a role of `menuitemcheckbox`, `menuitemradio`, or `menuitem` is invoked",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "The disabled state of the element.",
              "fieldName": "disabled"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "The expanded state of the element.",
              "fieldName": "expanded"
            },
            {
              "name": "role",
              "type": {
                "text": "MenuItemRole"
              },
              "description": "The role of the element.",
              "fieldName": "role"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "The checked value of the element.",
              "fieldName": "checked"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MenuItemRole",
          "declaration": {
            "name": "MenuItemRole",
            "module": "src/menu-item/menu-item.ts"
          }
        },
        {
          "kind": "js",
          "name": "roleForMenuItem",
          "declaration": {
            "name": "roleForMenuItem",
            "module": "src/menu-item/menu-item.ts"
          }
        },
        {
          "kind": "js",
          "name": "MenuItem",
          "declaration": {
            "name": "MenuItem",
            "module": "src/menu-item/menu-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/number-field/number-field.form-associated.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/number-field/number-field.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "numberFieldTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(NumberField:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "numberFieldTemplate",
          "declaration": {
            "name": "numberFieldTemplate",
            "module": "src/number-field/number-field.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/number-field/number-field.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Number Field Custom HTML Element. Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number | <input type=\"number\" /> element }.",
          "name": "NumberField",
          "cssParts": [
            {
              "description": "The label",
              "name": "label"
            },
            {
              "description": "The element wrapping the control, including start and end slots",
              "name": "root"
            },
            {
              "description": "The element representing the input",
              "name": "control"
            },
            {
              "description": "The step up and step down controls",
              "name": "controls"
            },
            {
              "description": "The step up control",
              "name": "step-up"
            },
            {
              "description": "The step down control",
              "name": "step-down"
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided before the number field input",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the number field input",
              "name": "end"
            },
            {
              "description": "The default slot for the label",
              "name": ""
            },
            {
              "description": "The glyph for the step up control",
              "name": "step-up-glyph"
            },
            {
              "description": "The glyph for the step down control",
              "name": "step-down-glyph"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information."
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates that this element should get focus after the page finishes loading. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute} for more information."
            },
            {
              "kind": "field",
              "name": "hideStep",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "When true, spin buttons will not be rendered"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user."
            },
            {
              "kind": "field",
              "name": "list",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Allows associating a {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist} to the element by {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/id}."
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum number of characters a user can enter."
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum number of characters a user can enter."
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "Sets the width of the element to a specified number of characters."
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "1",
              "description": "Amount to increment or decrement the value by"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum the value can be"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum the value can be"
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The value property, typed as a number."
            },
            {
              "kind": "method",
              "name": "validate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "{@inheritDoc (FormAssociated:interface).validate}"
            },
            {
              "kind": "method",
              "name": "stepUp",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Increments the value using the step value"
            },
            {
              "kind": "method",
              "name": "stepDown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Decrements the value using the step value"
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Selects all the text in the number field"
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "FormAssociatedNumberField",
                "module": "src/number-field/number-field.form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'input' event when the value has changed",
              "name": "input"
            },
            {
              "description": "Fires a custom 'change' event when the value has changed",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that this element should get focus after the page finishes loading. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute for more information.",
              "fieldName": "autofocus"
            },
            {
              "name": "hide-step",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, spin buttons will not be rendered",
              "fieldName": "hideStep"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "fieldName": "placeholder"
            },
            {
              "name": "list",
              "type": {
                "text": "string"
              },
              "description": "Allows associating a https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist to the element by https://developer.mozilla.org/en-US/docs/Web/API/Element/id.",
              "fieldName": "list"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "The maximum number of characters a user can enter.",
              "fieldName": "maxlength"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "The minimum number of characters a user can enter.",
              "fieldName": "minlength"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "Sets the width of the element to a specified number of characters.",
              "fieldName": "size"
            },
            {
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Amount to increment or decrement the value by",
              "fieldName": "step"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "The maximum the value can be",
              "fieldName": "max"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "The minimum the value can be",
              "fieldName": "min"
            }
          ],
          "superclass": {
            "name": "FormAssociatedNumberField",
            "module": "/src/number-field/number-field.form-associated.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NumberField",
          "declaration": {
            "name": "NumberField",
            "module": "src/number-field/number-field.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/patterns/aria-global.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Some states and properties are applicable to all host language elements regardless of whether a role is applied. The following global states and properties are supported by all roles and by all base markup elements. {@link https://www.w3.org/TR/wai-aria-1.1/#global_states} This is intended to be used as a mixin. Be sure you extend FASTElement.",
          "name": "ARIAGlobalStatesAndProperties",
          "members": [
            {
              "kind": "field",
              "name": "ariaAtomic",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "privacy": "public",
              "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-atomic}"
            },
            {
              "kind": "field",
              "name": "ariaBusy",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "privacy": "public",
              "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-busy}"
            },
            {
              "kind": "field",
              "name": "ariaControls",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls}"
            },
            {
              "kind": "field",
              "name": "ariaCurrent",
              "type": {
                "text": "| \"page\"\n        | \"step\"\n        | \"location\"\n        | \"date\"\n        | \"time\"\n        | \"true\"\n        | \"false\"\n        | string\n        | null"
              },
              "privacy": "public",
              "description": "Indicates the element that represents the current item within a container or set of related elements. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-current}"
            },
            {
              "kind": "field",
              "name": "ariaDescribedby",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "Identifies the element (or elements) that describes the object. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby}"
            },
            {
              "kind": "field",
              "name": "ariaDetails",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "Identifies the element that provides a detailed, extended description for the object. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-details}"
            },
            {
              "kind": "field",
              "name": "ariaDisabled",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "privacy": "public",
              "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-disabled}"
            },
            {
              "kind": "field",
              "name": "ariaErrormessage",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "Identifies the element that provides an error message for the object. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-errormessage}"
            },
            {
              "kind": "field",
              "name": "ariaFlowto",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-flowto}"
            },
            {
              "kind": "field",
              "name": "ariaHaspopup",
              "type": {
                "text": "| \"false\"\n        | \"true\"\n        | \"menu\"\n        | \"listbox\"\n        | \"tree\"\n        | \"grid\"\n        | \"dialog\"\n        | string\n        | null"
              },
              "privacy": "public",
              "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup}"
            },
            {
              "kind": "field",
              "name": "ariaHidden",
              "type": {
                "text": "\"false\" | \"true\" | string | null"
              },
              "privacy": "public",
              "description": "Indicates whether the element is exposed to an accessibility API {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden}"
            },
            {
              "kind": "field",
              "name": "ariaInvalid",
              "type": {
                "text": "\"false\" | \"true\" | \"grammar\" | \"spelling\" | string | null"
              },
              "privacy": "public",
              "description": "Indicates the entered value does not conform to the format expected by the application. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-invalid}"
            },
            {
              "kind": "field",
              "name": "ariaKeyshortcuts",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-keyshortcuts}"
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "Defines a string value that labels the current element. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-label}"
            },
            {
              "kind": "field",
              "name": "ariaLabelledby",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "Identifies the element (or elements) that labels the current element. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby}"
            },
            {
              "kind": "field",
              "name": "ariaLive",
              "type": {
                "text": "\"assertive\" | \"off\" | \"polite\" | string | null"
              },
              "privacy": "public",
              "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-live}"
            },
            {
              "kind": "field",
              "name": "ariaOwns",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-owns}"
            },
            {
              "kind": "field",
              "name": "ariaRelevant",
              "type": {
                "text": "| \"additions\"\n        | \"additions text\"\n        | \"all\"\n        | \"removals\"\n        | \"text\"\n        | string\n        | null"
              },
              "privacy": "public",
              "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-relevant}"
            },
            {
              "kind": "field",
              "name": "ariaRoledescription",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "Defines a human-readable, author-localized description for the role of an element. {@link https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription}"
            }
          ],
          "attributes": [
            {
              "name": "aria-atomic",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "description": "Indicates whether assistive technologies will present all, or only parts of,\nthe changed region based on the change notifications defined by the aria-relevant attribute.\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-atomic",
              "fieldName": "ariaAtomic"
            },
            {
              "name": "aria-busy",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "description": "Indicates an element is being modified and that assistive technologies MAY want to wait\nuntil the modifications are complete before exposing them to the user.\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-busy",
              "fieldName": "ariaBusy"
            },
            {
              "name": "aria-controls",
              "type": {
                "text": "string | null"
              },
              "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-controls",
              "fieldName": "ariaControls"
            },
            {
              "name": "aria-current",
              "type": {
                "text": "| \"page\"\n        | \"step\"\n        | \"location\"\n        | \"date\"\n        | \"time\"\n        | \"true\"\n        | \"false\"\n        | string\n        | null"
              },
              "description": "Indicates the element that represents the current item within a container or set of related elements.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-current",
              "fieldName": "ariaCurrent"
            },
            {
              "name": "aria-describedby",
              "type": {
                "text": "string | null"
              },
              "description": "Identifies the element (or elements) that describes the object.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-describedby",
              "fieldName": "ariaDescribedby"
            },
            {
              "name": "aria-details",
              "type": {
                "text": "string | null"
              },
              "description": "Identifies the element that provides a detailed, extended description for the object.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-details",
              "fieldName": "ariaDetails"
            },
            {
              "name": "aria-disabled",
              "type": {
                "text": "\"true\" | \"false\" | string | null"
              },
              "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-disabled",
              "fieldName": "ariaDisabled"
            },
            {
              "name": "aria-errormessage",
              "type": {
                "text": "string | null"
              },
              "description": "Identifies the element that provides an error message for the object.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-errormessage",
              "fieldName": "ariaErrormessage"
            },
            {
              "name": "aria-flowto",
              "type": {
                "text": "string | null"
              },
              "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-flowto",
              "fieldName": "ariaFlowto"
            },
            {
              "name": "aria-haspopup",
              "type": {
                "text": "| \"false\"\n        | \"true\"\n        | \"menu\"\n        | \"listbox\"\n        | \"tree\"\n        | \"grid\"\n        | \"dialog\"\n        | string\n        | null"
              },
              "description": "Indicates the availability and type of interactive popup element,\nsuch as menu or dialog, that can be triggered by an element.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-haspopup",
              "fieldName": "ariaHaspopup"
            },
            {
              "name": "aria-hidden",
              "type": {
                "text": "\"false\" | \"true\" | string | null"
              },
              "description": "Indicates whether the element is exposed to an accessibility API\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-hidden",
              "fieldName": "ariaHidden"
            },
            {
              "name": "aria-invalid",
              "type": {
                "text": "\"false\" | \"true\" | \"grammar\" | \"spelling\" | string | null"
              },
              "description": "Indicates the entered value does not conform to the format expected by the application.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-invalid",
              "fieldName": "ariaInvalid"
            },
            {
              "name": "aria-keyshortcuts",
              "type": {
                "text": "string | null"
              },
              "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-keyshortcuts",
              "fieldName": "ariaKeyshortcuts"
            },
            {
              "name": "aria-label",
              "type": {
                "text": "string | null"
              },
              "description": "Defines a string value that labels the current element.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-label",
              "fieldName": "ariaLabel"
            },
            {
              "name": "aria-labelledby",
              "type": {
                "text": "string | null"
              },
              "description": "Identifies the element (or elements) that labels the current element.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-labelledby",
              "fieldName": "ariaLabelledby"
            },
            {
              "name": "aria-live",
              "type": {
                "text": "\"assertive\" | \"off\" | \"polite\" | string | null"
              },
              "description": "Indicates that an element will be updated, and describes the types of updates the user agents,\nassistive technologies, and user can expect from the live region.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-live",
              "fieldName": "ariaLive"
            },
            {
              "name": "aria-owns",
              "type": {
                "text": "string | null"
              },
              "description": "Identifies an element (or elements) in order to define a visual,\nfunctional, or contextual parent/child relationship between DOM elements\nwhere the DOM hierarchy cannot be used to represent the relationship.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-owns",
              "fieldName": "ariaOwns"
            },
            {
              "name": "aria-relevant",
              "type": {
                "text": "| \"additions\"\n        | \"additions text\"\n        | \"all\"\n        | \"removals\"\n        | \"text\"\n        | string\n        | null"
              },
              "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-relevant",
              "fieldName": "ariaRelevant"
            },
            {
              "name": "aria-roledescription",
              "type": {
                "text": "string | null"
              },
              "description": "Defines a human-readable, author-localized description for the role of an element.\n\nhttps://www.w3.org/TR/wai-aria-1.1/#aria-roledescription",
              "fieldName": "ariaRoledescription"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ARIAGlobalStatesAndProperties",
          "declaration": {
            "name": "ARIAGlobalStatesAndProperties",
            "module": "src/patterns/aria-global.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/patterns/start-end.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A mixin class implementing start and end elements.\nThese are generally used to decorate text elements with icons or other visual indicators.",
          "name": "StartEnd",
          "members": [
            {
              "kind": "field",
              "name": "start",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "startContainer",
              "type": {
                "text": "HTMLSpanElement"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "handleStartContentChange",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "end",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "endContainer",
              "type": {
                "text": "HTMLSpanElement"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "handleEndContentChange",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "endSlotTemplate",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "ElementDefinitionContext"
              }
            },
            {
              "name": "definition",
              "type": {
                "text": "EndOptions"
              }
            }
          ],
          "description": "The template for the end element. For use with {@link StartEnd}",
          "privacy": "public"
        },
        {
          "kind": "function",
          "name": "startSlotTemplate",
          "parameters": [
            {
              "name": "context",
              "type": {
                "text": "ElementDefinitionContext"
              }
            },
            {
              "name": "definition",
              "type": {
                "text": "StartOptions"
              }
            }
          ],
          "description": "The template for the start element. For use with {@link StartEnd}",
          "privacy": "public"
        },
        {
          "kind": "variable",
          "name": "endTemplate",
          "type": {
            "text": "ViewTemplate<StartEnd>"
          },
          "default": "html`\n    <span part=\"end\" ${ref(\"endContainer\")}>\n        <slot\n            name=\"end\"\n            ${ref(\"end\")}\n            @slotchange=\"${x => x.handleEndContentChange()}\"\n        ></slot>\n    </span>\n`",
          "description": "The template for the end element. For use with {@link StartEnd}",
          "privacy": "public"
        },
        {
          "kind": "variable",
          "name": "startTemplate",
          "type": {
            "text": "ViewTemplate<StartEnd>"
          },
          "default": "html`\n    <span part=\"start\" ${ref(\"startContainer\")}>\n        <slot\n            name=\"start\"\n            ${ref(\"start\")}\n            @slotchange=\"${x => x.handleStartContentChange()}\"\n        ></slot>\n    </span>\n`",
          "description": "The template for the start element. For use with {@link StartEnd}",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StartEnd",
          "declaration": {
            "name": "StartEnd",
            "module": "src/patterns/start-end.ts"
          }
        },
        {
          "kind": "js",
          "name": "endSlotTemplate",
          "declaration": {
            "name": "endSlotTemplate",
            "module": "src/patterns/start-end.ts"
          }
        },
        {
          "kind": "js",
          "name": "startSlotTemplate",
          "declaration": {
            "name": "startSlotTemplate",
            "module": "src/patterns/start-end.ts"
          }
        },
        {
          "kind": "js",
          "name": "endTemplate",
          "declaration": {
            "name": "endTemplate",
            "module": "src/patterns/start-end.ts"
          }
        },
        {
          "kind": "js",
          "name": "startTemplate",
          "declaration": {
            "name": "startTemplate",
            "module": "src/patterns/start-end.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/picker/picker-list-item.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "pickerListItemTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "pickerListItemTemplate",
          "declaration": {
            "name": "pickerListItemTemplate",
            "module": "src/picker/picker-list-item.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/picker/picker-list-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A picker list item Custom HTML Element.",
          "name": "PickerListItem",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The underlying string value of the item"
            },
            {
              "kind": "field",
              "name": "contentsTemplate",
              "type": {
                "text": "ViewTemplate"
              },
              "privacy": "public",
              "description": "The template used to render the contents of the list item"
            },
            {
              "kind": "method",
              "name": "contentsTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "customView",
              "type": {
                "text": "HTMLView | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInvoke",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateView",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "disconnectView",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The underlying string value of the item",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PickerListItem",
          "declaration": {
            "name": "PickerListItem",
            "module": "src/picker/picker-list-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/picker/picker-list.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "pickerListTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "pickerListTemplate",
          "declaration": {
            "name": "pickerListTemplate",
            "module": "src/picker/picker-list.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/picker/picker-list.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A List Picker Menu Custom HTML Element.",
          "name": "PickerList",
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PickerList",
          "declaration": {
            "name": "PickerList",
            "module": "src/picker/picker-list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/picker/picker-menu-option.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "pickerMenuOptionTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "pickerMenuOptionTemplate",
          "declaration": {
            "name": "pickerMenuOptionTemplate",
            "module": "src/picker/picker-menu-option.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/picker/picker-menu-option.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A picker list item Custom HTML Element.",
          "name": "PickerMenuOption",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The underlying string value of the item"
            },
            {
              "kind": "field",
              "name": "contentsTemplate",
              "type": {
                "text": "ViewTemplate"
              },
              "privacy": "public",
              "description": "The template used to render the contents of the list item"
            },
            {
              "kind": "method",
              "name": "contentsTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "customView",
              "type": {
                "text": "HTMLView | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleInvoked",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateView",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "disconnectView",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The underlying string value of the item",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PickerMenuOption",
          "declaration": {
            "name": "PickerMenuOption",
            "module": "src/picker/picker-menu-option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/picker/picker-menu.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "pickerMenuTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the List Picker component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "pickerMenuTemplate",
          "declaration": {
            "name": "pickerMenuTemplate",
            "module": "src/picker/picker-menu.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/picker/picker-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A List Picker Menu Custom HTML Element.",
          "name": "PickerMenu",
          "members": [
            {
              "kind": "method",
              "name": "menuElementsChanged",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "headerElementsChanged",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "footerElementsChanged",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "suggestionsAvailableText",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Text to display to assistive technology when\nsuggestions are available"
            },
            {
              "kind": "method",
              "name": "updateOptions",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "addSlottedListItems",
              "privacy": "private",
              "parameters": [
                {
                  "name": "slotChildren",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PickerMenu",
          "declaration": {
            "name": "PickerMenu",
            "module": "src/picker/picker-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/picker/picker.form-associated.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/picker/picker.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "pickerTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the List Picker component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "pickerTemplate",
          "declaration": {
            "name": "pickerTemplate",
            "module": "src/picker/picker.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/picker/picker.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Picker Custom HTML Element.  This is an early \"alpha\" version of the component.\nDevelopers should expect the api to evolve, breaking changes are possible.",
          "name": "Picker",
          "members": [
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"\"",
              "description": "Currently selected items. Comma delineated string ie. \"apples,oranges\"."
            },
            {
              "kind": "method",
              "name": "selectionChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Currently available options. Comma delineated string ie. \"apples,oranges\"."
            },
            {
              "kind": "method",
              "name": "optionsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "filterSelected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Whether the component should remove an option from the list when it is in the selection"
            },
            {
              "kind": "field",
              "name": "filterQuery",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Whether the component should remove options based on the current query"
            },
            {
              "kind": "field",
              "name": "maxSelected",
              "type": {
                "text": "number | undefined"
              },
              "privacy": "public",
              "description": "The maximum number of items that can be selected."
            },
            {
              "kind": "field",
              "name": "noSuggestionsText",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"No suggestions available\"",
              "description": "The text to present to assistive technolgies when no suggestions are available."
            },
            {
              "kind": "field",
              "name": "suggestionsAvailableText",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"Suggestions available\"",
              "description": "The text to present to assistive technolgies when suggestions are available."
            },
            {
              "kind": "field",
              "name": "loadingText",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"Loading suggestions\"",
              "description": "The text to present to assistive technologies when suggestions are loading."
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Applied to the aria-label attribute of the input element"
            },
            {
              "kind": "field",
              "name": "labelledBy",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Applied to the aria-labelledby attribute of the input element"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Applied to the placeholder attribute of the input element"
            },
            {
              "kind": "field",
              "name": "menuPlacement",
              "type": {
                "text": "menuConfigs"
              },
              "privacy": "public",
              "default": "\"bottom-fill\"",
              "description": "Controls menu placement"
            },
            {
              "kind": "method",
              "name": "menuPlacementChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "showLoading",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Whether to display a loading state if the menu is opened."
            },
            {
              "kind": "method",
              "name": "showLoadingChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "listItemTemplate",
              "type": {
                "text": "ViewTemplate"
              },
              "privacy": "public",
              "description": "Template used to generate selected items.\nThis is used in a repeat directive."
            },
            {
              "kind": "method",
              "name": "listItemTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "defaultListItemTemplate",
              "type": {
                "text": "ViewTemplate | undefined"
              },
              "privacy": "public",
              "description": "Default template to use for selected items (usually specified in the component template).\nThis is used in a repeat directive."
            },
            {
              "kind": "method",
              "name": "defaultListItemTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "menuOptionTemplate",
              "type": {
                "text": "ViewTemplate"
              },
              "privacy": "public",
              "description": "Template to use for available options.\nThis is used in a repeat directive."
            },
            {
              "kind": "method",
              "name": "menuOptionTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "defaultMenuOptionTemplate",
              "type": {
                "text": "ViewTemplate | undefined"
              },
              "privacy": "public",
              "description": "Default template to use for available options (usually specified in the template).\nThis is used in a repeat directive."
            },
            {
              "kind": "method",
              "name": "defaultMenuOptionTemplateChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "listItemContentsTemplate",
              "type": {
                "text": "ViewTemplate"
              },
              "privacy": "public",
              "description": "Template to use for the contents of a selected list item"
            },
            {
              "kind": "field",
              "name": "menuOptionContentsTemplate",
              "type": {
                "text": "ViewTemplate"
              },
              "privacy": "public",
              "description": "Template to use for the contents of menu options"
            },
            {
              "kind": "field",
              "name": "optionsList",
              "type": {
                "text": "string[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "Current list of options in array form"
            },
            {
              "kind": "method",
              "name": "optionsListChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "query",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The text value currently in the input field"
            },
            {
              "kind": "method",
              "name": "queryChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "filteredOptionsListChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "flyoutOpenChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "showNoOptionsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "itemsPlaceholderElement",
              "type": {
                "text": "Node"
              },
              "privacy": "public",
              "description": "Reference to the placeholder element for the repeat directive"
            },
            {
              "kind": "field",
              "name": "itemsRepeatBehavior",
              "type": {
                "text": "RepeatBehavior | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "optionsRepeatBehavior",
              "type": {
                "text": "RepeatBehavior | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "optionsPlaceholder",
              "type": {
                "text": "Node"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "inputElementView",
              "type": {
                "text": "HTMLView | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "method",
              "name": "focus",
              "privacy": "public",
              "description": "Move focus to the input element"
            },
            {
              "kind": "method",
              "name": "initialize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Initialize the component.  This is delayed a frame to ensure children are connected as well."
            },
            {
              "kind": "method",
              "name": "toggleFlyout",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "open",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Toggles the menu flyout"
            },
            {
              "kind": "field",
              "name": "handleTextInput",
              "privacy": "private",
              "description": "Handle input event from input element"
            },
            {
              "kind": "field",
              "name": "handleInputClick",
              "privacy": "private",
              "description": "Handle click event from input element"
            },
            {
              "kind": "method",
              "name": "handleMenuOptionsUpdated",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Handle the menu options updated event from the child menu"
            },
            {
              "kind": "method",
              "name": "handleKeyDown",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "description": "Handle key down events."
            },
            {
              "kind": "method",
              "name": "handleFocusIn",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "description": "Handle focus in events."
            },
            {
              "kind": "method",
              "name": "handleFocusOut",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "description": "Handle focus out events."
            },
            {
              "kind": "method",
              "name": "handleSelectionChange",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "The list of selected items has changed"
            },
            {
              "kind": "method",
              "name": "handleRegionLoaded",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "Anchored region is loaded, menu and options exist in the DOM."
            },
            {
              "kind": "field",
              "name": "setRegionProps",
              "privacy": "private",
              "description": "Sets properties on the anchored region once it is instanciated."
            },
            {
              "kind": "method",
              "name": "checkMaxItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Checks if the maximum number of items has been chosen and updates the ui."
            },
            {
              "kind": "method",
              "name": "handleItemInvoke",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "A list item has been invoked."
            },
            {
              "kind": "method",
              "name": "handleOptionInvoke",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "description": "A menu option has been invoked."
            },
            {
              "kind": "method",
              "name": "incrementFocusedItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "increment",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Increments the focused list item by the specified amount"
            },
            {
              "kind": "method",
              "name": "disableMenu",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Disables the menu. Note that the menu can be open, just doens't have any valid options on display."
            },
            {
              "kind": "method",
              "name": "setFocusedOption",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "optionIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Sets the currently focused menu option by index"
            },
            {
              "kind": "method",
              "name": "updateListItemTemplate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the template used for the list item repeat behavior"
            },
            {
              "kind": "method",
              "name": "updateOptionTemplate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the template used for the menu option repeat behavior"
            },
            {
              "kind": "method",
              "name": "updateFilteredOptions",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the filtered options array"
            },
            {
              "kind": "method",
              "name": "updateMenuConfig",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the menu configuration"
            },
            {
              "kind": "field",
              "name": "configLookup",
              "type": {
                "text": "object"
              },
              "privacy": "private",
              "default": "{\n        top: FlyoutPosTop,\n        bottom: FlyoutPosBottom,\n        tallest: FlyoutPosTallest,\n        \"top-fill\": FlyoutPosTopFill,\n        \"bottom-fill\": FlyoutPosBottomFill,\n        \"tallest-fill\": FlyoutPosTallestFill,\n    }",
              "description": "matches menu placement values with the associated menu config"
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "FormAssociatedPicker",
                "module": "src/picker/picker.form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "selection",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "Currently selected items. Comma delineated string ie. \"apples,oranges\".",
              "fieldName": "selection"
            },
            {
              "name": "options",
              "type": {
                "text": "string"
              },
              "description": "Currently available options. Comma delineated string ie. \"apples,oranges\".",
              "fieldName": "options"
            },
            {
              "name": "filter-selected",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component should remove an option from the list when it is in the selection",
              "fieldName": "filterSelected"
            },
            {
              "name": "filter-query",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether the component should remove options based on the current query",
              "fieldName": "filterQuery"
            },
            {
              "name": "max-selected",
              "type": {
                "text": "number | undefined"
              },
              "description": "The maximum number of items that can be selected.",
              "fieldName": "maxSelected"
            },
            {
              "name": "no-suggestions-text",
              "type": {
                "text": "string"
              },
              "default": "\"No suggestions available\"",
              "description": "The text to present to assistive technolgies when no suggestions are available.",
              "fieldName": "noSuggestionsText"
            },
            {
              "name": "suggestions-available-text",
              "type": {
                "text": "string"
              },
              "default": "\"Suggestions available\"",
              "description": "The text to present to assistive technolgies when suggestions are available.",
              "fieldName": "suggestionsAvailableText"
            },
            {
              "name": "loading-text",
              "type": {
                "text": "string"
              },
              "default": "\"Loading suggestions\"",
              "description": "The text to present to assistive technologies when suggestions are loading.",
              "fieldName": "loadingText"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Applied to the aria-label attribute of the input element",
              "fieldName": "label"
            },
            {
              "name": "labelledby",
              "type": {
                "text": "string"
              },
              "description": "Applied to the aria-labelledby attribute of the input element",
              "fieldName": "labelledBy"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Applied to the placeholder attribute of the input element",
              "fieldName": "placeholder"
            },
            {
              "name": "menu-placement",
              "type": {
                "text": "menuConfigs"
              },
              "default": "\"bottom-fill\"",
              "description": "Controls menu placement",
              "fieldName": "menuPlacement"
            }
          ],
          "superclass": {
            "name": "FormAssociatedPicker",
            "module": "/src/picker/picker.form-associated.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Picker",
          "declaration": {
            "name": "Picker",
            "module": "src/picker/picker.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/progress/base-progress.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An Progress HTML Element. Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#progressbar | ARIA progressbar }.",
          "name": "BaseProgress",
          "cssParts": [
            {
              "description": "Represents the progress element",
              "name": "progress"
            },
            {
              "description": "The determinate indicator",
              "name": "determinate"
            },
            {
              "description": "The indeterminate indicator",
              "name": "indeterminate"
            }
          ],
          "slots": [
            {
              "description": "The slot for a custom indeterminate indicator",
              "name": "indeterminate"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number | null"
              },
              "privacy": "public",
              "description": "The value of the progress"
            },
            {
              "kind": "method",
              "name": "valueChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum value"
            },
            {
              "kind": "method",
              "name": "minChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum value"
            },
            {
              "kind": "method",
              "name": "maxChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "paused",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates the progress is paused"
            },
            {
              "kind": "method",
              "name": "updatePercentComplete",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "number | null"
              },
              "description": "The value of the progress",
              "fieldName": "value"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "The minimum value",
              "fieldName": "min"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "The maximum value",
              "fieldName": "max"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates the progress is paused",
              "fieldName": "paused"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseProgress",
          "declaration": {
            "name": "BaseProgress",
            "module": "src/progress/base-progress.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/progress/progress.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "progressTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "defintion"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#BaseProgress} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "progressTemplate",
          "declaration": {
            "name": "progressTemplate",
            "module": "src/progress/progress.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/progress-ring/progress-ring.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "progressRingTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#BaseProgress} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "progressRingTemplate",
          "declaration": {
            "name": "progressRingTemplate",
            "module": "src/progress-ring/progress-ring.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/radio.form-associated.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/radio.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "radioTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(Radio:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "radioTemplate",
          "declaration": {
            "name": "radioTemplate",
            "module": "src/radio/radio.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio/radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Radio Custom HTML Element. Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#radio | ARIA radio }.",
          "name": "Radio",
          "cssParts": [
            {
              "description": "The element representing the visual radio control",
              "name": "control"
            },
            {
              "description": "The label",
              "name": "label"
            }
          ],
          "slots": [
            {
              "description": "The checked indicator",
              "name": "checked-indicator"
            },
            {
              "description": "The default slot for the label",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information."
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name of the radio. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname | name attribute} for more info."
            },
            {
              "kind": "method",
              "name": "isInsideRadioGroup",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "FormAssociatedRadio",
                "module": "src/radio/radio.form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emits a custom change event when the checked state changes",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly"
            }
          ],
          "superclass": {
            "name": "FormAssociatedRadio",
            "module": "/src/radio/radio.form-associated.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Radio",
          "declaration": {
            "name": "Radio",
            "module": "src/radio/radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio-group/radio-group.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "radioGroupTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#RadioGroup} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "radioGroupTemplate",
          "declaration": {
            "name": "radioGroupTemplate",
            "module": "src/radio-group/radio-group.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/radio-group/radio-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An Radio Group Custom HTML Element. Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#radiogroup | ARIA radiogroup }.",
          "name": "RadioGroup",
          "cssParts": [
            {
              "description": "The positioning region for laying out the radios",
              "name": "positioning-region"
            }
          ],
          "slots": [
            {
              "description": "The slot for the label",
              "name": "label"
            },
            {
              "description": "The default slot for radio buttons",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the child radios will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information."
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Disables the radio group and child radios."
            },
            {
              "kind": "method",
              "name": "disabledChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name of the radio group. Setting this value will set the name value\nfor all child radio elements."
            },
            {
              "kind": "method",
              "name": "nameChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The value of the checked radio"
            },
            {
              "kind": "method",
              "name": "valueChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "Orientation | \"horizontal\" | \"vertical\""
              },
              "privacy": "public",
              "description": "The orientation of the group"
            },
            {
              "kind": "field",
              "name": "childItems",
              "type": {
                "text": "HTMLElement[]"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "slottedRadioButtonsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "selectedRadio",
              "type": {
                "text": "HTMLInputElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "focusedRadio",
              "type": {
                "text": "HTMLInputElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "direction",
              "type": {
                "text": "Direction"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "parentToolbar",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isInsideToolbar",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isInsideFoundationToolbar",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setupRadioButtons",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "radioChangeHandler",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "moveToRadioByIndex",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "moveRightOffGroup",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "moveLeftOffGroup",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "shouldMoveOffGroupToTheRight",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "shouldMoveOffGroupToTheLeft",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "checkFocusedRadio",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "moveRight",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "moveLeft",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'change' event when the value changes",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the child radios will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Disables the radio group and child radios.",
              "fieldName": "disabled"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the radio group. Setting this value will set the name value\nfor all child radio elements.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "The value of the checked radio",
              "fieldName": "value"
            },
            {
              "name": "orientation",
              "type": {
                "text": "Orientation | \"horizontal\" | \"vertical\""
              },
              "description": "The orientation of the group",
              "fieldName": "orientation"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RadioGroup",
          "declaration": {
            "name": "RadioGroup",
            "module": "src/radio-group/radio-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search/search.form-associated.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/search/search.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "searchTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(Search:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "searchTemplate",
          "declaration": {
            "name": "searchTemplate",
            "module": "src/search/search.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/search/search.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Search Custom HTML Element. Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search | <input type=\"search\" /> element }.",
          "name": "Search",
          "cssParts": [
            {
              "description": "The label",
              "name": "label"
            },
            {
              "description": "The element wrapping the control, including start and end slots",
              "name": "root"
            },
            {
              "description": "The element representing the input",
              "name": "control"
            },
            {
              "description": "The button to clear the input",
              "name": "clear-button"
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided before the search input",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the search clear button",
              "name": "end"
            },
            {
              "description": "The default slot for the label",
              "name": ""
            },
            {
              "description": "The clear button",
              "name": "close-button"
            },
            {
              "description": "The clear glyph",
              "name": "close-glyph"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information."
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates that this element should get focus after the page finishes loading. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute} for more information."
            },
            {
              "kind": "method",
              "name": "autofocusChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user."
            },
            {
              "kind": "method",
              "name": "placeholderChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "list",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Allows associating a {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist} to the element by {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/id}."
            },
            {
              "kind": "method",
              "name": "listChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum number of characters a user can enter."
            },
            {
              "kind": "method",
              "name": "maxlengthChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum number of characters a user can enter."
            },
            {
              "kind": "method",
              "name": "minlengthChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A regular expression that the value must match to pass validation."
            },
            {
              "kind": "method",
              "name": "patternChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "Sets the width of the element to a specified number of characters."
            },
            {
              "kind": "method",
              "name": "sizeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Controls whether or not to enable spell checking for the input field, or if the default spell checking configuration should be used."
            },
            {
              "kind": "method",
              "name": "spellcheckChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "validate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "{@inheritDoc (FormAssociated:interface).validate}"
            },
            {
              "kind": "method",
              "name": "handleClearInput",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handles the control's clear value event"
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "FormAssociatedSearch",
                "module": "src/search/search.form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that this element should get focus after the page finishes loading. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute for more information.",
              "fieldName": "autofocus"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "fieldName": "placeholder"
            },
            {
              "name": "list",
              "type": {
                "text": "string"
              },
              "description": "Allows associating a https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist to the element by https://developer.mozilla.org/en-US/docs/Web/API/Element/id.",
              "fieldName": "list"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "The maximum number of characters a user can enter.",
              "fieldName": "maxlength"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "The minimum number of characters a user can enter.",
              "fieldName": "minlength"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A regular expression that the value must match to pass validation.",
              "fieldName": "pattern"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "Sets the width of the element to a specified number of characters.",
              "fieldName": "size"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Controls whether or not to enable spell checking for the input field, or if the default spell checking configuration should be used.",
              "fieldName": "spellcheck"
            }
          ],
          "superclass": {
            "name": "FormAssociatedSearch",
            "module": "/src/search/search.form-associated.js"
          }
        },
        {
          "kind": "class",
          "description": "Includes ARIA states and properties relating to the ARIA textbox role",
          "name": "DelegatesARIASearch"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Search",
          "declaration": {
            "name": "Search",
            "module": "src/search/search.ts"
          }
        },
        {
          "kind": "js",
          "name": "DelegatesARIASearch",
          "declaration": {
            "name": "DelegatesARIASearch",
            "module": "src/search/search.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select/select.form-associated.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/select/select.options.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "SelectPosition",
          "type": {
            "text": "{\n    above: \"above\",\n    below: \"below\",\n}"
          },
          "default": "{\n    above: \"above\",\n    below: \"below\",\n}",
          "description": "Positioning directions for the listbox when a select is open.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SelectPosition",
          "declaration": {
            "name": "SelectPosition",
            "module": "src/select/select.options.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select/select.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "selectTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(Select:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "selectTemplate",
          "declaration": {
            "name": "selectTemplate",
            "module": "src/select/select.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/select/select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Select Custom HTML Element. Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#select | ARIA select }.",
          "name": "Select",
          "cssParts": [
            {
              "description": "The element representing the select invoking element",
              "name": "control"
            },
            {
              "description": "The element wrapping the selected value",
              "name": "selected-value"
            },
            {
              "description": "The element wrapping the visual indicator",
              "name": "indicator"
            },
            {
              "description": "The listbox element",
              "name": "listbox"
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided before the button content",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the button content",
              "name": "end"
            },
            {
              "description": "The element representing the select button",
              "name": "button-container"
            },
            {
              "description": "The selected value",
              "name": "selected-value"
            },
            {
              "description": "The visual indicator for the expand/collapse state of the button",
              "name": "indicator"
            },
            {
              "description": "The default slot for slotted options",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "The open attribute."
            },
            {
              "kind": "field",
              "name": "value",
              "privacy": "public",
              "description": "The value property."
            },
            {
              "kind": "field",
              "name": "positionAttribute",
              "type": {
                "text": "SelectPosition | undefined"
              },
              "privacy": "public",
              "description": "Reflects the placement for the listbox when the select is open."
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "SelectPosition | undefined"
              },
              "privacy": "public",
              "description": "Holds the current state for the calculated position of the listbox."
            },
            {
              "kind": "method",
              "name": "positionChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "SelectPosition | undefined"
                  }
                },
                {
                  "name": "next",
                  "type": {
                    "text": "SelectPosition | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setPositioning",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Calculate and apply listbox positioning based on available viewport space."
            },
            {
              "kind": "field",
              "name": "displayValue",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The value displayed on the button."
            },
            {
              "kind": "method",
              "name": "multipleChanged",
              "privacy": "public",
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "boolean | undefined"
                  },
                  "description": "the previous multiple value"
                },
                {
                  "name": "next",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "the current multiple value"
                }
              ],
              "description": "Sets the multiple property on the proxy element."
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "FormAssociatedSelect",
                "module": "src/select/select.form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates if the listbox is in multi-selection mode.",
              "inheritedFrom": {
                "name": "ListboxElement",
                "module": "src/listbox/listbox.element.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum number of options to display.",
              "inheritedFrom": {
                "name": "ListboxElement",
                "module": "src/listbox/listbox.element.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelectedOptions",
              "privacy": "public",
              "description": "Sets an option as selected and gives it focus.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "length",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The number of options.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "description": "The list of options.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeAheadExpired",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the listbox.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "-1",
              "description": "The index of the selected option.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": {
                "text": "ListboxOption[]"
              },
              "privacy": "public",
              "default": "[]",
              "description": "A collection of the selected options.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "slottedOptionFilter",
              "privacy": "public",
              "static": true,
              "description": "A static filter to include only selectable options.",
              "parameters": [
                {
                  "description": "element to filter",
                  "name": "n"
                }
              ],
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectFirstOption",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Moves focus to the first selectable option.",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'input' event when the value updates",
              "name": "input"
            },
            {
              "description": "Fires a custom 'change' event when the value updates",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The open attribute.",
              "fieldName": "open"
            },
            {
              "name": "position",
              "type": {
                "text": "SelectPosition | undefined"
              },
              "description": "Reflects the placement for the listbox when the select is open.",
              "fieldName": "positionAttribute"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates if the listbox is in multi-selection mode.",
              "fieldName": "multiple",
              "inheritedFrom": {
                "name": "Listbox",
                "module": "src/listbox/listbox.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormAssociatedSelect",
            "module": "/src/select/select.form-associated.js"
          }
        },
        {
          "kind": "class",
          "description": "Includes ARIA states and properties relating to the ARIA select role.",
          "name": "DelegatesARIASelect",
          "members": [
            {
              "kind": "field",
              "name": "ariaControls",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "See {@link https://www.w3.org/TR/wai-aria-1.2/#combobox} for more information"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Select",
          "declaration": {
            "name": "Select",
            "module": "src/select/select.ts"
          }
        },
        {
          "kind": "js",
          "name": "DelegatesARIASelect",
          "declaration": {
            "name": "DelegatesARIASelect",
            "module": "src/select/select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/skeleton/skeleton.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "skeletonTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the fast-skeleton component",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "skeletonTemplate",
          "declaration": {
            "name": "skeletonTemplate",
            "module": "src/skeleton/skeleton.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/skeleton/skeleton.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Skeleton Custom HTML Element.",
          "name": "Skeleton",
          "slots": [
            {
              "description": "The default slot",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Indicates the Skeleton should have a filled style."
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "SkeletonShape"
              },
              "privacy": "public",
              "default": "\"rect\"",
              "description": "Indicates what the shape of the Skeleton should be."
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Indicates that the component can accept a pattern URL."
            },
            {
              "kind": "field",
              "name": "shimmer",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates that the component has an activated shimmer effect"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "fill",
              "type": {
                "text": "string"
              },
              "description": "Indicates the Skeleton should have a filled style.",
              "fieldName": "fill"
            },
            {
              "name": "shape",
              "type": {
                "text": "SkeletonShape"
              },
              "default": "\"rect\"",
              "description": "Indicates what the shape of the Skeleton should be.",
              "fieldName": "shape"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "Indicates that the component can accept a pattern URL.",
              "fieldName": "pattern"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the component has an activated shimmer effect",
              "fieldName": "shimmer"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Skeleton",
          "declaration": {
            "name": "Skeleton",
            "module": "src/skeleton/skeleton.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/slider/slider-utilities.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "convertPixelToPercent",
          "return": {
            "type": {
              "text": "number"
            }
          },
          "parameters": [
            {
              "name": "pixelPos",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "minPosition",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "maxPosition",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "direction",
              "optional": true,
              "type": {
                "text": "Direction"
              }
            }
          ],
          "description": "Converts a pixel coordinate on the track to a percent of the track's range"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "convertPixelToPercent",
          "declaration": {
            "name": "convertPixelToPercent",
            "module": "src/slider/slider-utilities.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/slider/slider.form-associated.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/slider/slider.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "sliderTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(Slider:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sliderTemplate",
          "declaration": {
            "name": "sliderTemplate",
            "module": "src/slider/slider.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/slider/slider.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "SliderMode",
          "type": {
            "text": "{\n    singleValue: \"single-value\",\n}"
          },
          "default": "{\n    singleValue: \"single-value\",\n}",
          "description": "The selection modes of a {@link @microsoft/fast-foundation#(Slider:class)}.",
          "privacy": "public"
        },
        {
          "kind": "class",
          "description": "A Slider Custom HTML Element. Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#slider | ARIA slider }.",
          "name": "Slider",
          "cssParts": [
            {
              "description": "The region used to position the elements of the slider",
              "name": "positioning-region"
            },
            {
              "description": "The region containing the track elements",
              "name": "track-container"
            },
            {
              "description": "The element wrapping the track start slot",
              "name": "track-start"
            },
            {
              "description": "The thumb container element which is programatically positioned",
              "name": "thumb-container"
            }
          ],
          "slots": [
            {
              "description": "The track of the slider",
              "name": "track"
            },
            {
              "description": "The track-start visual indicator",
              "name": "track-start"
            },
            {
              "description": "The slider thumb",
              "name": "thumb"
            },
            {
              "description": "The default slot for labels",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information."
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The value property, typed as a number."
            },
            {
              "kind": "field",
              "name": "valueTextFormatter",
              "type": {
                "text": "(value: string) => string | null"
              },
              "privacy": "public",
              "description": "Custom function that generates a string for the component's \"aria-valuetext\" attribute based on the current value."
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "0",
              "description": "The minimum allowed value."
            },
            {
              "kind": "method",
              "name": "minChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "10",
              "description": "The maximum allowed value."
            },
            {
              "kind": "method",
              "name": "maxChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "1",
              "description": "Value to increment or decrement via arrow keys, mouse click or drag."
            },
            {
              "kind": "method",
              "name": "stepChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "privacy": "public",
              "description": "The orientation of the slider."
            },
            {
              "kind": "method",
              "name": "orientationChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "mode",
              "type": {
                "text": "SliderMode"
              },
              "privacy": "public",
              "description": "The selection mode."
            },
            {
              "kind": "method",
              "name": "increment",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Increment the value by the step"
            },
            {
              "kind": "method",
              "name": "decrement",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Decrement the value by the step"
            },
            {
              "kind": "field",
              "name": "keypressHandler",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "setThumbPositionForOrientation",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "Direction"
                  },
                  "description": "writing mode"
                }
              ],
              "description": "Places the thumb based on the current value"
            },
            {
              "kind": "method",
              "name": "updateStepMultiplier",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Update the step multiplier used to ensure rounding errors from steps that\nare not whole numbers"
            },
            {
              "kind": "field",
              "name": "setupTrackConstraints",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "setupListeners",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "midpoint",
              "type": {
                "text": "string"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setupDefaultValue",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "handleThumbMouseDown",
              "privacy": "private",
              "description": "Handle mouse moves during a thumb drag operation\nIf the event handler is null it removes the events"
            },
            {
              "kind": "field",
              "name": "handleMouseMove",
              "privacy": "private",
              "description": "Handle mouse moves during a thumb drag operation"
            },
            {
              "kind": "field",
              "name": "calculateNewValue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleWindowMouseUp",
              "privacy": "private",
              "description": "Handle a window mouse up during a drag operation"
            },
            {
              "kind": "field",
              "name": "stopDragging",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "handleMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "description": "MouseEvent or null. If there is no event handler it will remove the events",
                  "name": "e"
                }
              ]
            },
            {
              "kind": "field",
              "name": "convertToConstrainedValue",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "FormAssociatedSlider",
                "module": "src/slider/slider.form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'change' event when the slider value changes",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly"
            },
            {
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The minimum allowed value.",
              "fieldName": "min"
            },
            {
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "The maximum allowed value.",
              "fieldName": "max"
            },
            {
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Value to increment or decrement via arrow keys, mouse click or drag.",
              "fieldName": "step"
            },
            {
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "description": "The orientation of the slider.",
              "fieldName": "orientation"
            },
            {
              "name": "mode",
              "type": {
                "text": "SliderMode"
              },
              "description": "The selection mode.",
              "fieldName": "mode"
            }
          ],
          "superclass": {
            "name": "FormAssociatedSlider",
            "module": "/src/slider/slider.form-associated.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SliderMode",
          "declaration": {
            "name": "SliderMode",
            "module": "src/slider/slider.ts"
          }
        },
        {
          "kind": "js",
          "name": "Slider",
          "declaration": {
            "name": "Slider",
            "module": "src/slider/slider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/slider-label/slider-label.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "sliderLabelTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(SliderLabel:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sliderLabelTemplate",
          "declaration": {
            "name": "sliderLabelTemplate",
            "module": "src/slider-label/slider-label.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/slider-label/slider-label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A label element intended to be used with the {@link @microsoft/fast-foundation#(Slider:class)} component.",
          "name": "SliderLabel",
          "cssParts": [
            {
              "description": "The element wrapping the label mark and text",
              "name": "root"
            }
          ],
          "slots": [
            {
              "description": "The default slot for the label content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The position of the label relative to the min and max value of the parent {@link @microsoft/fast-foundation#(Slider:class)}."
            },
            {
              "kind": "method",
              "name": "positionChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "hideMark",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "Hides the tick mark."
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "The disabled state of the label. This is generally controlled by the parent {@link @microsoft/fast-foundation#(Slider:class)}."
            },
            {
              "kind": "field",
              "name": "notifier",
              "type": {
                "text": "Notifier"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isSliderConfig",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "node is SliderConfiguration"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "getSliderConfiguration",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "positionAsStyle",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "position",
              "type": {
                "text": "string"
              },
              "description": "The position of the label relative to the min and max value of the parent @microsoft/fast-foundation#(Slider:class).",
              "fieldName": "position"
            },
            {
              "name": "hide-mark",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the tick mark.",
              "fieldName": "hideMark"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "The disabled state of the label. This is generally controlled by the parent @microsoft/fast-foundation#(Slider:class).",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SliderLabel",
          "declaration": {
            "name": "SliderLabel",
            "module": "src/slider-label/slider-label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/switch/switch.form-associated.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/switch/switch.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "switchTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(Switch:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "switchTemplate",
          "declaration": {
            "name": "switchTemplate",
            "module": "src/switch/switch.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/switch/switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Switch Custom HTML Element. Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#switch | ARIA switch }.",
          "name": "Switch",
          "cssParts": [
            {
              "description": "The label",
              "name": "label"
            },
            {
              "description": "The element representing the switch, which wraps the indicator",
              "name": "switch"
            },
            {
              "description": "The wrapper for the status messages",
              "name": "status-message"
            },
            {
              "description": "The checked message",
              "name": "checked-message"
            },
            {
              "description": "The unchecked message",
              "name": "unchecked-message"
            }
          ],
          "slots": [
            {
              "description": "The deafult slot for the label",
              "name": ""
            },
            {
              "description": "The message when in a checked state",
              "name": "checked-message"
            },
            {
              "description": "The message when in an unchecked state",
              "name": "unchecked-message"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information."
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "FormAssociatedSwitch",
                "module": "src/switch/switch.form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emits a custom change event when the checked state changes",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly"
            }
          ],
          "superclass": {
            "name": "FormAssociatedSwitch",
            "module": "/src/switch/switch.form-associated.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Switch",
          "declaration": {
            "name": "Switch",
            "module": "src/switch/switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tab/tab.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "tabTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#Tab} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "tabTemplate",
          "declaration": {
            "name": "tabTemplate",
            "module": "src/tab/tab.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tab/tab.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Tab Component to be used with {@link @microsoft/fast-foundation#(Tabs:class)}",
          "name": "Tab",
          "slots": [
            {
              "description": "The default slot for the tab content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled | disabled HTML attribute} for more information."
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled | disabled HTML attribute for more information.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Tab",
          "declaration": {
            "name": "Tab",
            "module": "src/tab/tab.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tab-panel/tab-panel.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "tabPanelTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#TabPanel} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "tabPanelTemplate",
          "declaration": {
            "name": "tabPanelTemplate",
            "module": "src/tab-panel/tab-panel.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tab-panel/tab-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A TabPanel Component to be used with {@link @microsoft/fast-foundation#(Tabs:class)}",
          "name": "TabPanel",
          "slots": [
            {
              "description": "The default slot for the tabpanel content",
              "name": ""
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          },
          "members": [
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TabPanel",
          "declaration": {
            "name": "TabPanel",
            "module": "src/tab-panel/tab-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tabs/tabs.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "tabsTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(Tabs:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "tabsTemplate",
          "declaration": {
            "name": "tabsTemplate",
            "module": "src/tabs/tabs.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tabs/tabs.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "TabsOrientation",
          "type": {
            "text": "{\n    vertical: \"vertical\",\n    horizontal: \"horizontal\",\n}"
          },
          "default": "{\n    vertical: \"vertical\",\n    horizontal: \"horizontal\",\n}",
          "description": "The orientation of the {@link @microsoft/fast-foundation#(Tabs:class)} component",
          "privacy": "public"
        },
        {
          "kind": "class",
          "description": "A Tabs Custom HTML Element. Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#tablist | ARIA tablist }.",
          "name": "Tabs",
          "cssParts": [
            {
              "description": "The element wrapping for the tabs",
              "name": "tablist"
            },
            {
              "description": "The tab slot",
              "name": "tab"
            },
            {
              "description": "The visual indicator",
              "name": "activeIndicator"
            },
            {
              "description": "The tabpanel slot",
              "name": "tabpanel"
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided before the tablist element",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the tablist element",
              "name": "end"
            },
            {
              "description": "The slot for tabs",
              "name": "tab"
            },
            {
              "description": "The slot for tabpanels",
              "name": "tabpanel"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "TabsOrientation"
              },
              "privacy": "public",
              "description": "The orientation"
            },
            {
              "kind": "field",
              "name": "activeid",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The id of the active tab"
            },
            {
              "kind": "field",
              "name": "activeindicator",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "true",
              "description": "Whether or not to show the active indicator"
            },
            {
              "kind": "field",
              "name": "activetab",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "public",
              "description": "A reference to the active tab"
            },
            {
              "kind": "field",
              "name": "prevActiveTabIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "activeTabIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "ticking",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "tabIds",
              "type": {
                "text": "Array<string>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tabpanelIds",
              "type": {
                "text": "Array<string>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "change",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isDisabledElement",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isHiddenElement",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isFocusableElement",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getActiveIndex",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "setTabs",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "setTabPanels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getTabIds",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "getTabPanelIds",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "setComponent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "handleTabClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isHorizontal",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "handleTabKeyDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleActiveIndicatorPosition",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "animateActiveIndicator",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "adjust",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "adjustment",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "The adjust method for FASTTabs"
            },
            {
              "kind": "field",
              "name": "adjustForward",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "adjustBackward",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "moveToTabByIndex",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusTab",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'change' event when a tab is clicked or during keyboard navigation",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "orientation",
              "type": {
                "text": "TabsOrientation"
              },
              "description": "The orientation",
              "fieldName": "orientation"
            },
            {
              "name": "activeid",
              "type": {
                "text": "string"
              },
              "description": "The id of the active tab",
              "fieldName": "activeid"
            },
            {
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Whether or not to show the active indicator",
              "fieldName": "activeindicator"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TabsOrientation",
          "declaration": {
            "name": "TabsOrientation",
            "module": "src/tabs/tabs.ts"
          }
        },
        {
          "kind": "js",
          "name": "Tabs",
          "declaration": {
            "name": "Tabs",
            "module": "src/tabs/tabs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/test-utilities/fixture.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "uniqueElementName",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "description": "Creates a random, unique name suitable for use as a Custom Element name."
        },
        {
          "kind": "function",
          "name": "fixture",
          "return": {
            "type": {
              "text": "Promise<Fixture<TElement>>"
            }
          },
          "parameters": [
            {
              "name": "templateNameOrRegistry",
              "type": {
                "text": "| ViewTemplate\n        | string\n        | FoundationElementRegistry<FoundationElementDefinition, Constructable<TElement>>\n        | [\n              FoundationElementRegistry<\n                  FoundationElementDefinition,\n                  Constructable<TElement>\n              >,\n              ...FoundationElementRegistry<FoundationElementDefinition, Constructable>[]\n          ]"
              },
              "description": "An HTML template or single element name to create the fixture for."
            },
            {
              "name": "options",
              "default": "{}",
              "type": {
                "text": "FixtureOptions"
              },
              "description": "Enables customizing fixture creation behavior."
            }
          ],
          "description": "Creates a test fixture suitable for testing custom elements, templates, and bindings."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "uniqueElementName",
          "declaration": {
            "name": "uniqueElementName",
            "module": "src/test-utilities/fixture.ts"
          }
        },
        {
          "kind": "js",
          "name": "fixture",
          "declaration": {
            "name": "fixture",
            "module": "src/test-utilities/fixture.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/test-utilities/timeout.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "timeout",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          },
          "parameters": [
            {
              "name": "timeout",
              "default": "0"
            }
          ],
          "description": "Timeout for use in async tets."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "timeout",
          "declaration": {
            "name": "timeout",
            "module": "src/test-utilities/timeout.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/text-area/text-area.form-associated.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/text-area/text-area.options.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "TextAreaResize",
          "type": {
            "text": "{\n    /**\n     * No resize.\n     */\n    none: \"none\",\n\n    /**\n     * Resize vertically and horizontally.\n     */\n    both: \"both\",\n\n    /**\n     * Resize horizontally.\n     */\n    horizontal: \"horizontal\",\n\n    /**\n     * Resize vertically.\n     */\n    vertical: \"vertical\",\n}"
          },
          "default": "{\n    /**\n     * No resize.\n     */\n    none: \"none\",\n\n    /**\n     * Resize vertically and horizontally.\n     */\n    both: \"both\",\n\n    /**\n     * Resize horizontally.\n     */\n    horizontal: \"horizontal\",\n\n    /**\n     * Resize vertically.\n     */\n    vertical: \"vertical\",\n}",
          "description": "Resize mode for a TextArea",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TextAreaResize",
          "declaration": {
            "name": "TextAreaResize",
            "module": "src/text-area/text-area.options.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/text-area/text-area.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "textAreaTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(TextArea:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "textAreaTemplate",
          "declaration": {
            "name": "textAreaTemplate",
            "module": "src/text-area/text-area.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/text-area/text-area.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Text Area Custom HTML Element. Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea | <textarea> element }.",
          "name": "TextArea",
          "cssParts": [
            {
              "description": "The label",
              "name": "label"
            },
            {
              "description": "The element wrapping the control",
              "name": "root"
            },
            {
              "description": "The textarea element",
              "name": "control"
            }
          ],
          "slots": [
            {
              "description": "The default slot for the label",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information."
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "resize",
              "type": {
                "text": "TextAreaResize"
              },
              "privacy": "public",
              "description": "The resize mode of the element."
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates that this element should get focus after the page finishes loading."
            },
            {
              "kind": "method",
              "name": "autofocusChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "formId",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id | id} of the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form | form} the element is associated to"
            },
            {
              "kind": "field",
              "name": "list",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Allows associating a {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist} to the element by {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/id}."
            },
            {
              "kind": "method",
              "name": "listChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum number of characters a user can enter."
            },
            {
              "kind": "method",
              "name": "maxlengthChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum number of characters a user can enter."
            },
            {
              "kind": "method",
              "name": "minlengthChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "The name of the element."
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user."
            },
            {
              "kind": "field",
              "name": "cols",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "20",
              "description": "Sizes the element horizontally by a number of character columns."
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "Sizes the element vertically by a number of character rows."
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Sets if the element is eligible for spell checking\nbut the UA."
            },
            {
              "kind": "method",
              "name": "spellcheckChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Selects all the text in the text area"
            },
            {
              "kind": "method",
              "name": "validate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "{@inheritDoc (FormAssociated:interface).validate}"
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "FormAssociatedTextArea",
                "module": "src/text-area/text-area.form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Emits a custom 'change' event when the textarea emits a change event",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly"
            },
            {
              "name": "resize",
              "type": {
                "text": "TextAreaResize"
              },
              "description": "The resize mode of the element.",
              "fieldName": "resize"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that this element should get focus after the page finishes loading.",
              "fieldName": "autofocus"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "description": "The https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id | id of the https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form | form the element is associated to",
              "fieldName": "formId"
            },
            {
              "name": "list",
              "type": {
                "text": "string"
              },
              "description": "Allows associating a https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist to the element by https://developer.mozilla.org/en-US/docs/Web/API/Element/id.",
              "fieldName": "list"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "The maximum number of characters a user can enter.",
              "fieldName": "maxlength"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "The minimum number of characters a user can enter.",
              "fieldName": "minlength"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "description": "The name of the element.",
              "fieldName": "name"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "fieldName": "placeholder"
            },
            {
              "type": {
                "text": "number"
              },
              "default": "20",
              "description": "Sizes the element horizontally by a number of character columns.",
              "fieldName": "cols"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "Sizes the element vertically by a number of character rows.",
              "fieldName": "rows"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Sets if the element is eligible for spell checking\nbut the UA.",
              "fieldName": "spellcheck"
            }
          ],
          "superclass": {
            "name": "FormAssociatedTextArea",
            "module": "/src/text-area/text-area.form-associated.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TextAreaResize",
          "declaration": {
            "name": "TextAreaResize",
            "module": "src/text-area/text-area.ts"
          }
        },
        {
          "kind": "js",
          "name": "TextArea",
          "declaration": {
            "name": "TextArea",
            "module": "src/text-area/text-area.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/text-field/text-field.form-associated.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/text-field/text-field.options.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "TextFieldType",
          "type": {
            "text": "{\n    /**\n     * An email TextField\n     */\n    email: \"email\",\n\n    /**\n     * A password TextField\n     */\n    password: \"password\",\n\n    /**\n     * A telephone TextField\n     */\n    tel: \"tel\",\n\n    /**\n     * A text TextField\n     */\n    text: \"text\",\n\n    /**\n     * A URL TextField\n     */\n    url: \"url\",\n}"
          },
          "default": "{\n    /**\n     * An email TextField\n     */\n    email: \"email\",\n\n    /**\n     * A password TextField\n     */\n    password: \"password\",\n\n    /**\n     * A telephone TextField\n     */\n    tel: \"tel\",\n\n    /**\n     * A text TextField\n     */\n    text: \"text\",\n\n    /**\n     * A URL TextField\n     */\n    url: \"url\",\n}",
          "description": "Text field sub-types",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TextFieldType",
          "declaration": {
            "name": "TextFieldType",
            "module": "src/text-field/text-field.options.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/text-field/text-field.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "textFieldTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(TextField:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "textFieldTemplate",
          "declaration": {
            "name": "textFieldTemplate",
            "module": "src/text-field/text-field.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/text-field/text-field.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Text Field Custom HTML Element. Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text | <input type=\"text\" /> element }.",
          "name": "TextField",
          "cssParts": [
            {
              "description": "The label",
              "name": "label"
            },
            {
              "description": "The element wrapping the control, including start and end slots",
              "name": "root"
            },
            {
              "description": "The text field element",
              "name": "control"
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided before the number field input",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the number field input",
              "name": "end"
            },
            {
              "description": "The default slot for the label",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "readOnly",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information."
            },
            {
              "kind": "method",
              "name": "readOnlyChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Indicates that this element should get focus after the page finishes loading. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute} for more information."
            },
            {
              "kind": "method",
              "name": "autofocusChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user."
            },
            {
              "kind": "method",
              "name": "placeholderChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "TextFieldType"
              },
              "privacy": "public",
              "description": "Allows setting a type or mode of text."
            },
            {
              "kind": "method",
              "name": "typeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "list",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "Allows associating a {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist} to the element by {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/id}."
            },
            {
              "kind": "method",
              "name": "listChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The maximum number of characters a user can enter."
            },
            {
              "kind": "method",
              "name": "maxlengthChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "The minimum number of characters a user can enter."
            },
            {
              "kind": "method",
              "name": "minlengthChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "description": "A regular expression that the value must match to pass validation."
            },
            {
              "kind": "method",
              "name": "patternChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "description": "Sets the width of the element to a specified number of characters."
            },
            {
              "kind": "method",
              "name": "sizeChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Controls whether or not to enable spell checking for the input field, or if the default spell checking configuration should be used."
            },
            {
              "kind": "method",
              "name": "spellcheckChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "select",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Selects all the text in the text field"
            },
            {
              "kind": "method",
              "name": "validate",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "{@inheritDoc (FormAssociated:interface).validate}"
            },
            {
              "kind": "field",
              "name": "proxy",
              "inheritedFrom": {
                "name": "FormAssociatedTextField",
                "module": "src/text-field/text-field.form-associated.ts"
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'change' event when the value has changed",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute for more information.",
              "fieldName": "readOnly"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that this element should get focus after the page finishes loading. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute for more information.",
              "fieldName": "autofocus"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Sets the placeholder value of the element, generally used to provide a hint to the user.",
              "fieldName": "placeholder"
            },
            {
              "name": "type",
              "type": {
                "text": "TextFieldType"
              },
              "description": "Allows setting a type or mode of text.",
              "fieldName": "type"
            },
            {
              "name": "list",
              "type": {
                "text": "string"
              },
              "description": "Allows associating a https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist to the element by https://developer.mozilla.org/en-US/docs/Web/API/Element/id.",
              "fieldName": "list"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "The maximum number of characters a user can enter.",
              "fieldName": "maxlength"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "The minimum number of characters a user can enter.",
              "fieldName": "minlength"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A regular expression that the value must match to pass validation.",
              "fieldName": "pattern"
            },
            {
              "type": {
                "text": "number"
              },
              "description": "Sets the width of the element to a specified number of characters.",
              "fieldName": "size"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "Controls whether or not to enable spell checking for the input field, or if the default spell checking configuration should be used.",
              "fieldName": "spellcheck"
            }
          ],
          "superclass": {
            "name": "FormAssociatedTextField",
            "module": "/src/text-field/text-field.form-associated.js"
          }
        },
        {
          "kind": "class",
          "description": "Includes ARIA states and properties relating to the ARIA textbox role",
          "name": "DelegatesARIATextbox"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TextFieldType",
          "declaration": {
            "name": "TextFieldType",
            "module": "src/text-field/text-field.ts"
          }
        },
        {
          "kind": "js",
          "name": "TextField",
          "declaration": {
            "name": "TextField",
            "module": "src/text-field/text-field.ts"
          }
        },
        {
          "kind": "js",
          "name": "DelegatesARIATextbox",
          "declaration": {
            "name": "DelegatesARIATextbox",
            "module": "src/text-field/text-field.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/toolbar/toolbar.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "toolbarTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(Toolbar:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "toolbarTemplate",
          "declaration": {
            "name": "toolbarTemplate",
            "module": "src/toolbar/toolbar.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/toolbar/toolbar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Toolbar Custom HTML Element. Implements the {@link https://w3c.github.io/aria-practices/#Toolbar|ARIA Toolbar}.",
          "name": "Toolbar",
          "cssParts": [
            {
              "description": "The element containing the items, start and end slots",
              "name": "positioning-region"
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided before the slotted items",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the slotted items",
              "name": "end"
            },
            {
              "description": "The default slot for slotted items",
              "name": ""
            },
            {
              "description": "The toolbar label",
              "name": "label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "activeIndex"
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "privacy": "public",
              "description": "The orientation of the toolbar."
            },
            {
              "kind": "method",
              "name": "slottedItemsChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "childItems",
              "type": {
                "text": "Element[]"
              },
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "childItemsChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prev",
                  "type": {
                    "text": "undefined | Element[]"
                  }
                },
                {
                  "name": "next",
                  "type": {
                    "text": "Element[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "orientation",
              "type": {
                "text": "Orientation"
              },
              "description": "The orientation of the toolbar.",
              "fieldName": "orientation"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        },
        {
          "kind": "class",
          "description": "Includes ARIA states and properties relating to the ARIA toolbar role",
          "name": "DelegatesARIAToolbar",
          "members": [
            {
              "kind": "field",
              "name": "ariaLabelledby",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "The id of the element labeling the toolbar."
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string | null"
              },
              "privacy": "public",
              "description": "The label surfaced to assistive technologies."
            }
          ],
          "attributes": [
            {
              "name": "aria-labelledby",
              "type": {
                "text": "string | null"
              },
              "description": "The id of the element labeling the toolbar.",
              "fieldName": "ariaLabelledby"
            },
            {
              "name": "aria-label",
              "type": {
                "text": "string | null"
              },
              "description": "The label surfaced to assistive technologies.",
              "fieldName": "ariaLabel"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Toolbar",
          "declaration": {
            "name": "Toolbar",
            "module": "src/toolbar/toolbar.ts"
          }
        },
        {
          "kind": "js",
          "name": "DelegatesARIAToolbar",
          "declaration": {
            "name": "DelegatesARIAToolbar",
            "module": "src/toolbar/toolbar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tooltip/tooltip.options.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "TooltipPosition",
          "type": {
            "text": "{\n    /**\n     * The tooltip is positioned above the element\n     */\n    top: \"top\",\n\n    /**\n     * The tooltip is positioned to the right of the element\n     */\n    right: \"right\",\n\n    /**\n     * The tooltip is positioned below the element\n     */\n    bottom: \"bottom\",\n\n    /**\n     * The tooltip is positioned to the left of the element\n     */\n    left: \"left\",\n\n    /**\n     * The tooltip is positioned before the element\n     */\n    start: \"start\",\n\n    /**\n     * The tooltip is positioned after the element\n     */\n    end: \"end\",\n\n    /**\n     * The tooltip is positioned above the element and to the left\n     */\n    topLeft: \"top-left\",\n\n    /**\n     * The tooltip is positioned above the element and to the right\n     */\n    topRight: \"top-right\",\n\n    /**\n     * The tooltip is positioned below the element and to the left\n     */\n    bottomLeft: \"bottom-left\",\n\n    /**\n     * The tooltip is positioned below the element and to the right\n     */\n    bottomRight: \"bottom-right\",\n\n    /**\n     * The tooltip is positioned above the element and to the left\n     */\n    topStart: \"top-start\",\n\n    /**\n     * The tooltip is positioned above the element and to the right\n     */\n    topEnd: \"top-end\",\n\n    /**\n     * The tooltip is positioned below the element and to the left\n     */\n    bottomStart: \"bottom-start\",\n\n    /**\n     * The tooltip is positioned below the element and to the right\n     */\n    bottomEnd: \"bottom-end\",\n}"
          },
          "default": "{\n    /**\n     * The tooltip is positioned above the element\n     */\n    top: \"top\",\n\n    /**\n     * The tooltip is positioned to the right of the element\n     */\n    right: \"right\",\n\n    /**\n     * The tooltip is positioned below the element\n     */\n    bottom: \"bottom\",\n\n    /**\n     * The tooltip is positioned to the left of the element\n     */\n    left: \"left\",\n\n    /**\n     * The tooltip is positioned before the element\n     */\n    start: \"start\",\n\n    /**\n     * The tooltip is positioned after the element\n     */\n    end: \"end\",\n\n    /**\n     * The tooltip is positioned above the element and to the left\n     */\n    topLeft: \"top-left\",\n\n    /**\n     * The tooltip is positioned above the element and to the right\n     */\n    topRight: \"top-right\",\n\n    /**\n     * The tooltip is positioned below the element and to the left\n     */\n    bottomLeft: \"bottom-left\",\n\n    /**\n     * The tooltip is positioned below the element and to the right\n     */\n    bottomRight: \"bottom-right\",\n\n    /**\n     * The tooltip is positioned above the element and to the left\n     */\n    topStart: \"top-start\",\n\n    /**\n     * The tooltip is positioned above the element and to the right\n     */\n    topEnd: \"top-end\",\n\n    /**\n     * The tooltip is positioned below the element and to the left\n     */\n    bottomStart: \"bottom-start\",\n\n    /**\n     * The tooltip is positioned below the element and to the right\n     */\n    bottomEnd: \"bottom-end\",\n}",
          "description": "Enumerates possible tooltip positions",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TooltipPosition",
          "declaration": {
            "name": "TooltipPosition",
            "module": "src/tooltip/tooltip.options.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tooltip/tooltip.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "tooltipTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "Creates a template for the {@link @microsoft/fast-foundation#(Tooltip:class)} component using the provided prefix.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "tooltipTemplate",
          "declaration": {
            "name": "tooltipTemplate",
            "module": "src/tooltip/tooltip.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tooltip/tooltip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An Tooltip Custom HTML Element.",
          "name": "Tooltip",
          "cssParts": [
            {
              "description": "The tooltip element",
              "name": "tooltip"
            }
          ],
          "slots": [
            {
              "description": "The default slot for the tooltip content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Whether the tooltip is visible or not.\nIf undefined tooltip is shown when anchor element is hovered"
            },
            {
              "kind": "method",
              "name": "visibleChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "\"\"",
              "description": "The id of the element the tooltip is anchored to"
            },
            {
              "kind": "method",
              "name": "anchorChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "delay",
              "type": {
                "text": "number"
              },
              "privacy": "public",
              "default": "300",
              "description": "The delay in milliseconds before a tooltip is shown after a hover event"
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "TooltipPosition"
              },
              "privacy": "public",
              "description": "Controls the placement of the tooltip relative to the anchor.\nWhen the position is undefined the tooltip is placed above or below the anchor based on available space."
            },
            {
              "kind": "method",
              "name": "positionChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "autoUpdateMode",
              "type": {
                "text": "AutoUpdateMode"
              },
              "privacy": "public",
              "default": "\"anchor\"",
              "description": "Controls when the tooltip updates its position, default is 'anchor' which only updates when\nthe anchor is resized.  'auto' will update on scroll/resize events.\nCorresponds to anchored-region auto-update-mode."
            },
            {
              "kind": "field",
              "name": "horizontalViewportLock",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Controls if the tooltip will always remain fully in the viewport on the horizontal axis"
            },
            {
              "kind": "field",
              "name": "verticalViewportLock",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "Controls if the tooltip will always remain fully in the viewport on the vertical axis"
            },
            {
              "kind": "field",
              "name": "anchorElement",
              "type": {
                "text": "HTMLElement | null"
              },
              "privacy": "public",
              "default": "null",
              "description": "the html element currently being used as anchor.\nSetting this directly overrides the anchor attribute."
            },
            {
              "kind": "method",
              "name": "anchorElementChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "HTMLElement | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "viewportElementChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "showDelayTimer",
              "type": {
                "text": "number | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The timer that tracks delay time before the tooltip is shown on hover"
            },
            {
              "kind": "field",
              "name": "hideDelayTimer",
              "type": {
                "text": "number | null"
              },
              "privacy": "private",
              "default": "null",
              "description": "The timer that tracks delay time before the tooltip is hidden"
            },
            {
              "kind": "field",
              "name": "isAnchorHoveredFocused",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Indicates whether the anchor is currently being hovered or has focus"
            },
            {
              "kind": "field",
              "name": "isRegionHovered",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "Indicates whether the region is currently being hovered"
            },
            {
              "kind": "field",
              "name": "handleRegionMouseOver",
              "privacy": "private",
              "description": "mouse enters region"
            },
            {
              "kind": "field",
              "name": "handleRegionMouseOut",
              "privacy": "private",
              "description": "mouse leaves region"
            },
            {
              "kind": "field",
              "name": "handleAnchorMouseOver",
              "privacy": "private",
              "description": "mouse enters anchor"
            },
            {
              "kind": "field",
              "name": "handleAnchorMouseOut",
              "privacy": "private",
              "description": "mouse leaves anchor"
            },
            {
              "kind": "field",
              "name": "handleAnchorFocusIn",
              "privacy": "private",
              "description": "anchor gets focus"
            },
            {
              "kind": "field",
              "name": "handleAnchorFocusOut",
              "privacy": "private",
              "description": "anchor loses focus"
            },
            {
              "kind": "field",
              "name": "startHideDelayTimer",
              "privacy": "private",
              "description": "starts the hide timer"
            },
            {
              "kind": "field",
              "name": "clearHideDelayTimer",
              "privacy": "private",
              "description": "clears the hide delay"
            },
            {
              "kind": "field",
              "name": "startShowDelayTimer",
              "privacy": "private",
              "description": "starts the show timer if not currently running"
            },
            {
              "kind": "field",
              "name": "startHover",
              "privacy": "private",
              "description": "start hover"
            },
            {
              "kind": "field",
              "name": "clearShowDelayTimer",
              "privacy": "private",
              "description": "clears the show delay"
            },
            {
              "kind": "method",
              "name": "updateLayout",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "updated the properties being passed to the anchored region"
            },
            {
              "kind": "field",
              "name": "getAnchor",
              "privacy": "private",
              "description": "Gets the anchor element by id"
            },
            {
              "kind": "field",
              "name": "handleDocumentKeydown",
              "privacy": "private",
              "description": "handles key down events to check for dismiss"
            },
            {
              "kind": "field",
              "name": "updateTooltipVisibility",
              "privacy": "private",
              "description": "determines whether to show or hide the tooltip based on current state"
            },
            {
              "kind": "field",
              "name": "showTooltip",
              "privacy": "private",
              "description": "shows the tooltip"
            },
            {
              "kind": "field",
              "name": "hideTooltip",
              "privacy": "private",
              "description": "hides the tooltip"
            },
            {
              "kind": "field",
              "name": "setRegionProps",
              "privacy": "private",
              "description": "updates the tooltip anchored region props after it has been\nadded to the DOM"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'dismiss' event when the tooltip is visible and escape key is pressed",
              "name": "dismiss"
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "Whether the tooltip is visible or not.\nIf undefined tooltip is shown when anchor element is hovered",
              "fieldName": "visible"
            },
            {
              "name": "anchor",
              "type": {
                "text": "string"
              },
              "default": "\"\"",
              "description": "The id of the element the tooltip is anchored to",
              "fieldName": "anchor"
            },
            {
              "name": "delay",
              "type": {
                "text": "number"
              },
              "default": "300",
              "description": "The delay in milliseconds before a tooltip is shown after a hover event",
              "fieldName": "delay"
            },
            {
              "name": "position",
              "type": {
                "text": "TooltipPosition"
              },
              "description": "Controls the placement of the tooltip relative to the anchor.\nWhen the position is undefined the tooltip is placed above or below the anchor based on available space.",
              "fieldName": "position"
            },
            {
              "name": "auto-update-mode",
              "type": {
                "text": "AutoUpdateMode"
              },
              "default": "\"anchor\"",
              "description": "Controls when the tooltip updates its position, default is 'anchor' which only updates when\nthe anchor is resized.  'auto' will update on scroll/resize events.\nCorresponds to anchored-region auto-update-mode.",
              "fieldName": "autoUpdateMode"
            },
            {
              "name": "horizontal-viewport-lock",
              "type": {
                "text": "boolean"
              },
              "description": "Controls if the tooltip will always remain fully in the viewport on the horizontal axis",
              "fieldName": "horizontalViewportLock"
            },
            {
              "name": "vertical-viewport-lock",
              "type": {
                "text": "boolean"
              },
              "description": "Controls if the tooltip will always remain fully in the viewport on the vertical axis",
              "fieldName": "verticalViewportLock"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TooltipPosition",
          "declaration": {
            "name": "TooltipPosition",
            "module": "src/tooltip/tooltip.ts"
          }
        },
        {
          "kind": "js",
          "name": "Tooltip",
          "declaration": {
            "name": "Tooltip",
            "module": "src/tooltip/tooltip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tree-item/tree-item.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "treeItemTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#(TreeItem:class)} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "treeItemTemplate",
          "declaration": {
            "name": "treeItemTemplate",
            "module": "src/tree-item/tree-item.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tree-item/tree-item.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isTreeItemElement",
          "return": {
            "type": {
              "text": "el is HTMLElement"
            }
          },
          "parameters": [
            {
              "name": "el",
              "type": {
                "text": "Element"
              }
            }
          ],
          "description": "check if the item is a tree item",
          "privacy": "public"
        },
        {
          "kind": "class",
          "description": "A Tree item Custom HTML Element.",
          "name": "TreeItem",
          "cssParts": [
            {
              "description": "The element used to position the tree item content with exception of any child nodes",
              "name": "positioning-region"
            },
            {
              "description": "The element containing the expand/collapse, start, and end slots",
              "name": "content-region"
            },
            {
              "description": "The element wrapping any child items",
              "name": "items"
            },
            {
              "description": "The expand/collapse button",
              "name": "expand-collapse-button"
            }
          ],
          "slots": [
            {
              "description": "Content which can be provided before the tree item content",
              "name": "start"
            },
            {
              "description": "Content which can be provided after the tree item content",
              "name": "end"
            },
            {
              "description": "The default slot for tree item text content",
              "name": ""
            },
            {
              "description": "The slot for tree items (fast tree items manage this assignment themselves)",
              "name": "item"
            },
            {
              "description": "The expand/collapse button",
              "name": "expand-collapse-button"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "default": "false",
              "description": "When true, the control will be appear expanded by user interaction."
            },
            {
              "kind": "method",
              "name": "expandedChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will appear selected by user interaction."
            },
            {
              "kind": "method",
              "name": "selectedChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled | disabled HTML attribute} for more information."
            },
            {
              "kind": "method",
              "name": "itemsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "unknown"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusItem",
              "privacy": "public",
              "static": true,
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the element to focus"
                }
              ],
              "description": "Places document focus on a tree item"
            },
            {
              "kind": "field",
              "name": "isNestedItem",
              "privacy": "public",
              "description": "Whether the tree is nested"
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "events": [
            {
              "description": "Fires a custom 'expanded-change' event when the expanded state changes",
              "name": "expanded-change"
            },
            {
              "description": "Fires a custom 'selected-change' event when the selected state changes",
              "name": "selected-change"
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, the control will be appear expanded by user interaction.",
              "fieldName": "expanded"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will appear selected by user interaction.",
              "fieldName": "selected"
            },
            {
              "type": {
                "text": "boolean"
              },
              "description": "When true, the control will be immutable by user interaction. See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled | disabled HTML attribute for more information.",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isTreeItemElement",
          "declaration": {
            "name": "isTreeItemElement",
            "module": "src/tree-item/tree-item.ts"
          }
        },
        {
          "kind": "js",
          "name": "TreeItem",
          "declaration": {
            "name": "TreeItem",
            "module": "src/tree-item/tree-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tree-view/tree-view.template.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "treeViewTemplate",
          "parameters": [
            {
              "name": "context"
            },
            {
              "name": "definition"
            }
          ],
          "description": "The template for the {@link @microsoft/fast-foundation#TreeView} component.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "treeViewTemplate",
          "declaration": {
            "name": "treeViewTemplate",
            "module": "src/tree-view/tree-view.template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/tree-view/tree-view.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A Tree view Custom HTML Element. Implements the {@link https://w3c.github.io/aria-practices/#TreeView | ARIA TreeView }.",
          "name": "TreeView",
          "slots": [
            {
              "description": "The default slot for tree items",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "renderCollapsedNodes",
              "type": {
                "text": "boolean"
              },
              "privacy": "public",
              "description": "/**\n  When true, the control will be appear expanded by user interaction."
            },
            {
              "kind": "field",
              "name": "currentSelected",
              "type": {
                "text": "HTMLElement | TreeItem | null"
              },
              "privacy": "public",
              "description": "The currently selected tree item"
            },
            {
              "kind": "method",
              "name": "slottedTreeItemsChanged",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "nested",
              "type": {
                "text": "boolean"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusNextNode",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "delta",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "TreeItem"
                  }
                }
              ],
              "description": "Move focus to a tree item based on its offset from the provided item"
            },
            {
              "kind": "field",
              "name": "setItems",
              "privacy": "private",
              "description": "Updates the tree view when slottedTreeItems changes"
            },
            {
              "kind": "method",
              "name": "getValidFocusableItem",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "null | HTMLElement | TreeItem"
                }
              },
              "description": "checks if there are any nested tree items"
            },
            {
              "kind": "method",
              "name": "checkForNestedItems",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "checks if there are any nested tree items"
            },
            {
              "kind": "field",
              "name": "isFocusableElement",
              "privacy": "private",
              "description": "check if the item is focusable"
            },
            {
              "kind": "field",
              "name": "isSelectedElement",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getVisibleNodes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLElement[]"
                }
              }
            },
            {
              "kind": "field",
              "name": "_presentation",
              "type": {
                "text": "ComponentPresentation | null | undefined"
              },
              "privacy": "private",
              "default": "void 0",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "$presentation",
              "type": {
                "text": "ComponentPresentation | null"
              },
              "privacy": "public",
              "description": "A property which resolves the ComponentPresentation instance\nfor the current component.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "template",
              "type": {
                "text": "ElementViewTemplate | void | null"
              },
              "privacy": "public",
              "description": "Sets the template of the element instance. When undefined,\nthe element will attempt to resolve the template from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles | void | null"
              },
              "privacy": "public",
              "description": "Sets the default styles for the element instance. When undefined,\nthe element will attempt to resolve default styles from\nthe associated presentation or custom element definition.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "stylesChanged",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            },
            {
              "kind": "method",
              "name": "compose",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "(\n        overrideDefinition?: OverrideFoundationElementDefinition<T>\n    ) => FoundationElementRegistry<T, K>"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "K"
                  }
                },
                {
                  "name": "elementDefinition",
                  "type": {
                    "text": "T"
                  },
                  "description": "The definition of the element to create the registry\nfunction for."
                }
              ],
              "description": "Defines an element registry function with a set of element definition defaults.",
              "inheritedFrom": {
                "name": "FoundationElement",
                "module": "src/foundation-element/foundation-element.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "render-collapsed-nodes",
              "type": {
                "text": "boolean"
              },
              "description": "/**\n  When true, the control will be appear expanded by user interaction.",
              "fieldName": "renderCollapsedNodes"
            }
          ],
          "superclass": {
            "name": "FoundationElement",
            "module": "/src/foundation-element/foundation-element.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TreeView",
          "declaration": {
            "name": "TreeView",
            "module": "src/tree-view/tree-view.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/apply-mixins.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "applyMixins",
          "parameters": [
            {
              "name": "derivedCtor",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "baseCtors",
              "type": {
                "text": "any[]"
              }
            }
          ],
          "description": "Apply mixins to a constructor. Sourced from {@link https://www.typescriptlang.org/docs/handbook/mixins.html | TypeScript Documentation }.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "applyMixins",
          "declaration": {
            "name": "applyMixins",
            "module": "src/utilities/apply-mixins.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/composed-contains.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "composedContains",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "reference",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The element to test for containment against."
            },
            {
              "name": "test",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The element being tested for containment."
            }
          ],
          "description": "Determines if the reference element contains the test element in a \"composed\" DOM tree that\nignores shadow DOM boundaries.\n\nReturns true of the test element is a descendent of the reference, or exist in\na shadow DOM that is a logical descendent of the reference. Otherwise returns false.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "composedContains",
          "declaration": {
            "name": "composedContains",
            "module": "src/utilities/composed-contains.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/composed-parent.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "composedParent",
          "return": {
            "type": {
              "text": "HTMLElement | null"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "T"
              },
              "description": "The element for which to retrieve the composed parent"
            }
          ],
          "description": "Retrieves the \"composed parent\" element of a node, ignoring DOM tree boundaries.\nWhen the parent of a node is a shadow-root, it will return the host\nelement of the shadow root. Otherwise it will return the parent node or null if\nno parent node exists.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "composedParent",
          "declaration": {
            "name": "composedParent",
            "module": "src/utilities/composed-parent.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/direction.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getDirection",
          "return": {
            "type": {
              "text": "Direction"
            }
          },
          "parameters": [
            {
              "name": "rootNode",
              "type": {
                "text": "HTMLElement"
              },
              "description": "the HTMLElement to begin the query from, usually \"this\" when used in a component controller"
            }
          ],
          "description": "a method to determine the current localization direction of the view",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getDirection",
          "declaration": {
            "name": "getDirection",
            "module": "src/utilities/direction.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/intersection-service.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A service to batch intersection event callbacks so multiple elements can share a single observer",
          "name": "IntersectionService",
          "members": [
            {
              "kind": "field",
              "name": "intersectionDetector",
              "type": {
                "text": "IntersectionObserver | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "observedElements",
              "type": {
                "text": "Map<Element, any[]>"
              },
              "privacy": "private",
              "default": "new Map<Element, any[]>()"
            },
            {
              "kind": "field",
              "name": "initializeIntersectionDetector",
              "privacy": "private",
              "description": "initialize intersection detector"
            },
            {
              "kind": "field",
              "name": "handleIntersection",
              "privacy": "private",
              "description": "Handle intersections"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IntersectionService",
          "declaration": {
            "name": "IntersectionService",
            "module": "src/utilities/intersection-service.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/match-media-stylesheet-behavior.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "An abstract behavior to react to media queries. Implementations should implement\nthe `constructListener` method to perform some action based on media query changes.",
          "name": "MatchMediaBehavior",
          "members": [
            {
              "kind": "field",
              "name": "query",
              "type": {
                "text": "MediaQueryList"
              },
              "privacy": "public",
              "description": "The media query that the behavior operates on.",
              "default": "query"
            },
            {
              "kind": "method",
              "name": "constructListener",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "MediaQueryListListener"
                }
              },
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "typeof FASTElement"
                  },
                  "description": "the element the behavior is acting on."
                }
              ],
              "description": "Constructs a function that will be invoked with the MediaQueryList context"
            },
            {
              "kind": "method",
              "name": "bind",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "typeof FASTElement & HTMLElement"
                  },
                  "description": "The element for which the behavior is bound."
                }
              ],
              "description": "Binds the behavior to the element."
            },
            {
              "kind": "method",
              "name": "unbind",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "typeof FASTElement & HTMLElement"
                  },
                  "description": "The element for which the behavior is unbinding."
                }
              ],
              "description": "Unbinds the behavior from the element."
            },
            {
              "kind": "field",
              "name": "listenerCache",
              "privacy": "private",
              "default": "new WeakMap()",
              "description": "The behavior needs to operate on element instances but elements might share a behavior instance.\nTo ensure proper attachment / detachment per instance, we construct a listener for\neach bind invocation and cache the listeners by element reference."
            }
          ]
        },
        {
          "kind": "class",
          "description": "A behavior to add or remove a stylesheet from an element based on a media query. The behavior ensures that\nstyles are applied while the a query matches the environment and that styles are not applied if the query does\nnot match the environment.",
          "name": "MatchMediaStyleSheetBehavior",
          "members": [
            {
              "kind": "field",
              "name": "query",
              "type": {
                "text": "MediaQueryList"
              },
              "privacy": "public",
              "description": "The media query that the behavior operates on.",
              "default": "query",
              "inheritedFrom": {
                "name": "MatchMediaBehavior",
                "module": "src/utilities/match-media-stylesheet-behavior.ts"
              }
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "ElementStyles"
              },
              "privacy": "public",
              "description": "The styles object to be managed by the behavior.",
              "default": "styles"
            },
            {
              "kind": "method",
              "name": "with",
              "privacy": "public",
              "static": true,
              "parameters": [
                {
                  "name": "query",
                  "type": {
                    "text": "MediaQueryList"
                  },
                  "description": "The media query to operate from."
                }
              ],
              "description": "Defines a function to construct {@link MatchMediaStyleSheetBehavior | MatchMediaStyleSheetBehaviors} for a provided query."
            },
            {
              "kind": "method",
              "name": "constructListener",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "MediaQueryListListener"
                }
              },
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "typeof FASTElement"
                  },
                  "description": "the element the behavior is acting on."
                }
              ],
              "description": "Constructs a function that will be invoked with the MediaQueryList context",
              "inheritedFrom": {
                "name": "MatchMediaBehavior",
                "module": "src/utilities/match-media-stylesheet-behavior.ts"
              }
            },
            {
              "kind": "method",
              "name": "bind",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "typeof FASTElement & HTMLElement"
                  },
                  "description": "The element for which the behavior is bound."
                }
              ],
              "description": "Binds the behavior to the element.",
              "inheritedFrom": {
                "name": "MatchMediaBehavior",
                "module": "src/utilities/match-media-stylesheet-behavior.ts"
              }
            },
            {
              "kind": "method",
              "name": "unbind",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "typeof FASTElement & HTMLElement"
                  },
                  "description": "The element for which the behavior is unbinding."
                }
              ],
              "description": "Unbinds the behavior from the element.",
              "inheritedFrom": {
                "name": "MatchMediaBehavior",
                "module": "src/utilities/match-media-stylesheet-behavior.ts"
              }
            },
            {
              "kind": "field",
              "name": "listenerCache",
              "privacy": "private",
              "default": "new WeakMap()",
              "description": "The behavior needs to operate on element instances but elements might share a behavior instance.\nTo ensure proper attachment / detachment per instance, we construct a listener for\neach bind invocation and cache the listeners by element reference.",
              "inheritedFrom": {
                "name": "MatchMediaBehavior",
                "module": "src/utilities/match-media-stylesheet-behavior.ts"
              }
            }
          ],
          "superclass": {
            "name": "MatchMediaBehavior",
            "module": "src/utilities/match-media-stylesheet-behavior.ts"
          }
        },
        {
          "kind": "variable",
          "name": "forcedColorsStylesheetBehavior",
          "description": "This can be used to construct a behavior to apply a forced-colors only stylesheet.",
          "privacy": "public"
        },
        {
          "kind": "variable",
          "name": "darkModeStylesheetBehavior",
          "description": "This can be used to construct a behavior to apply a prefers color scheme: dark only stylesheet.",
          "privacy": "public"
        },
        {
          "kind": "variable",
          "name": "lightModeStylesheetBehavior",
          "description": "This can be used to construct a behavior to apply a prefers color scheme: light only stylesheet.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MatchMediaBehavior",
          "declaration": {
            "name": "MatchMediaBehavior",
            "module": "src/utilities/match-media-stylesheet-behavior.ts"
          }
        },
        {
          "kind": "js",
          "name": "MatchMediaStyleSheetBehavior",
          "declaration": {
            "name": "MatchMediaStyleSheetBehavior",
            "module": "src/utilities/match-media-stylesheet-behavior.ts"
          }
        },
        {
          "kind": "js",
          "name": "forcedColorsStylesheetBehavior",
          "declaration": {
            "name": "forcedColorsStylesheetBehavior",
            "module": "src/utilities/match-media-stylesheet-behavior.ts"
          }
        },
        {
          "kind": "js",
          "name": "darkModeStylesheetBehavior",
          "declaration": {
            "name": "darkModeStylesheetBehavior",
            "module": "src/utilities/match-media-stylesheet-behavior.ts"
          }
        },
        {
          "kind": "js",
          "name": "lightModeStylesheetBehavior",
          "declaration": {
            "name": "lightModeStylesheetBehavior",
            "module": "src/utilities/match-media-stylesheet-behavior.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/property-stylesheet-behavior.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A behavior to add or remove a stylesheet from an element based on a property. The behavior ensures that\nstyles are applied while the property matches and that styles are not applied if the property does\nnot match.",
          "name": "PropertyStyleSheetBehavior",
          "members": [
            {
              "kind": "method",
              "name": "bind",
              "privacy": "public",
              "parameters": [
                {
                  "name": "elementInstance",
                  "type": {
                    "text": "FASTElement"
                  },
                  "description": "The element for which the property is applied."
                }
              ],
              "description": "Binds the behavior to the element."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PropertyStyleSheetBehavior",
          "declaration": {
            "name": "PropertyStyleSheetBehavior",
            "module": "src/utilities/property-stylesheet-behavior.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/resize-observer.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/whitespace-filter.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "whitespaceFilter",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "Node"
              },
              "description": "The Node that is being inspected"
            },
            {
              "name": "index",
              "type": {
                "text": "number"
              },
              "description": "The index of the node within the array"
            },
            {
              "name": "array",
              "type": {
                "text": "Node[]"
              },
              "description": "The Node array that is being filtered"
            }
          ],
          "description": "a method to filter out any whitespace _only_ nodes, to be used inside a template",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "whitespaceFilter",
          "declaration": {
            "name": "whitespaceFilter",
            "module": "src/utilities/whitespace-filter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/style/disabled.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "disabledCursor",
          "type": {
            "text": "string"
          },
          "default": "\"not-allowed\"",
          "description": "The CSS value for disabled cursors.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "disabledCursor",
          "declaration": {
            "name": "disabledCursor",
            "module": "src/utilities/style/disabled.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/style/display.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "hidden",
          "default": "`:host([hidden]){display:none}`",
          "description": "A CSS fragment to set `display: none;` when the host is hidden using the [hidden] attribute.",
          "privacy": "public"
        },
        {
          "kind": "function",
          "name": "display",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "displayValue",
              "type": {
                "text": "CSSDisplayPropertyValue"
              }
            },
            {
              "description": "The CSS display property value",
              "name": "display"
            }
          ],
          "description": "Applies a CSS display property.\nAlso adds CSS rules to not display the element when the [hidden] attribute is applied to the element.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "hidden",
          "declaration": {
            "name": "hidden",
            "module": "src/utilities/style/display.ts"
          }
        },
        {
          "kind": "js",
          "name": "display",
          "declaration": {
            "name": "display",
            "module": "src/utilities/style/display.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utilities/style/focus.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "focusVisible",
          "description": "The string representing the focus selector to be used. Value\nwill be \"focus-visible\" when https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo\nis supported and \"focus\" when it is not.",
          "privacy": "public"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "focusVisible",
          "declaration": {
            "name": "focusVisible",
            "module": "src/utilities/style/focus.ts"
          }
        }
      ]
    }
  ]
}
