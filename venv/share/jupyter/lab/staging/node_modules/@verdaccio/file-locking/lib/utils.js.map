{"version":3,"file":"utils.js","names":["_fs","_interopRequireDefault","require","_path","_lockfile","obj","__esModule","default","statDir","name","Promise","resolve","reject","dirPath","path","dirname","fs","stat","err","stats","isDirectory","Error","exports","statfile","isFile","lockfile","lockOpts","wait","pollPeriod","stale","retries","retryWait","lockFileName","locker","lock","undefined"],"sources":["../src/utils.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport locker from 'lockfile';\n\nexport const statDir = (name: string): Promise<Error | null> => {\n  return new Promise((resolve, reject): void => {\n    // test to see if the directory exists\n    const dirPath = path.dirname(name);\n    fs.stat(dirPath, function (err, stats) {\n      if (err) {\n        return reject(err);\n      } else if (!stats.isDirectory()) {\n        return resolve(new Error(`${path.dirname(name)} is not a directory`));\n      } else {\n        return resolve(null);\n      }\n    });\n  });\n};\n\nexport const statfile = (name: string): Promise<Error | null> => {\n  return new Promise((resolve, reject): void => {\n    // test to see if the directory exists\n    fs.stat(name, function (err, stats) {\n      if (err) {\n        return reject(err);\n      } else if (!stats.isFile()) {\n        return resolve(new Error(`${path.dirname(name)} is not a file`));\n      } else {\n        return resolve(null);\n      }\n    });\n  });\n};\n\nexport const lockfile = (name: string): Promise<unknown> => {\n  return new Promise((resolve): void => {\n    const lockOpts = {\n      // time (ms) to wait when checking for stale locks\n      wait: 1000,\n      // how often (ms) to re-check stale locks\n      pollPeriod: 100,\n      // locks are considered stale after 5 minutes\n      stale: 5 * 60 * 1000,\n      // number of times to attempt to create a lock\n      retries: 100,\n      // time (ms) between tries\n      retryWait: 100,\n    };\n    const lockFileName = `${name}.lock`;\n    locker.lock(lockFileName, lockOpts, () => {\n      resolve(undefined);\n    });\n  });\n};\n"],"mappings":";;;;;;AAAA,IAAAA,GAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,KAAA,GAAAF,sBAAA,CAAAC,OAAA;AAEA,IAAAE,SAAA,GAAAH,sBAAA,CAAAC,OAAA;AAA8B,SAAAD,uBAAAI,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAEvB,MAAMG,OAAO,GAAIC,IAAY,IAA4B;EAC9D,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAW;IAC5C;IACA,MAAMC,OAAO,GAAGC,aAAI,CAACC,OAAO,CAACN,IAAI,CAAC;IAClCO,WAAE,CAACC,IAAI,CAACJ,OAAO,EAAE,UAAUK,GAAG,EAAEC,KAAK,EAAE;MACrC,IAAID,GAAG,EAAE;QACP,OAAON,MAAM,CAACM,GAAG,CAAC;MACpB,CAAC,MAAM,IAAI,CAACC,KAAK,CAACC,WAAW,EAAE,EAAE;QAC/B,OAAOT,OAAO,CAAC,IAAIU,KAAK,CAAE,GAAEP,aAAI,CAACC,OAAO,CAACN,IAAI,CAAE,qBAAoB,CAAC,CAAC;MACvE,CAAC,MAAM;QACL,OAAOE,OAAO,CAAC,IAAI,CAAC;MACtB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAACW,OAAA,CAAAd,OAAA,GAAAA,OAAA;AAEK,MAAMe,QAAQ,GAAId,IAAY,IAA4B;EAC/D,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAW;IAC5C;IACAI,WAAE,CAACC,IAAI,CAACR,IAAI,EAAE,UAAUS,GAAG,EAAEC,KAAK,EAAE;MAClC,IAAID,GAAG,EAAE;QACP,OAAON,MAAM,CAACM,GAAG,CAAC;MACpB,CAAC,MAAM,IAAI,CAACC,KAAK,CAACK,MAAM,EAAE,EAAE;QAC1B,OAAOb,OAAO,CAAC,IAAIU,KAAK,CAAE,GAAEP,aAAI,CAACC,OAAO,CAACN,IAAI,CAAE,gBAAe,CAAC,CAAC;MAClE,CAAC,MAAM;QACL,OAAOE,OAAO,CAAC,IAAI,CAAC;MACtB;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAACW,OAAA,CAAAC,QAAA,GAAAA,QAAA;AAEK,MAAME,QAAQ,GAAIhB,IAAY,IAAuB;EAC1D,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAW;IACpC,MAAMe,QAAQ,GAAG;MACf;MACAC,IAAI,EAAE,IAAI;MACV;MACAC,UAAU,EAAE,GAAG;MACf;MACAC,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;MACpB;MACAC,OAAO,EAAE,GAAG;MACZ;MACAC,SAAS,EAAE;IACb,CAAC;IACD,MAAMC,YAAY,GAAI,GAAEvB,IAAK,OAAM;IACnCwB,iBAAM,CAACC,IAAI,CAACF,YAAY,EAAEN,QAAQ,EAAE,MAAM;MACxCf,OAAO,CAACwB,SAAS,CAAC;IACpB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAACb,OAAA,CAAAG,QAAA,GAAAA,QAAA"}