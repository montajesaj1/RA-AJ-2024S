import type { IInlineCompletionContext, IInlineCompletionProvider, InlineCompletionTriggerKind } from '../tokens';
import type { CompletionHandler } from '../handler';
import type { ISettingRegistry } from '@jupyterlab/settingregistry';
import { ITranslator } from '@jupyterlab/translation';
import { LabIcon } from '@jupyterlab/ui-components';
/**
 * An example inline completion provider using history to populate suggestions.
 */
export declare class HistoryInlineCompletionProvider implements IInlineCompletionProvider {
    protected options: HistoryInlineCompletionProvider.IOptions;
    readonly identifier = "@jupyterlab/inline-completer:history";
    constructor(options: HistoryInlineCompletionProvider.IOptions);
    get name(): string;
    get icon(): LabIcon.ILabIcon;
    get schema(): ISettingRegistry.IProperty;
    configure(settings: {
        maxSuggestions: number;
    }): void;
    fetch(request: CompletionHandler.IRequest, context: IInlineCompletionContext, trigger?: InlineCompletionTriggerKind): Promise<{
        items: {
            insertText: string;
        }[];
    }>;
    private _trans;
    private _maxSuggestions;
}
export declare namespace HistoryInlineCompletionProvider {
    interface IOptions {
        translator?: ITranslator;
    }
}
