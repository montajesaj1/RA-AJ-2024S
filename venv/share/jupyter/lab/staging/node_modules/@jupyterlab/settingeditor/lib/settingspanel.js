/* -----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/
import React, { useEffect, useState } from 'react';
import { SettingsFormEditor } from './SettingsFormEditor';
import { SettingsEditorPlaceholder } from './InstructionsPlaceholder';
/**
 * React component that displays a list of SettingsFormEditor
 * components.
 */
export const SettingsPanel = ({ settings, editorRegistry, onSelect, handleSelectSignal, hasError, updateDirtyState, updateFilterSignal, translator, initialFilter }) => {
    const [activePluginId, setActivePluginId] = useState(null);
    const [filterPlugin, setFilter] = useState(initialFilter ? () => initialFilter : null);
    const wrapperRef = React.useRef(null);
    const editorDirtyStates = React.useRef({});
    useEffect(() => {
        var _a;
        const onFilterUpdate = (list, newFilter) => {
            newFilter ? setFilter(() => newFilter) : setFilter(null);
        };
        // When filter updates, only show plugins that match search.
        updateFilterSignal.connect(onFilterUpdate);
        const onSelectChange = (list, pluginId) => {
            setActivePluginId(pluginId);
        };
        (_a = handleSelectSignal === null || handleSelectSignal === void 0 ? void 0 : handleSelectSignal.connect) === null || _a === void 0 ? void 0 : _a.call(handleSelectSignal, onSelectChange);
        return () => {
            var _a;
            updateFilterSignal.disconnect(onFilterUpdate);
            (_a = handleSelectSignal === null || handleSelectSignal === void 0 ? void 0 : handleSelectSignal.disconnect) === null || _a === void 0 ? void 0 : _a.call(handleSelectSignal, onSelectChange);
        };
    }, []);
    const updateDirtyStates = React.useCallback((id, dirty) => {
        if (editorDirtyStates.current) {
            editorDirtyStates.current[id] = dirty;
            for (const editor in editorDirtyStates.current) {
                if (editorDirtyStates.current[editor]) {
                    updateDirtyState(true);
                    return;
                }
            }
        }
        updateDirtyState(false);
    }, [editorDirtyStates, updateDirtyState]);
    const renderers = React.useMemo(() => Object.entries(editorRegistry.renderers).reduce((agg, [id, renderer]) => {
        const splitPosition = id.lastIndexOf('.');
        const pluginId = id.substring(0, splitPosition);
        const propertyName = id.substring(splitPosition + 1);
        if (!agg[pluginId]) {
            agg[pluginId] = {};
        }
        if (!agg[pluginId][propertyName] && renderer.fieldRenderer) {
            agg[pluginId][propertyName] = renderer.fieldRenderer;
        }
        return agg;
    }, {}), [editorRegistry]);
    if (!activePluginId && !filterPlugin) {
        return React.createElement(SettingsEditorPlaceholder, { translator: translator });
    }
    return (React.createElement("div", { className: "jp-SettingsPanel", ref: wrapperRef }, settings.map(pluginSettings => {
        // Pass filtered results to SettingsFormEditor to only display filtered fields.
        const filtered = filterPlugin
            ? filterPlugin(pluginSettings.plugin)
            : null;
        // If filtered results are an array, only show if the array is non-empty.
        if ((activePluginId && activePluginId !== pluginSettings.id) ||
            (filtered !== null && filtered.length === 0)) {
            return undefined;
        }
        return (React.createElement("div", { className: "jp-SettingsForm", key: `${pluginSettings.id}SettingsEditor` },
            React.createElement(SettingsFormEditor, { filteredValues: filtered, settings: pluginSettings, renderers: renderers, hasError: (error) => {
                    hasError(pluginSettings.id, error);
                }, updateDirtyState: (dirty) => {
                    updateDirtyStates(pluginSettings.id, dirty);
                }, onSelect: onSelect, translator: translator })));
    })));
};
//# sourceMappingURL=settingspanel.js.map