import { Poll } from '@lumino/polling';
import { ISignal } from '@lumino/signaling';
import { Workspace } from '@jupyterlab/services';
import { IWorkspacesModel } from './tokens';
/**
 * An implementation of a workspaces model.
 */
export declare class WorkspacesModel implements IWorkspacesModel {
    constructor(options: WorkspacesModel.IOptions);
    /**
     * The list of available workspaces.
     */
    get workspaces(): Workspace.IWorkspace[];
    /**
     * The list of workspace identifiers.
     */
    get identifiers(): string[];
    /**
     * Create an empty workspace.
     */
    create(workspaceId: string): Promise<void>;
    /**
     * A signal emitted when the workspaces list is refreshed.
     */
    get refreshed(): ISignal<WorkspacesModel, void>;
    /**
     * Force a refresh of the workspaces list.
     */
    refresh(): Promise<void>;
    /**
     * Rename a workspace.
     */
    rename(workspaceId: string, newName: string): Promise<void>;
    /**
     * Reset a workspace.
     */
    reset(workspaceId: string): Promise<void>;
    /**
     * Remove a workspace.
     */
    remove(workspaceId: string): Promise<void>;
    /**
     * Save workspace under a different name.
     */
    saveAs(workspaceId: string, newName: string): Promise<void>;
    /**
     * Get whether the model is disposed.
     */
    get isDisposed(): boolean;
    /**
     * Dispose of the resources held by the model.
     */
    dispose(): void;
    private _fetchList;
    private _refreshed;
    private _isDisposed;
    private _poll;
    private _manager;
    private _workspaceData;
}
/**
 * The namespace for the `WorkspacesModel` class statics.
 */
export declare namespace WorkspacesModel {
    /**
     * An options object for initializing a the workspaces model.
     */
    interface IOptions {
        /**
         * The workspaces manager.
         */
        manager: Workspace.IManager;
        /**
         * Whether a to automatically loads initial list of workspaces.
         * The default is `true`.
         */
        auto?: boolean;
        /**
         * The time interval for browser refreshing, in ms.
         */
        refreshInterval?: number;
        /**
         * When the model stops polling the API. Defaults to `when-hidden`.
         */
        refreshStandby?: Poll.Standby | (() => boolean | Poll.Standby);
    }
}
