import { IWindowResolver } from '@jupyterlab/apputils';
import { IWorkspaceCommands, IWorkspacesModel } from '@jupyterlab/workspaces';
import { IRunningSessionManagers } from '@jupyterlab/running';
import { ITranslator, nullTranslator } from '@jupyterlab/translation';
import { WORKSPACE_ITEM_CLASS } from './commands';
import { blankIcon, checkIcon, deleteIcon } from '@jupyterlab/ui-components';
/**
 * The extension populating sidebar with workspaces list.
 */
export const workspacesSidebar = {
    id: '@jupyterlab/workspaces-extension:sidebar',
    description: 'Populates running sidebar with workspaces.',
    requires: [
        IWorkspaceCommands,
        IWorkspacesModel,
        IRunningSessionManagers,
        IWindowResolver
    ],
    optional: [ITranslator],
    autoStart: true,
    activate: async (app, commands, model, managers, resolver, translator) => {
        const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('jupyterlab');
        class WorkspaceItem {
            constructor(workspace) {
                this._workspace = workspace;
                this.context = workspace.metadata.id;
                this.className = WORKSPACE_ITEM_CLASS;
            }
            open() {
                return app.commands.execute(commands.open, {
                    workspace: this._workspace.metadata.id
                });
            }
            async shutdown() {
                await app.commands.execute(commands.deleteWorkspace, {
                    workspace: this._workspace.metadata.id
                });
                await model.refresh();
            }
            icon() {
                return resolver.name === this._workspace.metadata.id
                    ? checkIcon
                    : blankIcon;
            }
            label() {
                return this._workspace.metadata.id;
            }
            labelTitle() {
                var _a, _b, _c, _d;
                return trans.__('%1 workspace with %2 tabs, last modified on %3', this._workspace.metadata.id, (_d = (_c = (_b = (_a = this._workspace.data['layout-restorer:data']) === null || _a === void 0 ? void 0 : _a.main) === null || _b === void 0 ? void 0 : _b.dock) === null || _c === void 0 ? void 0 : _c.widgets) === null || _d === void 0 ? void 0 : _d.length, this._workspace.metadata['last_modified']);
            }
        }
        managers.add({
            name: trans.__('Workspaces'),
            running: () => {
                return model.workspaces.map((workspace) => {
                    return new WorkspaceItem(workspace);
                });
            },
            shutdownAll: async () => {
                await Promise.all(model.workspaces.map(workspace => model.remove(workspace.metadata.id)));
                await model.refresh();
            },
            shutdownItemIcon: deleteIcon,
            refreshRunning: async () => {
                await model.refresh();
            },
            runningChanged: model.refreshed,
            shutdownLabel: (item) => trans.__('Delete %1', item.label()),
            shutdownAllLabel: trans.__('Delete All'),
            shutdownAllConfirmationText: trans.__('Are you sure you want to delete all workspaces? Deleted workspaces cannot be recovered.')
        });
    }
};
//# sourceMappingURL=sidebar.js.map