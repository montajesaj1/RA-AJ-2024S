/* -----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/
/**
 * @packageDocumentation
 * @module rendermime-extension
 */
import { ISanitizer } from '@jupyterlab/apputils';
import { IDocumentManager } from '@jupyterlab/docmanager';
import { ILatexTypesetter, IMarkdownParser, IRenderMimeRegistry, RenderMimeRegistry, standardRendererFactories } from '@jupyterlab/rendermime';
import { ITranslator, nullTranslator } from '@jupyterlab/translation';
var CommandIDs;
(function (CommandIDs) {
    CommandIDs.handleLink = 'rendermime:handle-local-link';
})(CommandIDs || (CommandIDs = {}));
/**
 * A plugin providing a rendermime registry.
 */
const plugin = {
    id: '@jupyterlab/rendermime-extension:plugin',
    description: 'Provides the render mime registry.',
    optional: [
        IDocumentManager,
        ILatexTypesetter,
        ISanitizer,
        IMarkdownParser,
        ITranslator
    ],
    provides: IRenderMimeRegistry,
    activate: activate,
    autoStart: true
};
/**
 * Export the plugin as default.
 */
export default plugin;
const DEBUGGER_OPEN_SOURCE = 'debugger:open-source';
/**
 * Activate the rendermine plugin.
 */
function activate(app, docManager, latexTypesetter, sanitizer, markdownParser, translator) {
    const trans = (translator !== null && translator !== void 0 ? translator : nullTranslator).load('jupyterlab');
    if (docManager) {
        app.commands.addCommand(CommandIDs.handleLink, {
            label: trans.__('Handle Local Link'),
            execute: args => {
                const path = args['path'];
                const id = args['id'];
                const scope = args['scope'] || 'server';
                if (!path) {
                    return;
                }
                if (scope === 'kernel') {
                    // Note: using a command instead of requiring
                    // `IDebuggerSourceViewer` to avoid a dependency cycle.
                    if (!app.commands.hasCommand(DEBUGGER_OPEN_SOURCE)) {
                        console.warn('Cannot open kernel file: debugger sources provider not available');
                        return;
                    }
                    return app.commands.execute(DEBUGGER_OPEN_SOURCE, { path });
                }
                // First check if the path exists on the server.
                return docManager.services.contents
                    .get(path, { content: false })
                    .then(() => {
                    // Open the link with the default rendered widget factory,
                    // if applicable.
                    const factory = docManager.registry.defaultRenderedWidgetFactory(path);
                    const widget = docManager.openOrReveal(path, factory.name);
                    // Handle the hash if one has been provided.
                    if (widget && id) {
                        widget.setFragment(id);
                    }
                });
            }
        });
    }
    return new RenderMimeRegistry({
        initialFactories: standardRendererFactories,
        linkHandler: !docManager
            ? undefined
            : {
                handleLink: (node, path, id) => {
                    // If node has the download attribute explicitly set, use the
                    // default browser downloading behavior.
                    if (node.tagName === 'A' && node.hasAttribute('download')) {
                        return;
                    }
                    app.commandLinker.connectNode(node, CommandIDs.handleLink, {
                        path,
                        id
                    });
                },
                handlePath: (node, path, scope, id) => {
                    app.commandLinker.connectNode(node, CommandIDs.handleLink, {
                        path,
                        id,
                        scope
                    });
                }
            },
        latexTypesetter: latexTypesetter !== null && latexTypesetter !== void 0 ? latexTypesetter : undefined,
        markdownParser: markdownParser !== null && markdownParser !== void 0 ? markdownParser : undefined,
        translator: translator !== null && translator !== void 0 ? translator : undefined,
        sanitizer: sanitizer !== null && sanitizer !== void 0 ? sanitizer : undefined
    });
}
//# sourceMappingURL=index.js.map