import { ToolbarRegistry } from '@jupyterlab/apputils';
import { Cell, CellModel } from '@jupyterlab/cells';
import { DocumentRegistry } from '@jupyterlab/docregistry';
import { Notebook, NotebookPanel } from '@jupyterlab/notebook';
import { IObservableList } from '@jupyterlab/observables';
import { CommandRegistry } from '@lumino/commands';
import { IDisposable } from '@lumino/disposable';
import { Widget } from '@lumino/widgets';
import { IMapChange } from '@jupyter/ydoc';
/**
 * Watch a notebook so that a cell toolbar appears on the active cell
 */
export declare class CellToolbarTracker implements IDisposable {
    /**
     * CellToolbarTracker constructor
     *
     * @param panel The notebook panel
     * @param toolbar The toolbar; deprecated use {@link toolbarFactory} instead
     * @param toolbarFactory The toolbar factory
     */
    constructor(panel: NotebookPanel, toolbar?: IObservableList<ToolbarRegistry.IToolbarItem>, toolbarFactory?: (widget: Cell) => IObservableList<ToolbarRegistry.IToolbarItem>);
    /**
     * @deprecated Will become protected in JupyterLab 5
     */
    _onMetadataChanged(model: CellModel, args: IMapChange): void;
    /**
     * @deprecated Will become protected in JupyterLab 5
     */
    _onActiveCellChanged(notebook: Notebook): void;
    get isDisposed(): boolean;
    dispose(): void;
    private _addToolbar;
    private _getCell;
    private _removeToolbar;
    /**
     * Call back on settings changes
     *
     * @deprecated To remove when toolbar can not be provided directly to the tracker
     */
    private _onToolbarChanged;
    private _changedEventCallback;
    private _resizeEventCallback;
    private _updateCellForToolbarOverlap;
    private _cellToolbarOverlapsContents;
    /**
     * Check for overlap between rendered Markdown and the cell toolbar
     *
     * @param activeCell A rendered MarkdownCell
     * @returns `true` if the first line of the output overlaps with the cell toolbar, `false` otherwise
     */
    private _markdownOverlapsToolbar;
    private _outputOverlapsToolbar;
    private _codeOverlapsToolbar;
    private _cellToolbarRect;
    private _cellToolbarLeft;
    private _isDisposed;
    private _panel;
    private _previousActiveCell;
    private _toolbar;
    private _toolbarItems;
    private _toolbarFactory;
}
/**
 * Widget extension that creates a CellToolbarTracker each time a notebook is
 * created.
 */
export declare class CellBarExtension implements DocumentRegistry.WidgetExtension {
    static readonly FACTORY_NAME = "Cell";
    constructor(commands: CommandRegistry, toolbarFactory?: (widget: Widget) => IObservableList<ToolbarRegistry.IToolbarItem>);
    protected get defaultToolbarFactory(): (widget: Widget) => IObservableList<ToolbarRegistry.IToolbarItem>;
    createNew(panel: NotebookPanel): IDisposable;
    private _commands;
    private _toolbarFactory;
}
