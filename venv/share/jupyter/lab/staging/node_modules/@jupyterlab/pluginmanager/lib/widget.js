/*
 * Copyright (c) Jupyter Development Team.
 * Distributed under the terms of the Modified BSD License.
 */
import { VDomRenderer } from '@jupyterlab/apputils';
import { FilterBox, lockIcon, Table } from '@jupyterlab/ui-components';
import { Panel } from '@lumino/widgets';
import * as React from 'react';
/**
 * Panel with a table of available plugins allowing to enable/disable each.
 */
export class Plugins extends Panel {
    constructor(options) {
        const { model, translator } = options;
        super();
        this.model = model;
        this.addClass('jp-pluginmanager');
        this.trans = translator.load('jupyterlab');
        this.addWidget(new Disclaimer(model, this.trans));
        const header = new Header(model, this.trans);
        this.addWidget(header);
        const availableList = new AvailableList(model, this.trans);
        this.addWidget(availableList);
    }
}
class AvailableList extends VDomRenderer {
    constructor(model, trans) {
        super(model);
        this.trans = trans;
        this.addClass('jp-pluginmanager-AvailableList');
    }
    render() {
        return (React.createElement(React.Fragment, null, this.model.statusError !== null ? (React.createElement(ErrorMessage, null, this.trans.__('Error querying installed extensions%1', this.model.statusError ? `: ${this.model.statusError}` : '.'))) : this.model.isLoading ? (React.createElement("div", { className: "jp-pluginmanager-loader" }, this.trans.__('Updating plugin listâ€¦'))) : (React.createElement(Table, { blankIndicator: () => {
                return React.createElement("div", null, this.trans.__('No entries'));
            }, sortKey: 'plugin-id', rows: this.model.available
                .filter(pkg => {
                const pattern = new RegExp(this.model.query, 'i');
                return (pattern.test(pkg.id) ||
                    pattern.test(pkg.extension) ||
                    (pkg.tokenLabel && pattern.test(pkg.tokenLabel)));
            })
                .map(data => {
                return {
                    data: data,
                    key: data.id
                };
            }), columns: [
                {
                    id: 'plugin-id',
                    label: this.trans.__('Plugin'),
                    renderCell: (row) => (React.createElement(React.Fragment, null,
                        React.createElement("code", null, row.id),
                        React.createElement("br", null),
                        row.description)),
                    sort: (a, b) => a.id.localeCompare(b.id)
                },
                {
                    id: 'description',
                    label: this.trans.__('Description'),
                    renderCell: (row) => React.createElement(React.Fragment, null, row.description),
                    sort: (a, b) => a.description && b.description
                        ? a.description.localeCompare(b.description)
                        : undefined,
                    isHidden: true
                },
                {
                    id: 'autostart',
                    label: this.trans.__('Autostart?'),
                    renderCell: (row) => {
                        switch (row.autoStart) {
                            case 'defer':
                                return this.trans.__('Defer');
                            case true:
                                return this.trans.__('Yes');
                            case false:
                            case undefined: // The default is `false`.
                                return this.trans.__('No');
                            default:
                                const leftover = row.autoStart;
                                throw new Error(`Unknown value: ${leftover}`);
                        }
                    },
                    sort: (a, b) => a.autoStart === b.autoStart ? 0 : a.autoStart ? -1 : 1
                },
                {
                    id: 'requires',
                    label: this.trans.__('Depends on'),
                    renderCell: (row) => (React.createElement(React.Fragment, null, row.requires.map(v => v.name).join('\n'))),
                    sort: (a, b) => (a.requires || []).length - (b.requires || []).length,
                    isHidden: true
                },
                {
                    id: 'extension',
                    label: this.trans.__('Extension'),
                    renderCell: (row) => React.createElement(React.Fragment, null, row.extension),
                    sort: (a, b) => a.extension.localeCompare(b.extension)
                },
                {
                    id: 'provides',
                    label: this.trans.__('Provides'),
                    renderCell: (row) => (React.createElement(React.Fragment, null, row.provides ? (React.createElement("code", { title: row.provides.name }, row.tokenLabel)) : ('-'))),
                    sort: (a, b) => (a.tokenLabel || '').localeCompare(b.tokenLabel || '')
                },
                {
                    id: 'enabled',
                    label: this.trans.__('Enabled'),
                    renderCell: (row) => (React.createElement(React.Fragment, null,
                        React.createElement("input", { type: "checkbox", checked: row.enabled, disabled: row.locked || !this.model.isDisclaimed, title: row.locked || !this.model.isDisclaimed
                                ? row.locked
                                    ? this.trans.__('This plugin is locked.')
                                    : this.trans.__('To enable/disable, please acknowledge the disclaimer.')
                                : row.enabled
                                    ? this.trans.__('Disable %1 plugin', row.id)
                                    : this.trans.__('Enable %1 plugin', row.id), onChange: (event) => {
                                if (!this.model.isDisclaimed) {
                                    return;
                                }
                                if (event.target.checked) {
                                    void this.onAction('enable', row);
                                }
                                else {
                                    void this.onAction('disable', row);
                                }
                            } }),
                        row.locked ? (React.createElement(lockIcon.react, { tag: "span", title: this.trans.__('This plugin was locked by system administrator or is a critical dependency and cannot be enabled/disabled.') })) : (''))),
                    sort: (a, b) => +a.enabled - +b.enabled
                }
            ] }))));
    }
    /**
     * Callback handler for when the user wants to perform an action on an extension.
     *
     * @param action The action to perform.
     * @param entry The entry to perform the action on.
     */
    onAction(action, entry) {
        switch (action) {
            case 'enable':
                return this.model.enable(entry);
            case 'disable':
                return this.model.disable(entry);
            default:
                throw new Error(`Invalid action: ${action}`);
        }
    }
}
class Disclaimer extends VDomRenderer {
    constructor(model, trans) {
        super(model);
        this.trans = trans;
        this.addClass('jp-pluginmanager-Disclaimer');
    }
    render() {
        return (React.createElement("div", null,
            React.createElement("div", null, this.trans.__('Customise your experience/improve performance by disabling plugins you do not need. To disable or uninstall an entire extension use the Extension Manager instead. Changes will apply after reloading JupyterLab.')),
            React.createElement("label", null,
                React.createElement("input", { type: "checkbox", className: "jp-mod-styled jp-pluginmanager-Disclaimer-checkbox", defaultChecked: this.model.isDisclaimed, onChange: event => {
                        this.model.isDisclaimed = event.target.checked;
                    } }),
                this.trans.__('I understand that disabling core application plugins may render features and parts of the user interface unavailable and recovery using `jupyter labextension enable <plugin-name>` command may be required'))));
    }
}
class Header extends VDomRenderer {
    constructor(model, trans) {
        super(model);
        this.trans = trans;
        this.addClass('jp-pluginmanager-Header');
    }
    render() {
        return (React.createElement(React.Fragment, null,
            React.createElement(FilterBox, { placeholder: this.trans.__('Filter'), updateFilter: (fn, query) => {
                    this.model.query = query !== null && query !== void 0 ? query : '';
                }, initialQuery: this.model.query, useFuzzyFilter: false }),
            React.createElement("div", { className: `jp-pluginmanager-pending ${this.model.hasPendingActions() ? 'jp-mod-hasPending' : ''}` }),
            this.model.actionError && (React.createElement(ErrorMessage, null,
                React.createElement("p", null, this.trans.__('Error when performing an action.')),
                React.createElement("p", null, this.trans.__('Reason given:')),
                React.createElement("pre", null, this.model.actionError)))));
    }
}
function ErrorMessage(props) {
    return React.createElement("div", { className: "jp-pluginmanager-error" }, props.children);
}
//# sourceMappingURL=widget.js.map