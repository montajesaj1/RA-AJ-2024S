/*
 * Copyright (c) Jupyter Development Team.
 * Distributed under the terms of the Modified BSD License.
 */
import { deleteLine, toggleBlockComment, toggleComment } from '@codemirror/commands';
import { selectNextOccurrence } from '@codemirror/search';
import { ITranslator, nullTranslator } from '@jupyterlab/translation';
/**
 * Identifiers of commands.
 */
var CommandIDs;
(function (CommandIDs) {
    CommandIDs.deleteLine = 'codemirror:delete-line';
    CommandIDs.toggleBlockComment = 'codemirror:toggle-block-comment';
    CommandIDs.toggleComment = 'codemirror:toggle-comment';
    CommandIDs.selectNextOccurrence = 'codemirror:select-next-occurrence';
})(CommandIDs || (CommandIDs = {}));
/**
 * Selector for CodeMirror editor with `cmView` attribute.
 */
const CODE_MIRROR_SELECTOR = '.cm-content';
/**
 * The editor commands.
 */
export const commandsPlugin = {
    id: '@jupyterlab/codemirror-extension:commands',
    description: 'Registers commands acting on selected/active CodeMirror editor.',
    autoStart: true,
    optional: [ITranslator],
    activate: (app, translator) => {
        translator = translator !== null && translator !== void 0 ? translator : nullTranslator;
        const trans = translator.load('jupyterlab');
        const isCodeMirror = (node) => node.classList.contains(CODE_MIRROR_SELECTOR);
        const findEditorView = () => {
            var _a, _b;
            const node = (_a = app.contextMenuHitTest(isCodeMirror)) !== null && _a !== void 0 ? _a : (_b = document.activeElement) === null || _b === void 0 ? void 0 : _b.closest(CODE_MIRROR_SELECTOR);
            if (!node) {
                return;
            }
            if (!('cmView' in node)) {
                return;
            }
            return node.cmView.view;
        };
        const isEnabled = () => {
            return !!findEditorView();
        };
        app.commands.addCommand(CommandIDs.deleteLine, {
            label: trans.__('Delete the current line'),
            execute: () => {
                const view = findEditorView();
                if (!view) {
                    return;
                }
                deleteLine(view);
            },
            isEnabled
        });
        app.commands.addCommand(CommandIDs.toggleBlockComment, {
            label: trans.__('Toggle Block Comment'),
            caption: trans.__('Toggles block commends in languages which support it (e.g. C, JavaScript)'),
            execute: () => {
                const view = findEditorView();
                if (!view) {
                    return;
                }
                toggleBlockComment(view);
            },
            isEnabled
        });
        app.commands.addCommand(CommandIDs.toggleComment, {
            label: trans.__('Toggle Comment'),
            execute: () => {
                const view = findEditorView();
                if (!view) {
                    return;
                }
                toggleComment(view);
            },
            isEnabled
        });
        app.commands.addCommand(CommandIDs.selectNextOccurrence, {
            label: trans.__('Select Next Occurrence'),
            execute: () => {
                const view = findEditorView();
                if (!view) {
                    return;
                }
                selectNextOccurrence(view);
            },
            isEnabled
        });
    }
};
//# sourceMappingURL=commands.js.map